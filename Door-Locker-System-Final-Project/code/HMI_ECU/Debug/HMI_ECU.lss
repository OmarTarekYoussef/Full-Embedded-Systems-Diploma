
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00003c30  00003cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  0080017c  0080017c  00003de0  2**0
                  ALLOC
  3 .stab         000037bc  00000000  00000000  00003de0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000147d  00000000  00000000  0000759c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008a19  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a912  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c5ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c70c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c999  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d167  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e7 05 	call	0xbce	; 0xbce <main>
      8a:	0c 94 16 1e 	jmp	0x3c2c	; 0x3c2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e5       	ldi	r26, 0x5F	; 95
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e5       	ldi	r24, 0x5F	; 95
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 1d 	jmp	0x3b6c	; 0x3b6c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a6 1d 	jmp	0x3b4c	; 0x3b4c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c2 1d 	jmp	0x3b84	; 0x3b84 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 aa 1d 	jmp	0x3b54	; 0x3b54 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ALERT_Tick_Processing>:
 * Description : Function to assign the call back function(every interrupt) to of
 *               the ALERT timer (60 seconds).
 *
 */
void ALERT_Tick_Processing(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_Count++;
     b4e:	80 91 80 01 	lds	r24, 0x0180
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 80 01 	sts	0x0180, r24
	if(g_Count == NUMBER_OF_INTTERUPT_PER_SECOND)
     b58:	80 91 80 01 	lds	r24, 0x0180
     b5c:	80 32       	cpi	r24, 0x20	; 32
     b5e:	91 f4       	brne	.+36     	; 0xb84 <ALERT_Tick_Processing+0x3e>
	{
		g_Count = 0;
     b60:	10 92 80 01 	sts	0x0180, r1
		g_ALERT_count++;
     b64:	80 91 81 01 	lds	r24, 0x0181
     b68:	8f 5f       	subi	r24, 0xFF	; 255
     b6a:	80 93 81 01 	sts	0x0181, r24
		if(g_ALERT_count == 5)
     b6e:	80 91 81 01 	lds	r24, 0x0181
     b72:	85 30       	cpi	r24, 0x05	; 5
     b74:	39 f4       	brne	.+14     	; 0xb84 <ALERT_Tick_Processing+0x3e>
		{
			g_ALERT_Tick_flag = 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 7e 01 	sts	0x017E, r24
			g_ALERT_count = 0;
     b7c:	10 92 81 01 	sts	0x0181, r1
			Timer_DeInit();
     b80:	0e 94 39 1c 	call	0x3872	; 0x3872 <Timer_DeInit>
		}
	}
}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DOOR_Tick_Processing>:
 * Description : Function to assign the call back function(every interrupt) to of
 *               the motor timer (33 seconds).
 *
 */
void DOOR_Tick_Processing(void)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	g_Count++;
     b92:	80 91 80 01 	lds	r24, 0x0180
     b96:	8f 5f       	subi	r24, 0xFF	; 255
     b98:	80 93 80 01 	sts	0x0180, r24
	if(g_Count == NUMBER_OF_INTTERUPT_PER_SECOND)
     b9c:	80 91 80 01 	lds	r24, 0x0180
     ba0:	80 32       	cpi	r24, 0x20	; 32
     ba2:	91 f4       	brne	.+36     	; 0xbc8 <DOOR_Tick_Processing+0x3e>
	{
		g_Count = 0;
     ba4:	10 92 80 01 	sts	0x0180, r1
		g_DOOR_count++;
     ba8:	80 91 82 01 	lds	r24, 0x0182
     bac:	8f 5f       	subi	r24, 0xFF	; 255
     bae:	80 93 82 01 	sts	0x0182, r24
		if(g_DOOR_count == 33)
     bb2:	80 91 82 01 	lds	r24, 0x0182
     bb6:	81 32       	cpi	r24, 0x21	; 33
     bb8:	39 f4       	brne	.+14     	; 0xbc8 <DOOR_Tick_Processing+0x3e>
		{
			g_DOOR_Tick_flag = 1;
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	80 93 7f 01 	sts	0x017F, r24
			g_DOOR_count = 0;
     bc0:	10 92 82 01 	sts	0x0182, r1
			Timer_DeInit();
     bc4:	0e 94 39 1c 	call	0x3872	; 0x3872 <Timer_DeInit>
		}
	}
}
     bc8:	cf 91       	pop	r28
     bca:	df 91       	pop	r29
     bcc:	08 95       	ret

00000bce <main>:

int main(void) {
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	62 97       	sbiw	r28, 0x12	; 18
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
     be2:	af e5       	ldi	r26, 0x5F	; 95
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	ef e5       	ldi	r30, 0x5F	; 95
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	80 68       	ori	r24, 0x80	; 128
     bee:	8c 93       	st	X, r24

	/* Create configuration structure for UART driver */
	UART_ConfigType UART_Config = {ASYNCHRONOUS,DISABLED,ONE_BIT,EIGHT_BIT};
     bf0:	1f 86       	std	Y+15, r1	; 0x0f
     bf2:	18 8a       	std	Y+16, r1	; 0x10
     bf4:	19 8a       	std	Y+17, r1	; 0x11
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	8a 8b       	std	Y+18, r24	; 0x12
	UART_init(&UART_Config); 	    /* initialize UART driver */
     bfa:	ce 01       	movw	r24, r28
     bfc:	0f 96       	adiw	r24, 0x0f	; 15
     bfe:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <UART_init>
	LCD_init(); 				    /* initialize LCD driver */
     c02:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <LCD_init>

	/* Display this string "DOOR LOCKER SECURITY SYSTEM" on LCD at the beginning */
	LCD_displayStringRowColumn(0,3,"DOOR LOCKER SECURITY SYSTEM");
     c06:	20 e6       	ldi	r18, 0x60	; 96
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	63 e0       	ldi	r22, 0x03	; 3
     c0e:	a9 01       	movw	r20, r18
     c10:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	/* Display this string "WELCOME" on LCD at the beginning */
	LCD_displayStringRowColumn(1,13,"WELCOME");
     c14:	2c e7       	ldi	r18, 0x7C	; 124
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	6d e0       	ldi	r22, 0x0D	; 13
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	aa e7       	ldi	r26, 0x7A	; 122
     c28:	b4 e4       	ldi	r27, 0x44	; 68
     c2a:	8b 87       	std	Y+11, r24	; 0x0b
     c2c:	9c 87       	std	Y+12, r25	; 0x0c
     c2e:	ad 87       	std	Y+13, r26	; 0x0d
     c30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	6b 85       	ldd	r22, Y+11	; 0x0b
     c34:	7c 85       	ldd	r23, Y+12	; 0x0c
     c36:	8d 85       	ldd	r24, Y+13	; 0x0d
     c38:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	4a ef       	ldi	r20, 0xFA	; 250
     c40:	54 e4       	ldi	r21, 0x44	; 68
     c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	8f 83       	std	Y+7, r24	; 0x07
     c4c:	98 87       	std	Y+8, r25	; 0x08
     c4e:	a9 87       	std	Y+9, r26	; 0x09
     c50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c52:	6f 81       	ldd	r22, Y+7	; 0x07
     c54:	78 85       	ldd	r23, Y+8	; 0x08
     c56:	89 85       	ldd	r24, Y+9	; 0x09
     c58:	9a 85       	ldd	r25, Y+10	; 0x0a
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	40 e8       	ldi	r20, 0x80	; 128
     c60:	5f e3       	ldi	r21, 0x3F	; 63
     c62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c66:	88 23       	and	r24, r24
     c68:	2c f4       	brge	.+10     	; 0xc74 <main+0xa6>
		__ticks = 1;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	9e 83       	std	Y+6, r25	; 0x06
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	3f c0       	rjmp	.+126    	; 0xcf2 <main+0x124>
	else if (__tmp > 65535)
     c74:	6f 81       	ldd	r22, Y+7	; 0x07
     c76:	78 85       	ldd	r23, Y+8	; 0x08
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	3f ef       	ldi	r19, 0xFF	; 255
     c80:	4f e7       	ldi	r20, 0x7F	; 127
     c82:	57 e4       	ldi	r21, 0x47	; 71
     c84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c88:	18 16       	cp	r1, r24
     c8a:	4c f5       	brge	.+82     	; 0xcde <main+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c90:	8d 85       	ldd	r24, Y+13	; 0x0d
     c92:	9e 85       	ldd	r25, Y+14	; 0x0e
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	40 e2       	ldi	r20, 0x20	; 32
     c9a:	51 e4       	ldi	r21, 0x41	; 65
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	bc 01       	movw	r22, r24
     ca6:	cd 01       	movw	r24, r26
     ca8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cac:	dc 01       	movw	r26, r24
     cae:	cb 01       	movw	r24, r22
     cb0:	9e 83       	std	Y+6, r25	; 0x06
     cb2:	8d 83       	std	Y+5, r24	; 0x05
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <main+0x106>
     cb6:	88 ec       	ldi	r24, 0xC8	; 200
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9c 83       	std	Y+4, r25	; 0x04
     cbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	9c 81       	ldd	r25, Y+4	; 0x04
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <main+0xf4>
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	9e 83       	std	Y+6, r25	; 0x06
     cd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cd4:	8d 81       	ldd	r24, Y+5	; 0x05
     cd6:	9e 81       	ldd	r25, Y+6	; 0x06
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	69 f7       	brne	.-38     	; 0xcb6 <main+0xe8>
     cdc:	14 c0       	rjmp	.+40     	; 0xd06 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9e 83       	std	Y+6, r25	; 0x06
     cf0:	8d 83       	std	Y+5, r24	; 0x05
     cf2:	8d 81       	ldd	r24, Y+5	; 0x05
     cf4:	9e 81       	ldd	r25, Y+6	; 0x06
     cf6:	9a 83       	std	Y+2, r25	; 0x02
     cf8:	89 83       	std	Y+1, r24	; 0x01
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x130>
     d02:	9a 83       	std	Y+2, r25	; 0x02
     d04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000); /* delay for processing 1s */

	Create_Store_Password();
     d06:	0e 94 88 06 	call	0xd10	; 0xd10 <Create_Store_Password>

	while(1)
	{
		Main_Options();
     d0a:	0e 94 c6 0c 	call	0x198c	; 0x198c <Main_Options>
     d0e:	fd cf       	rjmp	.-6      	; 0xd0a <main+0x13c>

00000d10 <Create_Store_Password>:
/*
 * Description : Function to Create and Store password in a global array.
 *
 */
void Create_Store_Password(void)
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	6c 97       	sbiw	r28, 0x1c	; 28
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
	New_Password();
     d24:	0e 94 8e 07 	call	0xf1c	; 0xf1c <New_Password>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	aa ef       	ldi	r26, 0xFA	; 250
     d2e:	b3 e4       	ldi	r27, 0x43	; 67
     d30:	89 8f       	std	Y+25, r24	; 0x19
     d32:	9a 8f       	std	Y+26, r25	; 0x1a
     d34:	ab 8f       	std	Y+27, r26	; 0x1b
     d36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	69 8d       	ldd	r22, Y+25	; 0x19
     d3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8d 8b       	std	Y+21, r24	; 0x15
     d52:	9e 8b       	std	Y+22, r25	; 0x16
     d54:	af 8b       	std	Y+23, r26	; 0x17
     d56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d58:	6d 89       	ldd	r22, Y+21	; 0x15
     d5a:	7e 89       	ldd	r23, Y+22	; 0x16
     d5c:	8f 89       	ldd	r24, Y+23	; 0x17
     d5e:	98 8d       	ldd	r25, Y+24	; 0x18
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <Create_Store_Password+0x6a>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9c 8b       	std	Y+20, r25	; 0x14
     d76:	8b 8b       	std	Y+19, r24	; 0x13
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <Create_Store_Password+0xe8>
	else if (__tmp > 65535)
     d7a:	6d 89       	ldd	r22, Y+21	; 0x15
     d7c:	7e 89       	ldd	r23, Y+22	; 0x16
     d7e:	8f 89       	ldd	r24, Y+23	; 0x17
     d80:	98 8d       	ldd	r25, Y+24	; 0x18
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <Create_Store_Password+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	69 8d       	ldd	r22, Y+25	; 0x19
     d94:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d96:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d98:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9c 8b       	std	Y+20, r25	; 0x14
     db8:	8b 8b       	std	Y+19, r24	; 0x13
     dba:	0f c0       	rjmp	.+30     	; 0xdda <Create_Store_Password+0xca>
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9a 8b       	std	Y+18, r25	; 0x12
     dc2:	89 8b       	std	Y+17, r24	; 0x11
     dc4:	89 89       	ldd	r24, Y+17	; 0x11
     dc6:	9a 89       	ldd	r25, Y+18	; 0x12
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <Create_Store_Password+0xb8>
     dcc:	9a 8b       	std	Y+18, r25	; 0x12
     dce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8b 89       	ldd	r24, Y+19	; 0x13
     dd2:	9c 89       	ldd	r25, Y+20	; 0x14
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9c 8b       	std	Y+20, r25	; 0x14
     dd8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8b 89       	ldd	r24, Y+19	; 0x13
     ddc:	9c 89       	ldd	r25, Y+20	; 0x14
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <Create_Store_Password+0xac>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <Create_Store_Password+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9c 8b       	std	Y+20, r25	; 0x14
     df6:	8b 8b       	std	Y+19, r24	; 0x13
     df8:	8b 89       	ldd	r24, Y+19	; 0x13
     dfa:	9c 89       	ldd	r25, Y+20	; 0x14
     dfc:	98 8b       	std	Y+16, r25	; 0x10
     dfe:	8f 87       	std	Y+15, r24	; 0x0f
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	98 89       	ldd	r25, Y+16	; 0x10
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <Create_Store_Password+0xf4>
     e08:	98 8b       	std	Y+16, r25	; 0x10
     e0a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	ReEnter_Password();
     e0c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <ReEnter_Password>
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	aa ef       	ldi	r26, 0xFA	; 250
     e16:	b3 e4       	ldi	r27, 0x43	; 67
     e18:	8b 87       	std	Y+11, r24	; 0x0b
     e1a:	9c 87       	std	Y+12, r25	; 0x0c
     e1c:	ad 87       	std	Y+13, r26	; 0x0d
     e1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	4a ef       	ldi	r20, 0xFA	; 250
     e2e:	54 e4       	ldi	r21, 0x44	; 68
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	8f 83       	std	Y+7, r24	; 0x07
     e3a:	98 87       	std	Y+8, r25	; 0x08
     e3c:	a9 87       	std	Y+9, r26	; 0x09
     e3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	9a 85       	ldd	r25, Y+10	; 0x0a
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e8       	ldi	r20, 0x80	; 128
     e4e:	5f e3       	ldi	r21, 0x3F	; 63
     e50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e54:	88 23       	and	r24, r24
     e56:	2c f4       	brge	.+10     	; 0xe62 <Create_Store_Password+0x152>
		__ticks = 1;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	9e 83       	std	Y+6, r25	; 0x06
     e5e:	8d 83       	std	Y+5, r24	; 0x05
     e60:	3f c0       	rjmp	.+126    	; 0xee0 <Create_Store_Password+0x1d0>
	else if (__tmp > 65535)
     e62:	6f 81       	ldd	r22, Y+7	; 0x07
     e64:	78 85       	ldd	r23, Y+8	; 0x08
     e66:	89 85       	ldd	r24, Y+9	; 0x09
     e68:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	3f ef       	ldi	r19, 0xFF	; 255
     e6e:	4f e7       	ldi	r20, 0x7F	; 127
     e70:	57 e4       	ldi	r21, 0x47	; 71
     e72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e76:	18 16       	cp	r1, r24
     e78:	4c f5       	brge	.+82     	; 0xecc <Create_Store_Password+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e7a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e80:	9e 85       	ldd	r25, Y+14	; 0x0e
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	51 e4       	ldi	r21, 0x41	; 65
     e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9e 83       	std	Y+6, r25	; 0x06
     ea0:	8d 83       	std	Y+5, r24	; 0x05
     ea2:	0f c0       	rjmp	.+30     	; 0xec2 <Create_Store_Password+0x1b2>
     ea4:	88 ec       	ldi	r24, 0xC8	; 200
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	9c 83       	std	Y+4, r25	; 0x04
     eaa:	8b 83       	std	Y+3, r24	; 0x03
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	01 97       	sbiw	r24, 0x01	; 1
     eb2:	f1 f7       	brne	.-4      	; 0xeb0 <Create_Store_Password+0x1a0>
     eb4:	9c 83       	std	Y+4, r25	; 0x04
     eb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eb8:	8d 81       	ldd	r24, Y+5	; 0x05
     eba:	9e 81       	ldd	r25, Y+6	; 0x06
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	9e 83       	std	Y+6, r25	; 0x06
     ec0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	69 f7       	brne	.-38     	; 0xea4 <Create_Store_Password+0x194>
     eca:	14 c0       	rjmp	.+40     	; 0xef4 <Create_Store_Password+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	78 85       	ldd	r23, Y+8	; 0x08
     ed0:	89 85       	ldd	r24, Y+9	; 0x09
     ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	9a 81       	ldd	r25, Y+2	; 0x02
     eec:	01 97       	sbiw	r24, 0x01	; 1
     eee:	f1 f7       	brne	.-4      	; 0xeec <Create_Store_Password+0x1dc>
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	Check_ReEnter_Password(g_ReEnter_password);
     ef4:	82 e9       	ldi	r24, 0x92	; 146
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 c6 0a 	call	0x158c	; 0x158c <Check_ReEnter_Password>
	sendCommand(EEPROM);
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	0e 94 80 11 	call	0x2300	; 0x2300 <sendCommand>
	Send_Password(g_New_password);
     f02:	85 e8       	ldi	r24, 0x85	; 133
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	0e 94 a5 0c 	call	0x194a	; 0x194a <Send_Password>
}
     f0a:	6c 96       	adiw	r28, 0x1c	; 28
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	cf 91       	pop	r28
     f18:	df 91       	pop	r29
     f1a:	08 95       	ret

00000f1c <New_Password>:
 * Description : Function to Fill in the new password from the user using the keypad interfacing
 *               and store it in a global array.
 *
 */
void New_Password(void)
{
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	2f 97       	sbiw	r28, 0x0f	; 15
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
     f30:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
     f32:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
	/* Display this string "PLEASE ENTER NEW PASSWORD(5)" on LCD */
	LCD_displayStringRowColumn(0,0,"PLEASE ENTER NEW PASSWORD(5)");
     f36:	24 e8       	ldi	r18, 0x84	; 132
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	a9 01       	movw	r20, r18
     f40:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,14);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	6e e0       	ldi	r22, 0x0E	; 14
     f48:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
	g_key = KEYPAD_getPressedKey();
     f4c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
     f50:	80 93 91 01 	sts	0x0191, r24
     f54:	a0 c0       	rjmp	.+320    	; 0x1096 <New_Password+0x17a>
	while(g_key != '=')
	{
		g_key = KEYPAD_getPressedKey();
     f56:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
     f5a:	80 93 91 01 	sts	0x0191, r24
		if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )
     f5e:	80 91 91 01 	lds	r24, 0x0191
     f62:	8b 32       	cpi	r24, 0x2B	; 43
     f64:	81 f0       	breq	.+32     	; 0xf86 <New_Password+0x6a>
     f66:	80 91 91 01 	lds	r24, 0x0191
     f6a:	8d 32       	cpi	r24, 0x2D	; 45
     f6c:	61 f0       	breq	.+24     	; 0xf86 <New_Password+0x6a>
     f6e:	80 91 91 01 	lds	r24, 0x0191
     f72:	8a 32       	cpi	r24, 0x2A	; 42
     f74:	41 f0       	breq	.+16     	; 0xf86 <New_Password+0x6a>
     f76:	80 91 91 01 	lds	r24, 0x0191
     f7a:	85 32       	cpi	r24, 0x25	; 37
     f7c:	21 f0       	breq	.+8      	; 0xf86 <New_Password+0x6a>
     f7e:	80 91 91 01 	lds	r24, 0x0191
     f82:	8d 33       	cpi	r24, 0x3D	; 61
     f84:	21 f4       	brne	.+8      	; 0xf8e <New_Password+0x72>
     f86:	80 91 91 01 	lds	r24, 0x0191
     f8a:	8a 30       	cpi	r24, 0x0A	; 10
     f8c:	90 f4       	brcc	.+36     	; 0xfb2 <New_Password+0x96>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
     f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f90:	85 30       	cpi	r24, 0x05	; 5
     f92:	78 f4       	brcc	.+30     	; 0xfb2 <New_Password+0x96>
			{
				g_New_password[counter] = g_key;
     f94:	8f 85       	ldd	r24, Y+15	; 0x0f
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	20 91 91 01 	lds	r18, 0x0191
     f9e:	fc 01       	movw	r30, r24
     fa0:	eb 57       	subi	r30, 0x7B	; 123
     fa2:	fe 4f       	sbci	r31, 0xFE	; 254
     fa4:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
     fa6:	8a e2       	ldi	r24, 0x2A	; 42
     fa8:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_displayCharacter>
				counter++;
     fac:	8f 85       	ldd	r24, Y+15	; 0x0f
     fae:	8f 5f       	subi	r24, 0xFF	; 255
     fb0:	8f 87       	std	Y+15, r24	; 0x0f
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	aa ef       	ldi	r26, 0xFA	; 250
     fb8:	b3 e4       	ldi	r27, 0x43	; 67
     fba:	8b 87       	std	Y+11, r24	; 0x0b
     fbc:	9c 87       	std	Y+12, r25	; 0x0c
     fbe:	ad 87       	std	Y+13, r26	; 0x0d
     fc0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	4a ef       	ldi	r20, 0xFA	; 250
     fd0:	54 e4       	ldi	r21, 0x44	; 68
     fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	8f 83       	std	Y+7, r24	; 0x07
     fdc:	98 87       	std	Y+8, r25	; 0x08
     fde:	a9 87       	std	Y+9, r26	; 0x09
     fe0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e8       	ldi	r20, 0x80	; 128
     ff0:	5f e3       	ldi	r21, 0x3F	; 63
     ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ff6:	88 23       	and	r24, r24
     ff8:	2c f4       	brge	.+10     	; 0x1004 <New_Password+0xe8>
		__ticks = 1;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	9e 83       	std	Y+6, r25	; 0x06
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	3f c0       	rjmp	.+126    	; 0x1082 <New_Password+0x166>
	else if (__tmp > 65535)
    1004:	6f 81       	ldd	r22, Y+7	; 0x07
    1006:	78 85       	ldd	r23, Y+8	; 0x08
    1008:	89 85       	ldd	r24, Y+9	; 0x09
    100a:	9a 85       	ldd	r25, Y+10	; 0x0a
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	3f ef       	ldi	r19, 0xFF	; 255
    1010:	4f e7       	ldi	r20, 0x7F	; 127
    1012:	57 e4       	ldi	r21, 0x47	; 71
    1014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1018:	18 16       	cp	r1, r24
    101a:	4c f5       	brge	.+82     	; 0x106e <New_Password+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    101c:	6b 85       	ldd	r22, Y+11	; 0x0b
    101e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1020:	8d 85       	ldd	r24, Y+13	; 0x0d
    1022:	9e 85       	ldd	r25, Y+14	; 0x0e
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e2       	ldi	r20, 0x20	; 32
    102a:	51 e4       	ldi	r21, 0x41	; 65
    102c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	bc 01       	movw	r22, r24
    1036:	cd 01       	movw	r24, r26
    1038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	9e 83       	std	Y+6, r25	; 0x06
    1042:	8d 83       	std	Y+5, r24	; 0x05
    1044:	0f c0       	rjmp	.+30     	; 0x1064 <New_Password+0x148>
    1046:	88 ec       	ldi	r24, 0xC8	; 200
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	f1 f7       	brne	.-4      	; 0x1052 <New_Password+0x136>
    1056:	9c 83       	std	Y+4, r25	; 0x04
    1058:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105a:	8d 81       	ldd	r24, Y+5	; 0x05
    105c:	9e 81       	ldd	r25, Y+6	; 0x06
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9e 83       	std	Y+6, r25	; 0x06
    1062:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	69 f7       	brne	.-38     	; 0x1046 <New_Password+0x12a>
    106c:	14 c0       	rjmp	.+40     	; 0x1096 <New_Password+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106e:	6f 81       	ldd	r22, Y+7	; 0x07
    1070:	78 85       	ldd	r23, Y+8	; 0x08
    1072:	89 85       	ldd	r24, Y+9	; 0x09
    1074:	9a 85       	ldd	r25, Y+10	; 0x0a
    1076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	9e 83       	std	Y+6, r25	; 0x06
    1080:	8d 83       	std	Y+5, r24	; 0x05
    1082:	8d 81       	ldd	r24, Y+5	; 0x05
    1084:	9e 81       	ldd	r25, Y+6	; 0x06
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	01 97       	sbiw	r24, 0x01	; 1
    1090:	f1 f7       	brne	.-4      	; 0x108e <New_Password+0x172>
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
	/* Display this string "PLEASE ENTER NEW PASSWORD(5)" on LCD */
	LCD_displayStringRowColumn(0,0,"PLEASE ENTER NEW PASSWORD(5)");
	LCD_moveCursor(1,14);
	g_key = KEYPAD_getPressedKey();
	while(g_key != '=')
    1096:	80 91 91 01 	lds	r24, 0x0191
    109a:	8d 33       	cpi	r24, 0x3D	; 61
    109c:	09 f0       	breq	.+2      	; 0x10a0 <New_Password+0x184>
    109e:	5b cf       	rjmp	.-330    	; 0xf56 <New_Password+0x3a>
				counter++;
			}
		}
		_delay_ms(500);
	}
}
    10a0:	2f 96       	adiw	r28, 0x0f	; 15
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <ReEnter_Password>:
 * Description : Function to Fill in the ReEnter password from the user using the keypad interfacing
 *               and store it in a global array.
 *
 */
void ReEnter_Password(void)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	6d 97       	sbiw	r28, 0x1d	; 29
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
    10c6:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
    10c8:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
	/* Display this string "PLEASE RE-ENTER NEW PASSWORD(5)" on LCD */
	LCD_displayStringRowColumn(0,0,"PLEASE RE-ENTER NEW PASSWORD(5)");
    10cc:	21 ea       	ldi	r18, 0xA1	; 161
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	a9 01       	movw	r20, r18
    10d6:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,14);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	6e e0       	ldi	r22, 0x0E	; 14
    10de:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
	g_key = KEYPAD_getPressedKey();
    10e2:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
    10e6:	80 93 91 01 	sts	0x0191, r24
    10ea:	a0 c0       	rjmp	.+320    	; 0x122c <ReEnter_Password+0x17a>
	while(g_key != '=')
	{
		g_key = KEYPAD_getPressedKey();
    10ec:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
    10f0:	80 93 91 01 	sts	0x0191, r24
		if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )
    10f4:	80 91 91 01 	lds	r24, 0x0191
    10f8:	8b 32       	cpi	r24, 0x2B	; 43
    10fa:	81 f0       	breq	.+32     	; 0x111c <ReEnter_Password+0x6a>
    10fc:	80 91 91 01 	lds	r24, 0x0191
    1100:	8d 32       	cpi	r24, 0x2D	; 45
    1102:	61 f0       	breq	.+24     	; 0x111c <ReEnter_Password+0x6a>
    1104:	80 91 91 01 	lds	r24, 0x0191
    1108:	8a 32       	cpi	r24, 0x2A	; 42
    110a:	41 f0       	breq	.+16     	; 0x111c <ReEnter_Password+0x6a>
    110c:	80 91 91 01 	lds	r24, 0x0191
    1110:	85 32       	cpi	r24, 0x25	; 37
    1112:	21 f0       	breq	.+8      	; 0x111c <ReEnter_Password+0x6a>
    1114:	80 91 91 01 	lds	r24, 0x0191
    1118:	8d 33       	cpi	r24, 0x3D	; 61
    111a:	21 f4       	brne	.+8      	; 0x1124 <ReEnter_Password+0x72>
    111c:	80 91 91 01 	lds	r24, 0x0191
    1120:	8a 30       	cpi	r24, 0x0A	; 10
    1122:	90 f4       	brcc	.+36     	; 0x1148 <ReEnter_Password+0x96>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
    1124:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1126:	85 30       	cpi	r24, 0x05	; 5
    1128:	78 f4       	brcc	.+30     	; 0x1148 <ReEnter_Password+0x96>
			{
				g_ReEnter_password[counter] = g_key;
    112a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	20 91 91 01 	lds	r18, 0x0191
    1134:	fc 01       	movw	r30, r24
    1136:	ee 56       	subi	r30, 0x6E	; 110
    1138:	fe 4f       	sbci	r31, 0xFE	; 254
    113a:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    113c:	8a e2       	ldi	r24, 0x2A	; 42
    113e:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_displayCharacter>
				counter++;
    1142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1144:	8f 5f       	subi	r24, 0xFF	; 255
    1146:	8d 8f       	std	Y+29, r24	; 0x1d
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	aa ef       	ldi	r26, 0xFA	; 250
    114e:	b3 e4       	ldi	r27, 0x43	; 67
    1150:	89 8f       	std	Y+25, r24	; 0x19
    1152:	9a 8f       	std	Y+26, r25	; 0x1a
    1154:	ab 8f       	std	Y+27, r26	; 0x1b
    1156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	69 8d       	ldd	r22, Y+25	; 0x19
    115a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a ef       	ldi	r20, 0xFA	; 250
    1166:	54 e4       	ldi	r21, 0x44	; 68
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8d 8b       	std	Y+21, r24	; 0x15
    1172:	9e 8b       	std	Y+22, r25	; 0x16
    1174:	af 8b       	std	Y+23, r26	; 0x17
    1176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <ReEnter_Password+0xe8>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <ReEnter_Password+0x166>
	else if (__tmp > 65535)
    119a:	6d 89       	ldd	r22, Y+21	; 0x15
    119c:	7e 89       	ldd	r23, Y+22	; 0x16
    119e:	8f 89       	ldd	r24, Y+23	; 0x17
    11a0:	98 8d       	ldd	r25, Y+24	; 0x18
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <ReEnter_Password+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	69 8d       	ldd	r22, Y+25	; 0x19
    11b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <ReEnter_Password+0x148>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
    11e4:	89 89       	ldd	r24, Y+17	; 0x11
    11e6:	9a 89       	ldd	r25, Y+18	; 0x12
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <ReEnter_Password+0x136>
    11ec:	9a 8b       	std	Y+18, r25	; 0x12
    11ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8b 89       	ldd	r24, Y+19	; 0x13
    11fc:	9c 89       	ldd	r25, Y+20	; 0x14
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <ReEnter_Password+0x12a>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <ReEnter_Password+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	98 89       	ldd	r25, Y+16	; 0x10
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <ReEnter_Password+0x172>
    1228:	98 8b       	std	Y+16, r25	; 0x10
    122a:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	/* Display this string "PLEASE RE-ENTER NEW PASSWORD(5)" on LCD */
	LCD_displayStringRowColumn(0,0,"PLEASE RE-ENTER NEW PASSWORD(5)");
	LCD_moveCursor(1,14);
	g_key = KEYPAD_getPressedKey();
	while(g_key != '=')
    122c:	80 91 91 01 	lds	r24, 0x0191
    1230:	8d 33       	cpi	r24, 0x3D	; 61
    1232:	09 f0       	breq	.+2      	; 0x1236 <ReEnter_Password+0x184>
    1234:	5b cf       	rjmp	.-330    	; 0x10ec <ReEnter_Password+0x3a>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	aa ef       	ldi	r26, 0xFA	; 250
    123c:	b3 e4       	ldi	r27, 0x43	; 67
    123e:	8b 87       	std	Y+11, r24	; 0x0b
    1240:	9c 87       	std	Y+12, r25	; 0x0c
    1242:	ad 87       	std	Y+13, r26	; 0x0d
    1244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1246:	6b 85       	ldd	r22, Y+11	; 0x0b
    1248:	7c 85       	ldd	r23, Y+12	; 0x0c
    124a:	8d 85       	ldd	r24, Y+13	; 0x0d
    124c:	9e 85       	ldd	r25, Y+14	; 0x0e
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	4a ef       	ldi	r20, 0xFA	; 250
    1254:	54 e4       	ldi	r21, 0x44	; 68
    1256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	8f 83       	std	Y+7, r24	; 0x07
    1260:	98 87       	std	Y+8, r25	; 0x08
    1262:	a9 87       	std	Y+9, r26	; 0x09
    1264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1266:	6f 81       	ldd	r22, Y+7	; 0x07
    1268:	78 85       	ldd	r23, Y+8	; 0x08
    126a:	89 85       	ldd	r24, Y+9	; 0x09
    126c:	9a 85       	ldd	r25, Y+10	; 0x0a
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e8       	ldi	r20, 0x80	; 128
    1274:	5f e3       	ldi	r21, 0x3F	; 63
    1276:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    127a:	88 23       	and	r24, r24
    127c:	2c f4       	brge	.+10     	; 0x1288 <ReEnter_Password+0x1d6>
		__ticks = 1;
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	3f c0       	rjmp	.+126    	; 0x1306 <ReEnter_Password+0x254>
	else if (__tmp > 65535)
    1288:	6f 81       	ldd	r22, Y+7	; 0x07
    128a:	78 85       	ldd	r23, Y+8	; 0x08
    128c:	89 85       	ldd	r24, Y+9	; 0x09
    128e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	3f ef       	ldi	r19, 0xFF	; 255
    1294:	4f e7       	ldi	r20, 0x7F	; 127
    1296:	57 e4       	ldi	r21, 0x47	; 71
    1298:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	4c f5       	brge	.+82     	; 0x12f2 <ReEnter_Password+0x240>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e2       	ldi	r20, 0x20	; 32
    12ae:	51 e4       	ldi	r21, 0x41	; 65
    12b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b4:	dc 01       	movw	r26, r24
    12b6:	cb 01       	movw	r24, r22
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <ReEnter_Password+0x236>
    12ca:	88 ec       	ldi	r24, 0xC8	; 200
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <ReEnter_Password+0x224>
    12da:	9c 83       	std	Y+4, r25	; 0x04
    12dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12de:	8d 81       	ldd	r24, Y+5	; 0x05
    12e0:	9e 81       	ldd	r25, Y+6	; 0x06
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ea:	9e 81       	ldd	r25, Y+6	; 0x06
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	69 f7       	brne	.-38     	; 0x12ca <ReEnter_Password+0x218>
    12f0:	14 c0       	rjmp	.+40     	; 0x131a <ReEnter_Password+0x268>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f2:	6f 81       	ldd	r22, Y+7	; 0x07
    12f4:	78 85       	ldd	r23, Y+8	; 0x08
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	9e 83       	std	Y+6, r25	; 0x06
    1304:	8d 83       	std	Y+5, r24	; 0x05
    1306:	8d 81       	ldd	r24, Y+5	; 0x05
    1308:	9e 81       	ldd	r25, Y+6	; 0x06
    130a:	9a 83       	std	Y+2, r25	; 0x02
    130c:	89 83       	std	Y+1, r24	; 0x01
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	f1 f7       	brne	.-4      	; 0x1312 <ReEnter_Password+0x260>
    1316:	9a 83       	std	Y+2, r25	; 0x02
    1318:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(500);
	}
	_delay_ms(500);
}
    131a:	6d 96       	adiw	r28, 0x1d	; 29
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <Fill_Old_Password>:
 * Description : Function to Fill in the old password from the user using the keypad interfacing
 *               and store it in a global array.
 *
 */
void Fill_Old_Password(void)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	6d 97       	sbiw	r28, 0x1d	; 29
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
	uint8 counter = 0;
    1340:	1d 8e       	std	Y+29, r1	; 0x1d
	g_key = KEYPAD_getPressedKey();
    1342:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
    1346:	80 93 91 01 	sts	0x0191, r24
    134a:	a0 c0       	rjmp	.+320    	; 0x148c <Fill_Old_Password+0x160>
	while(g_key != '=')
	{
		g_key = KEYPAD_getPressedKey();
    134c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
    1350:	80 93 91 01 	sts	0x0191, r24
		if( ( g_key != '+' && g_key != '-' && g_key != '*' && g_key != '%' && g_key != '=') || (g_key>= 0 && g_key<= 9) )
    1354:	80 91 91 01 	lds	r24, 0x0191
    1358:	8b 32       	cpi	r24, 0x2B	; 43
    135a:	81 f0       	breq	.+32     	; 0x137c <Fill_Old_Password+0x50>
    135c:	80 91 91 01 	lds	r24, 0x0191
    1360:	8d 32       	cpi	r24, 0x2D	; 45
    1362:	61 f0       	breq	.+24     	; 0x137c <Fill_Old_Password+0x50>
    1364:	80 91 91 01 	lds	r24, 0x0191
    1368:	8a 32       	cpi	r24, 0x2A	; 42
    136a:	41 f0       	breq	.+16     	; 0x137c <Fill_Old_Password+0x50>
    136c:	80 91 91 01 	lds	r24, 0x0191
    1370:	85 32       	cpi	r24, 0x25	; 37
    1372:	21 f0       	breq	.+8      	; 0x137c <Fill_Old_Password+0x50>
    1374:	80 91 91 01 	lds	r24, 0x0191
    1378:	8d 33       	cpi	r24, 0x3D	; 61
    137a:	21 f4       	brne	.+8      	; 0x1384 <Fill_Old_Password+0x58>
    137c:	80 91 91 01 	lds	r24, 0x0191
    1380:	8a 30       	cpi	r24, 0x0A	; 10
    1382:	90 f4       	brcc	.+36     	; 0x13a8 <Fill_Old_Password+0x7c>
		{
			if(counter < PASSWORD_ARRAY_SIZE)
    1384:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1386:	85 30       	cpi	r24, 0x05	; 5
    1388:	78 f4       	brcc	.+30     	; 0x13a8 <Fill_Old_Password+0x7c>
			{
				check_password[counter] = g_key;
    138a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	20 91 91 01 	lds	r18, 0x0191
    1394:	fc 01       	movw	r30, r24
    1396:	e5 57       	subi	r30, 0x75	; 117
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	20 83       	st	Z, r18
				LCD_displayCharacter('*');
    139c:	8a e2       	ldi	r24, 0x2A	; 42
    139e:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_displayCharacter>
				counter++;
    13a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	8d 8f       	std	Y+29, r24	; 0x1d
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	aa ef       	ldi	r26, 0xFA	; 250
    13ae:	b3 e4       	ldi	r27, 0x43	; 67
    13b0:	89 8f       	std	Y+25, r24	; 0x19
    13b2:	9a 8f       	std	Y+26, r25	; 0x1a
    13b4:	ab 8f       	std	Y+27, r26	; 0x1b
    13b6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	69 8d       	ldd	r22, Y+25	; 0x19
    13ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a ef       	ldi	r20, 0xFA	; 250
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8d 8b       	std	Y+21, r24	; 0x15
    13d2:	9e 8b       	std	Y+22, r25	; 0x16
    13d4:	af 8b       	std	Y+23, r26	; 0x17
    13d6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d8:	6d 89       	ldd	r22, Y+21	; 0x15
    13da:	7e 89       	ldd	r23, Y+22	; 0x16
    13dc:	8f 89       	ldd	r24, Y+23	; 0x17
    13de:	98 8d       	ldd	r25, Y+24	; 0x18
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <Fill_Old_Password+0xce>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 8b       	std	Y+20, r25	; 0x14
    13f6:	8b 8b       	std	Y+19, r24	; 0x13
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <Fill_Old_Password+0x14c>
	else if (__tmp > 65535)
    13fa:	6d 89       	ldd	r22, Y+21	; 0x15
    13fc:	7e 89       	ldd	r23, Y+22	; 0x16
    13fe:	8f 89       	ldd	r24, Y+23	; 0x17
    1400:	98 8d       	ldd	r25, Y+24	; 0x18
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <Fill_Old_Password+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	69 8d       	ldd	r22, Y+25	; 0x19
    1414:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1416:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1418:	9c 8d       	ldd	r25, Y+28	; 0x1c
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9c 8b       	std	Y+20, r25	; 0x14
    1438:	8b 8b       	std	Y+19, r24	; 0x13
    143a:	0f c0       	rjmp	.+30     	; 0x145a <Fill_Old_Password+0x12e>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9a 8b       	std	Y+18, r25	; 0x12
    1442:	89 8b       	std	Y+17, r24	; 0x11
    1444:	89 89       	ldd	r24, Y+17	; 0x11
    1446:	9a 89       	ldd	r25, Y+18	; 0x12
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <Fill_Old_Password+0x11c>
    144c:	9a 8b       	std	Y+18, r25	; 0x12
    144e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8b 89       	ldd	r24, Y+19	; 0x13
    1452:	9c 89       	ldd	r25, Y+20	; 0x14
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9c 8b       	std	Y+20, r25	; 0x14
    1458:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8b 89       	ldd	r24, Y+19	; 0x13
    145c:	9c 89       	ldd	r25, Y+20	; 0x14
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <Fill_Old_Password+0x110>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <Fill_Old_Password+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6d 89       	ldd	r22, Y+21	; 0x15
    1466:	7e 89       	ldd	r23, Y+22	; 0x16
    1468:	8f 89       	ldd	r24, Y+23	; 0x17
    146a:	98 8d       	ldd	r25, Y+24	; 0x18
    146c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9c 8b       	std	Y+20, r25	; 0x14
    1476:	8b 8b       	std	Y+19, r24	; 0x13
    1478:	8b 89       	ldd	r24, Y+19	; 0x13
    147a:	9c 89       	ldd	r25, Y+20	; 0x14
    147c:	98 8b       	std	Y+16, r25	; 0x10
    147e:	8f 87       	std	Y+15, r24	; 0x0f
    1480:	8f 85       	ldd	r24, Y+15	; 0x0f
    1482:	98 89       	ldd	r25, Y+16	; 0x10
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <Fill_Old_Password+0x158>
    1488:	98 8b       	std	Y+16, r25	; 0x10
    148a:	8f 87       	std	Y+15, r24	; 0x0f
 */
void Fill_Old_Password(void)
{
	uint8 counter = 0;
	g_key = KEYPAD_getPressedKey();
	while(g_key != '=')
    148c:	80 91 91 01 	lds	r24, 0x0191
    1490:	8d 33       	cpi	r24, 0x3D	; 61
    1492:	09 f0       	breq	.+2      	; 0x1496 <Fill_Old_Password+0x16a>
    1494:	5b cf       	rjmp	.-330    	; 0x134c <Fill_Old_Password+0x20>
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	aa ef       	ldi	r26, 0xFA	; 250
    149c:	b3 e4       	ldi	r27, 0x43	; 67
    149e:	8b 87       	std	Y+11, r24	; 0x0b
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	ad 87       	std	Y+13, r26	; 0x0d
    14a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	4a ef       	ldi	r20, 0xFA	; 250
    14b4:	54 e4       	ldi	r21, 0x44	; 68
    14b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	8f 83       	std	Y+7, r24	; 0x07
    14c0:	98 87       	std	Y+8, r25	; 0x08
    14c2:	a9 87       	std	Y+9, r26	; 0x09
    14c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c6:	6f 81       	ldd	r22, Y+7	; 0x07
    14c8:	78 85       	ldd	r23, Y+8	; 0x08
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e8       	ldi	r20, 0x80	; 128
    14d4:	5f e3       	ldi	r21, 0x3F	; 63
    14d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14da:	88 23       	and	r24, r24
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <Fill_Old_Password+0x1bc>
		__ticks = 1;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	9e 83       	std	Y+6, r25	; 0x06
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	3f c0       	rjmp	.+126    	; 0x1566 <Fill_Old_Password+0x23a>
	else if (__tmp > 65535)
    14e8:	6f 81       	ldd	r22, Y+7	; 0x07
    14ea:	78 85       	ldd	r23, Y+8	; 0x08
    14ec:	89 85       	ldd	r24, Y+9	; 0x09
    14ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f0:	20 e0       	ldi	r18, 0x00	; 0
    14f2:	3f ef       	ldi	r19, 0xFF	; 255
    14f4:	4f e7       	ldi	r20, 0x7F	; 127
    14f6:	57 e4       	ldi	r21, 0x47	; 71
    14f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14fc:	18 16       	cp	r1, r24
    14fe:	4c f5       	brge	.+82     	; 0x1552 <Fill_Old_Password+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1500:	6b 85       	ldd	r22, Y+11	; 0x0b
    1502:	7c 85       	ldd	r23, Y+12	; 0x0c
    1504:	8d 85       	ldd	r24, Y+13	; 0x0d
    1506:	9e 85       	ldd	r25, Y+14	; 0x0e
    1508:	20 e0       	ldi	r18, 0x00	; 0
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	40 e2       	ldi	r20, 0x20	; 32
    150e:	51 e4       	ldi	r21, 0x41	; 65
    1510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1514:	dc 01       	movw	r26, r24
    1516:	cb 01       	movw	r24, r22
    1518:	bc 01       	movw	r22, r24
    151a:	cd 01       	movw	r24, r26
    151c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	9e 83       	std	Y+6, r25	; 0x06
    1526:	8d 83       	std	Y+5, r24	; 0x05
    1528:	0f c0       	rjmp	.+30     	; 0x1548 <Fill_Old_Password+0x21c>
    152a:	88 ec       	ldi	r24, 0xC8	; 200
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	01 97       	sbiw	r24, 0x01	; 1
    1538:	f1 f7       	brne	.-4      	; 0x1536 <Fill_Old_Password+0x20a>
    153a:	9c 83       	std	Y+4, r25	; 0x04
    153c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153e:	8d 81       	ldd	r24, Y+5	; 0x05
    1540:	9e 81       	ldd	r25, Y+6	; 0x06
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	9e 83       	std	Y+6, r25	; 0x06
    1546:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	69 f7       	brne	.-38     	; 0x152a <Fill_Old_Password+0x1fe>
    1550:	14 c0       	rjmp	.+40     	; 0x157a <Fill_Old_Password+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1552:	6f 81       	ldd	r22, Y+7	; 0x07
    1554:	78 85       	ldd	r23, Y+8	; 0x08
    1556:	89 85       	ldd	r24, Y+9	; 0x09
    1558:	9a 85       	ldd	r25, Y+10	; 0x0a
    155a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	9e 83       	std	Y+6, r25	; 0x06
    1564:	8d 83       	std	Y+5, r24	; 0x05
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	9a 81       	ldd	r25, Y+2	; 0x02
    1572:	01 97       	sbiw	r24, 0x01	; 1
    1574:	f1 f7       	brne	.-4      	; 0x1572 <Fill_Old_Password+0x246>
    1576:	9a 83       	std	Y+2, r25	; 0x02
    1578:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		_delay_ms(500);
	}
	_delay_ms(500);
}
    157a:	6d 96       	adiw	r28, 0x1d	; 29
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	cf 91       	pop	r28
    1588:	df 91       	pop	r29
    158a:	08 95       	ret

0000158c <Check_ReEnter_Password>:
/*
 * Description : Function to Check the ReEnter Password and compare the array with the New Password.
 *
 */
void Check_ReEnter_Password(uint8 a_arr[])
{
    158c:	df 93       	push	r29
    158e:	cf 93       	push	r28
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	6f 97       	sbiw	r28, 0x1f	; 31
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	9f 8f       	std	Y+31, r25	; 0x1f
    15a2:	8e 8f       	std	Y+30, r24	; 0x1e
	uint8 i;
	for(i = 0; i < PASSWORD_ARRAY_SIZE; i++)
    15a4:	1d 8e       	std	Y+29, r1	; 0x1d
    15a6:	0f c1       	rjmp	.+542    	; 0x17c6 <Check_ReEnter_Password+0x23a>
	{
		if(a_arr[i] != g_New_password[i])
    15a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    15b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    15b2:	fc 01       	movw	r30, r24
    15b4:	e2 0f       	add	r30, r18
    15b6:	f3 1f       	adc	r31, r19
    15b8:	20 81       	ld	r18, Z
    15ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	fc 01       	movw	r30, r24
    15c2:	eb 57       	subi	r30, 0x7B	; 123
    15c4:	fe 4f       	sbci	r31, 0xFE	; 254
    15c6:	80 81       	ld	r24, Z
    15c8:	28 17       	cp	r18, r24
    15ca:	09 f4       	brne	.+2      	; 0x15ce <Check_ReEnter_Password+0x42>
    15cc:	f9 c0       	rjmp	.+498    	; 0x17c0 <Check_ReEnter_Password+0x234>
		{
			LCD_clearScreen();
    15ce:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
			/* Display this string "WRONG PASSWORD!" on LCD */
			LCD_displayStringRowColumn(0,10,"WRONG PASSWORD!");
    15d2:	21 ec       	ldi	r18, 0xC1	; 193
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	6a e0       	ldi	r22, 0x0A	; 10
    15da:	a9 01       	movw	r20, r18
    15dc:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e8       	ldi	r25, 0x80	; 128
    15e4:	ab e3       	ldi	r26, 0x3B	; 59
    15e6:	b5 e4       	ldi	r27, 0x45	; 69
    15e8:	89 8f       	std	Y+25, r24	; 0x19
    15ea:	9a 8f       	std	Y+26, r25	; 0x1a
    15ec:	ab 8f       	std	Y+27, r26	; 0x1b
    15ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f0:	69 8d       	ldd	r22, Y+25	; 0x19
    15f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	4a ef       	ldi	r20, 0xFA	; 250
    15fe:	54 e4       	ldi	r21, 0x44	; 68
    1600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	8d 8b       	std	Y+21, r24	; 0x15
    160a:	9e 8b       	std	Y+22, r25	; 0x16
    160c:	af 8b       	std	Y+23, r26	; 0x17
    160e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1610:	6d 89       	ldd	r22, Y+21	; 0x15
    1612:	7e 89       	ldd	r23, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e8       	ldi	r20, 0x80	; 128
    161e:	5f e3       	ldi	r21, 0x3F	; 63
    1620:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1624:	88 23       	and	r24, r24
    1626:	2c f4       	brge	.+10     	; 0x1632 <Check_ReEnter_Password+0xa6>
		__ticks = 1;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
    1630:	3f c0       	rjmp	.+126    	; 0x16b0 <Check_ReEnter_Password+0x124>
	else if (__tmp > 65535)
    1632:	6d 89       	ldd	r22, Y+21	; 0x15
    1634:	7e 89       	ldd	r23, Y+22	; 0x16
    1636:	8f 89       	ldd	r24, Y+23	; 0x17
    1638:	98 8d       	ldd	r25, Y+24	; 0x18
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	3f ef       	ldi	r19, 0xFF	; 255
    163e:	4f e7       	ldi	r20, 0x7F	; 127
    1640:	57 e4       	ldi	r21, 0x47	; 71
    1642:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1646:	18 16       	cp	r1, r24
    1648:	4c f5       	brge	.+82     	; 0x169c <Check_ReEnter_Password+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164a:	69 8d       	ldd	r22, Y+25	; 0x19
    164c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    164e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1650:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	40 e2       	ldi	r20, 0x20	; 32
    1658:	51 e4       	ldi	r21, 0x41	; 65
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	bc 01       	movw	r22, r24
    1664:	cd 01       	movw	r24, r26
    1666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9c 8b       	std	Y+20, r25	; 0x14
    1670:	8b 8b       	std	Y+19, r24	; 0x13
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <Check_ReEnter_Password+0x106>
    1674:	88 ec       	ldi	r24, 0xC8	; 200
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	9a 8b       	std	Y+18, r25	; 0x12
    167a:	89 8b       	std	Y+17, r24	; 0x11
    167c:	89 89       	ldd	r24, Y+17	; 0x11
    167e:	9a 89       	ldd	r25, Y+18	; 0x12
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <Check_ReEnter_Password+0xf4>
    1684:	9a 8b       	std	Y+18, r25	; 0x12
    1686:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	8b 89       	ldd	r24, Y+19	; 0x13
    168a:	9c 89       	ldd	r25, Y+20	; 0x14
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	9c 8b       	std	Y+20, r25	; 0x14
    1690:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1692:	8b 89       	ldd	r24, Y+19	; 0x13
    1694:	9c 89       	ldd	r25, Y+20	; 0x14
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	69 f7       	brne	.-38     	; 0x1674 <Check_ReEnter_Password+0xe8>
    169a:	14 c0       	rjmp	.+40     	; 0x16c4 <Check_ReEnter_Password+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    169c:	6d 89       	ldd	r22, Y+21	; 0x15
    169e:	7e 89       	ldd	r23, Y+22	; 0x16
    16a0:	8f 89       	ldd	r24, Y+23	; 0x17
    16a2:	98 8d       	ldd	r25, Y+24	; 0x18
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9c 8b       	std	Y+20, r25	; 0x14
    16ae:	8b 8b       	std	Y+19, r24	; 0x13
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	98 8b       	std	Y+16, r25	; 0x10
    16b6:	8f 87       	std	Y+15, r24	; 0x0f
    16b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ba:	98 89       	ldd	r25, Y+16	; 0x10
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <Check_ReEnter_Password+0x130>
    16c0:	98 8b       	std	Y+16, r25	; 0x10
    16c2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(3000);
			LCD_clearScreen();
    16c4:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,8,"PLEASE TRY AGAIN!");
    16c8:	21 ed       	ldi	r18, 0xD1	; 209
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	68 e0       	ldi	r22, 0x08	; 8
    16d0:	a9 01       	movw	r20, r18
    16d2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	aa ef       	ldi	r26, 0xFA	; 250
    16dc:	b4 e4       	ldi	r27, 0x44	; 68
    16de:	8b 87       	std	Y+11, r24	; 0x0b
    16e0:	9c 87       	std	Y+12, r25	; 0x0c
    16e2:	ad 87       	std	Y+13, r26	; 0x0d
    16e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	4a ef       	ldi	r20, 0xFA	; 250
    16f4:	54 e4       	ldi	r21, 0x44	; 68
    16f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	8f 83       	std	Y+7, r24	; 0x07
    1700:	98 87       	std	Y+8, r25	; 0x08
    1702:	a9 87       	std	Y+9, r26	; 0x09
    1704:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1706:	6f 81       	ldd	r22, Y+7	; 0x07
    1708:	78 85       	ldd	r23, Y+8	; 0x08
    170a:	89 85       	ldd	r24, Y+9	; 0x09
    170c:	9a 85       	ldd	r25, Y+10	; 0x0a
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e8       	ldi	r20, 0x80	; 128
    1714:	5f e3       	ldi	r21, 0x3F	; 63
    1716:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    171a:	88 23       	and	r24, r24
    171c:	2c f4       	brge	.+10     	; 0x1728 <Check_ReEnter_Password+0x19c>
		__ticks = 1;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	3f c0       	rjmp	.+126    	; 0x17a6 <Check_ReEnter_Password+0x21a>
	else if (__tmp > 65535)
    1728:	6f 81       	ldd	r22, Y+7	; 0x07
    172a:	78 85       	ldd	r23, Y+8	; 0x08
    172c:	89 85       	ldd	r24, Y+9	; 0x09
    172e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	3f ef       	ldi	r19, 0xFF	; 255
    1734:	4f e7       	ldi	r20, 0x7F	; 127
    1736:	57 e4       	ldi	r21, 0x47	; 71
    1738:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    173c:	18 16       	cp	r1, r24
    173e:	4c f5       	brge	.+82     	; 0x1792 <Check_ReEnter_Password+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1740:	6b 85       	ldd	r22, Y+11	; 0x0b
    1742:	7c 85       	ldd	r23, Y+12	; 0x0c
    1744:	8d 85       	ldd	r24, Y+13	; 0x0d
    1746:	9e 85       	ldd	r25, Y+14	; 0x0e
    1748:	20 e0       	ldi	r18, 0x00	; 0
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	40 e2       	ldi	r20, 0x20	; 32
    174e:	51 e4       	ldi	r21, 0x41	; 65
    1750:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1754:	dc 01       	movw	r26, r24
    1756:	cb 01       	movw	r24, r22
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9e 83       	std	Y+6, r25	; 0x06
    1766:	8d 83       	std	Y+5, r24	; 0x05
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <Check_ReEnter_Password+0x1fc>
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	9c 83       	std	Y+4, r25	; 0x04
    1770:	8b 83       	std	Y+3, r24	; 0x03
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	9c 81       	ldd	r25, Y+4	; 0x04
    1776:	01 97       	sbiw	r24, 0x01	; 1
    1778:	f1 f7       	brne	.-4      	; 0x1776 <Check_ReEnter_Password+0x1ea>
    177a:	9c 83       	std	Y+4, r25	; 0x04
    177c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	9e 83       	std	Y+6, r25	; 0x06
    1786:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	8d 81       	ldd	r24, Y+5	; 0x05
    178a:	9e 81       	ldd	r25, Y+6	; 0x06
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	69 f7       	brne	.-38     	; 0x176a <Check_ReEnter_Password+0x1de>
    1790:	14 c0       	rjmp	.+40     	; 0x17ba <Check_ReEnter_Password+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1792:	6f 81       	ldd	r22, Y+7	; 0x07
    1794:	78 85       	ldd	r23, Y+8	; 0x08
    1796:	89 85       	ldd	r24, Y+9	; 0x09
    1798:	9a 85       	ldd	r25, Y+10	; 0x0a
    179a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179e:	dc 01       	movw	r26, r24
    17a0:	cb 01       	movw	r24, r22
    17a2:	9e 83       	std	Y+6, r25	; 0x06
    17a4:	8d 83       	std	Y+5, r24	; 0x05
    17a6:	8d 81       	ldd	r24, Y+5	; 0x05
    17a8:	9e 81       	ldd	r25, Y+6	; 0x06
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	01 97       	sbiw	r24, 0x01	; 1
    17b4:	f1 f7       	brne	.-4      	; 0x17b2 <Check_ReEnter_Password+0x226>
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			Create_Store_Password();
    17ba:	0e 94 88 06 	call	0xd10	; 0xd10 <Create_Store_Password>
    17be:	07 c0       	rjmp	.+14     	; 0x17ce <Check_ReEnter_Password+0x242>
 *
 */
void Check_ReEnter_Password(uint8 a_arr[])
{
	uint8 i;
	for(i = 0; i < PASSWORD_ARRAY_SIZE; i++)
    17c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	8d 8f       	std	Y+29, r24	; 0x1d
    17c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17c8:	85 30       	cpi	r24, 0x05	; 5
    17ca:	08 f4       	brcc	.+2      	; 0x17ce <Check_ReEnter_Password+0x242>
    17cc:	ed ce       	rjmp	.-550    	; 0x15a8 <Check_ReEnter_Password+0x1c>
			_delay_ms(2000);
			Create_Store_Password();
			break;
		}
	}
}
    17ce:	6f 96       	adiw	r28, 0x1f	; 31
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <Check_Old_Password>:
/*
 * Description : Function to Check the old Password.
 *
 */
uint8 Check_Old_Password(uint8 a_arr[])
{
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	62 97       	sbiw	r28, 0x12	; 18
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	99 8b       	std	Y+17, r25	; 0x11
    17f6:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for(i = 0; i < 5; i++)
    17f8:	1f 86       	std	Y+15, r1	; 0x0f
    17fa:	96 c0       	rjmp	.+300    	; 0x1928 <Check_Old_Password+0x148>
	{
		if(a_arr[i] != g_New_password[i])
    17fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	88 89       	ldd	r24, Y+16	; 0x10
    1804:	99 89       	ldd	r25, Y+17	; 0x11
    1806:	fc 01       	movw	r30, r24
    1808:	e2 0f       	add	r30, r18
    180a:	f3 1f       	adc	r31, r19
    180c:	20 81       	ld	r18, Z
    180e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	fc 01       	movw	r30, r24
    1816:	eb 57       	subi	r30, 0x7B	; 123
    1818:	fe 4f       	sbci	r31, 0xFE	; 254
    181a:	80 81       	ld	r24, Z
    181c:	28 17       	cp	r18, r24
    181e:	09 f4       	brne	.+2      	; 0x1822 <Check_Old_Password+0x42>
    1820:	80 c0       	rjmp	.+256    	; 0x1922 <Check_Old_Password+0x142>
		{
			LCD_clearScreen();
    1822:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
			/* Display this string "WRONG PASSWORD!" on LCD */
			LCD_displayStringRowColumn(0,6,"PASSWORD DON'T MATCH!");
    1826:	23 ee       	ldi	r18, 0xE3	; 227
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	66 e0       	ldi	r22, 0x06	; 6
    182e:	a9 01       	movw	r20, r18
    1830:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e8       	ldi	r25, 0x80	; 128
    1838:	ab e3       	ldi	r26, 0x3B	; 59
    183a:	b5 e4       	ldi	r27, 0x45	; 69
    183c:	8b 87       	std	Y+11, r24	; 0x0b
    183e:	9c 87       	std	Y+12, r25	; 0x0c
    1840:	ad 87       	std	Y+13, r26	; 0x0d
    1842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1844:	6b 85       	ldd	r22, Y+11	; 0x0b
    1846:	7c 85       	ldd	r23, Y+12	; 0x0c
    1848:	8d 85       	ldd	r24, Y+13	; 0x0d
    184a:	9e 85       	ldd	r25, Y+14	; 0x0e
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	4a ef       	ldi	r20, 0xFA	; 250
    1852:	54 e4       	ldi	r21, 0x44	; 68
    1854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	8f 83       	std	Y+7, r24	; 0x07
    185e:	98 87       	std	Y+8, r25	; 0x08
    1860:	a9 87       	std	Y+9, r26	; 0x09
    1862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1864:	6f 81       	ldd	r22, Y+7	; 0x07
    1866:	78 85       	ldd	r23, Y+8	; 0x08
    1868:	89 85       	ldd	r24, Y+9	; 0x09
    186a:	9a 85       	ldd	r25, Y+10	; 0x0a
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1878:	88 23       	and	r24, r24
    187a:	2c f4       	brge	.+10     	; 0x1886 <Check_Old_Password+0xa6>
		__ticks = 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9e 83       	std	Y+6, r25	; 0x06
    1882:	8d 83       	std	Y+5, r24	; 0x05
    1884:	3f c0       	rjmp	.+126    	; 0x1904 <Check_Old_Password+0x124>
	else if (__tmp > 65535)
    1886:	6f 81       	ldd	r22, Y+7	; 0x07
    1888:	78 85       	ldd	r23, Y+8	; 0x08
    188a:	89 85       	ldd	r24, Y+9	; 0x09
    188c:	9a 85       	ldd	r25, Y+10	; 0x0a
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	4c f5       	brge	.+82     	; 0x18f0 <Check_Old_Password+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	9e 83       	std	Y+6, r25	; 0x06
    18c4:	8d 83       	std	Y+5, r24	; 0x05
    18c6:	0f c0       	rjmp	.+30     	; 0x18e6 <Check_Old_Password+0x106>
    18c8:	88 ec       	ldi	r24, 0xC8	; 200
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
    18d0:	8b 81       	ldd	r24, Y+3	; 0x03
    18d2:	9c 81       	ldd	r25, Y+4	; 0x04
    18d4:	01 97       	sbiw	r24, 0x01	; 1
    18d6:	f1 f7       	brne	.-4      	; 0x18d4 <Check_Old_Password+0xf4>
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	9e 81       	ldd	r25, Y+6	; 0x06
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <Check_Old_Password+0xe8>
    18ee:	14 c0       	rjmp	.+40     	; 0x1918 <Check_Old_Password+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f0:	6f 81       	ldd	r22, Y+7	; 0x07
    18f2:	78 85       	ldd	r23, Y+8	; 0x08
    18f4:	89 85       	ldd	r24, Y+9	; 0x09
    18f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	9e 83       	std	Y+6, r25	; 0x06
    1902:	8d 83       	std	Y+5, r24	; 0x05
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	9a 83       	std	Y+2, r25	; 0x02
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	9a 81       	ldd	r25, Y+2	; 0x02
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <Check_Old_Password+0x130>
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			g_check_flag = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	80 93 7d 01 	sts	0x017D, r24
			return 0;
    191e:	1a 8a       	std	Y+18, r1	; 0x12
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <Check_Old_Password+0x156>
 *
 */
uint8 Check_Old_Password(uint8 a_arr[])
{
	uint8 i;
	for(i = 0; i < 5; i++)
    1922:	8f 85       	ldd	r24, Y+15	; 0x0f
    1924:	8f 5f       	subi	r24, 0xFF	; 255
    1926:	8f 87       	std	Y+15, r24	; 0x0f
    1928:	8f 85       	ldd	r24, Y+15	; 0x0f
    192a:	85 30       	cpi	r24, 0x05	; 5
    192c:	08 f4       	brcc	.+2      	; 0x1930 <Check_Old_Password+0x150>
    192e:	66 cf       	rjmp	.-308    	; 0x17fc <Check_Old_Password+0x1c>
			_delay_ms(3000);
			g_check_flag = 1;
			return 0;
		}
	}
	g_check_flag = 0;
    1930:	10 92 7d 01 	sts	0x017D, r1
	return 0;
    1934:	1a 8a       	std	Y+18, r1	; 0x12
    1936:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1938:	62 96       	adiw	r28, 0x12	; 18
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <Send_Password>:
/*
 * Description : Function to Send Password to the control ECU Using USART.
 *
 */
void Send_Password(uint8 a_arr[])
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <Send_Password+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9b 83       	std	Y+3, r25	; 0x03
    1958:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;

	for(i = 0; i < PASSWORD_ARRAY_SIZE ; i++)
    195a:	19 82       	std	Y+1, r1	; 0x01
    195c:	0e c0       	rjmp	.+28     	; 0x197a <Send_Password+0x30>
	{
		UART_sendByte(a_arr[i]);
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	9b 81       	ldd	r25, Y+3	; 0x03
    1968:	fc 01       	movw	r30, r24
    196a:	e2 0f       	add	r30, r18
    196c:	f3 1f       	adc	r31, r19
    196e:	80 81       	ld	r24, Z
    1970:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <UART_sendByte>
 */
void Send_Password(uint8 a_arr[])
{
	uint8 i;

	for(i = 0; i < PASSWORD_ARRAY_SIZE ; i++)
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	89 81       	ldd	r24, Y+1	; 0x01
    197c:	85 30       	cpi	r24, 0x05	; 5
    197e:	78 f3       	brcs	.-34     	; 0x195e <Send_Password+0x14>
	{
		UART_sendByte(a_arr[i]);
	}
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <Main_Options>:
 * 				 to change the password and according to the user decision it send the chosen command
 *               to the control ECU.
 *
 */
void Main_Options(void)
{
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	c5 56       	subi	r28, 0x65	; 101
    199a:	d0 40       	sbci	r29, 0x00	; 0
    199c:	0f b6       	in	r0, 0x3f	; 63
    199e:	f8 94       	cli
    19a0:	de bf       	out	0x3e, r29	; 62
    19a2:	0f be       	out	0x3f, r0	; 63
    19a4:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
    19a6:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
	/* Display this string "(+): CHANGE PASSWORD" on LCD */
	LCD_displayStringRowColumn(0,6,"(+): OPEN DOOR");
    19aa:	29 ef       	ldi	r18, 0xF9	; 249
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	a9 01       	movw	r20, r18
    19b4:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	/* Display this string "(-): OPEN DOOR" on LCD */
	LCD_displayStringRowColumn(1,6,"(-): CHANGE PASSWORD");
    19b8:	28 e0       	ldi	r18, 0x08	; 8
    19ba:	31 e0       	ldi	r19, 0x01	; 1
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	66 e0       	ldi	r22, 0x06	; 6
    19c0:	a9 01       	movw	r20, r18
    19c2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	g_key = KEYPAD_getPressedKey();
    19c6:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <KEYPAD_getPressedKey>
    19ca:	80 93 91 01 	sts	0x0191, r24
	switch(g_key)
    19ce:	80 91 91 01 	lds	r24, 0x0191
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a6 96       	adiw	r28, 0x26	; 38
    19d8:	3f af       	std	Y+63, r19	; 0x3f
    19da:	2e af       	std	Y+62, r18	; 0x3e
    19dc:	a6 97       	sbiw	r28, 0x26	; 38
    19de:	a6 96       	adiw	r28, 0x26	; 38
    19e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    19e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    19e4:	a6 97       	sbiw	r28, 0x26	; 38
    19e6:	8b 32       	cpi	r24, 0x2B	; 43
    19e8:	91 05       	cpc	r25, r1
    19ea:	49 f0       	breq	.+18     	; 0x19fe <Main_Options+0x72>
    19ec:	a6 96       	adiw	r28, 0x26	; 38
    19ee:	ee ad       	ldd	r30, Y+62	; 0x3e
    19f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    19f2:	a6 97       	sbiw	r28, 0x26	; 38
    19f4:	ed 32       	cpi	r30, 0x2D	; 45
    19f6:	f1 05       	cpc	r31, r1
    19f8:	09 f4       	brne	.+2      	; 0x19fc <Main_Options+0x70>
    19fa:	c4 c2       	rjmp	.+1416   	; 0x1f84 <Main_Options+0x5f8>
    19fc:	75 c4       	rjmp	.+2282   	; 0x22e8 <Main_Options+0x95c>
	{
	case '+':
		LCD_clearScreen();
    19fe:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
		/* Display this string "PLEASE ENTER OLD PASSWORD:(5)" on LCD */
		LCD_displayStringRowColumn(0,0,"PLEASE ENTER PASSWORD:(5)");
    1a02:	2d e1       	ldi	r18, 0x1D	; 29
    1a04:	31 e0       	ldi	r19, 0x01	; 1
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	60 e0       	ldi	r22, 0x00	; 0
    1a0a:	a9 01       	movw	r20, r18
    1a0c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,14);
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	6e e0       	ldi	r22, 0x0E	; 14
    1a14:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e1 5a       	subi	r30, 0xA1	; 161
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	aa ef       	ldi	r26, 0xFA	; 250
    1a24:	b3 e4       	ldi	r27, 0x43	; 67
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	05 5a       	subi	r16, 0xA5	; 165
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	e1 5a       	subi	r30, 0xA1	; 161
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e5 5a       	subi	r30, 0xA5	; 165
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	60 81       	ld	r22, Z
    1a64:	71 81       	ldd	r23, Z+1	; 0x01
    1a66:	82 81       	ldd	r24, Z+2	; 0x02
    1a68:	93 81       	ldd	r25, Z+3	; 0x03
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	44 f4       	brge	.+16     	; 0x1a8a <Main_Options+0xfe>
		__ticks = 1;
    1a7a:	fe 01       	movw	r30, r28
    1a7c:	e7 5a       	subi	r30, 0xA7	; 167
    1a7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	80 83       	st	Z, r24
    1a88:	64 c0       	rjmp	.+200    	; 0x1b52 <Main_Options+0x1c6>
	else if (__tmp > 65535)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	e5 5a       	subi	r30, 0xA5	; 165
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	3f ef       	ldi	r19, 0xFF	; 255
    1a9c:	4f e7       	ldi	r20, 0x7F	; 127
    1a9e:	57 e4       	ldi	r21, 0x47	; 71
    1aa0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aa4:	18 16       	cp	r1, r24
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <Main_Options+0x11e>
    1aa8:	43 c0       	rjmp	.+134    	; 0x1b30 <Main_Options+0x1a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e1 5a       	subi	r30, 0xA1	; 161
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e2       	ldi	r20, 0x20	; 32
    1abe:	51 e4       	ldi	r21, 0x41	; 65
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8e 01       	movw	r16, r28
    1aca:	07 5a       	subi	r16, 0xA7	; 167
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	f8 01       	movw	r30, r16
    1adc:	91 83       	std	Z+1, r25	; 0x01
    1ade:	80 83       	st	Z, r24
    1ae0:	1f c0       	rjmp	.+62     	; 0x1b20 <Main_Options+0x194>
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e9 5a       	subi	r30, 0xA9	; 169
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	88 ec       	ldi	r24, 0xC8	; 200
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	91 83       	std	Z+1, r25	; 0x01
    1aee:	80 83       	st	Z, r24
    1af0:	fe 01       	movw	r30, r28
    1af2:	e9 5a       	subi	r30, 0xA9	; 169
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <Main_Options+0x16e>
    1afe:	fe 01       	movw	r30, r28
    1b00:	e9 5a       	subi	r30, 0xA9	; 169
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b08:	de 01       	movw	r26, r28
    1b0a:	a7 5a       	subi	r26, 0xA7	; 167
    1b0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b0e:	fe 01       	movw	r30, r28
    1b10:	e7 5a       	subi	r30, 0xA7	; 167
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	80 81       	ld	r24, Z
    1b16:	91 81       	ldd	r25, Z+1	; 0x01
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	11 96       	adiw	r26, 0x01	; 1
    1b1c:	9c 93       	st	X, r25
    1b1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	fe 01       	movw	r30, r28
    1b22:	e7 5a       	subi	r30, 0xA7	; 167
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	80 81       	ld	r24, Z
    1b28:	91 81       	ldd	r25, Z+1	; 0x01
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	d1 f6       	brne	.-76     	; 0x1ae2 <Main_Options+0x156>
    1b2e:	27 c0       	rjmp	.+78     	; 0x1b7e <Main_Options+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	8e 01       	movw	r16, r28
    1b32:	07 5a       	subi	r16, 0xA7	; 167
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	fe 01       	movw	r30, r28
    1b38:	e5 5a       	subi	r30, 0xA5	; 165
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	de 01       	movw	r26, r28
    1b54:	ab 5a       	subi	r26, 0xAB	; 171
    1b56:	bf 4f       	sbci	r27, 0xFF	; 255
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e7 5a       	subi	r30, 0xA7	; 167
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	8d 93       	st	X+, r24
    1b64:	9c 93       	st	X, r25
    1b66:	fe 01       	movw	r30, r28
    1b68:	eb 5a       	subi	r30, 0xAB	; 171
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <Main_Options+0x1e4>
    1b74:	fe 01       	movw	r30, r28
    1b76:	eb 5a       	subi	r30, 0xAB	; 171
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
		_delay_ms(500);
		Fill_Old_Password();
    1b7e:	0e 94 96 09 	call	0x132c	; 0x132c <Fill_Old_Password>
		Check_Old_Password(check_password);
    1b82:	8b e8       	ldi	r24, 0x8B	; 139
    1b84:	91 e0       	ldi	r25, 0x01	; 1
    1b86:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Check_Old_Password>
		Empty_Array();
    1b8a:	0e 94 1c 12 	call	0x2438	; 0x2438 <Empty_Array>
		for(i = 0; i < 3; i ++)
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ed 59       	subi	r30, 0x9D	; 157
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	10 82       	st	Z, r1
    1b96:	6f c1       	rjmp	.+734    	; 0x1e76 <Main_Options+0x4ea>
		{
			if(g_check_flag != 0)
    1b98:	80 91 7d 01 	lds	r24, 0x017D
    1b9c:	88 23       	and	r24, r24
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <Main_Options+0x216>
    1ba0:	61 c1       	rjmp	.+706    	; 0x1e64 <Main_Options+0x4d8>
			{
				if(i == 2)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 59       	subi	r30, 0x9D	; 157
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	82 30       	cpi	r24, 0x02	; 2
    1bac:	09 f0       	breq	.+2      	; 0x1bb0 <Main_Options+0x224>
    1bae:	c0 c0       	rjmp	.+384    	; 0x1d30 <Main_Options+0x3a4>
				{
					sendCommand(BUZZER); //buzzer
    1bb0:	83 e0       	ldi	r24, 0x03	; 3
    1bb2:	0e 94 80 11 	call	0x2300	; 0x2300 <sendCommand>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	ef 5a       	subi	r30, 0xAF	; 175
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e2       	ldi	r26, 0x20	; 32
    1bc2:	b1 e4       	ldi	r27, 0x41	; 65
    1bc4:	80 83       	st	Z, r24
    1bc6:	91 83       	std	Z+1, r25	; 0x01
    1bc8:	a2 83       	std	Z+2, r26	; 0x02
    1bca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bcc:	8e 01       	movw	r16, r28
    1bce:	03 5b       	subi	r16, 0xB3	; 179
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ef 5a       	subi	r30, 0xAF	; 175
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	82 81       	ldd	r24, Z+2	; 0x02
    1bde:	93 81       	ldd	r25, Z+3	; 0x03
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	4a ef       	ldi	r20, 0xFA	; 250
    1be6:	54 e4       	ldi	r21, 0x44	; 68
    1be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bec:	dc 01       	movw	r26, r24
    1bee:	cb 01       	movw	r24, r22
    1bf0:	f8 01       	movw	r30, r16
    1bf2:	80 83       	st	Z, r24
    1bf4:	91 83       	std	Z+1, r25	; 0x01
    1bf6:	a2 83       	std	Z+2, r26	; 0x02
    1bf8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e3 5b       	subi	r30, 0xB3	; 179
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	60 81       	ld	r22, Z
    1c02:	71 81       	ldd	r23, Z+1	; 0x01
    1c04:	82 81       	ldd	r24, Z+2	; 0x02
    1c06:	93 81       	ldd	r25, Z+3	; 0x03
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	44 f4       	brge	.+16     	; 0x1c28 <Main_Options+0x29c>
		__ticks = 1;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e5 5b       	subi	r30, 0xB5	; 181
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	64 c0       	rjmp	.+200    	; 0x1cf0 <Main_Options+0x364>
	else if (__tmp > 65535)
    1c28:	fe 01       	movw	r30, r28
    1c2a:	e3 5b       	subi	r30, 0xB3	; 179
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	3f ef       	ldi	r19, 0xFF	; 255
    1c3a:	4f e7       	ldi	r20, 0x7F	; 127
    1c3c:	57 e4       	ldi	r21, 0x47	; 71
    1c3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <Main_Options+0x2bc>
    1c46:	43 c0       	rjmp	.+134    	; 0x1cce <Main_Options+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ef 5a       	subi	r30, 0xAF	; 175
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	40 e2       	ldi	r20, 0x20	; 32
    1c5c:	51 e4       	ldi	r21, 0x41	; 65
    1c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	8e 01       	movw	r16, r28
    1c68:	05 5b       	subi	r16, 0xB5	; 181
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	bc 01       	movw	r22, r24
    1c6e:	cd 01       	movw	r24, r26
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	f8 01       	movw	r30, r16
    1c7a:	91 83       	std	Z+1, r25	; 0x01
    1c7c:	80 83       	st	Z, r24
    1c7e:	1f c0       	rjmp	.+62     	; 0x1cbe <Main_Options+0x332>
    1c80:	fe 01       	movw	r30, r28
    1c82:	e7 5b       	subi	r30, 0xB7	; 183
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	88 ec       	ldi	r24, 0xC8	; 200
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e7 5b       	subi	r30, 0xB7	; 183
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	80 81       	ld	r24, Z
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <Main_Options+0x30c>
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	de 01       	movw	r26, r28
    1ca8:	a5 5b       	subi	r26, 0xB5	; 181
    1caa:	bf 4f       	sbci	r27, 0xFF	; 255
    1cac:	fe 01       	movw	r30, r28
    1cae:	e5 5b       	subi	r30, 0xB5	; 181
    1cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	11 96       	adiw	r26, 0x01	; 1
    1cba:	9c 93       	st	X, r25
    1cbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5b       	subi	r30, 0xB5	; 181
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	80 81       	ld	r24, Z
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	00 97       	sbiw	r24, 0x00	; 0
    1cca:	d1 f6       	brne	.-76     	; 0x1c80 <Main_Options+0x2f4>
    1ccc:	27 c0       	rjmp	.+78     	; 0x1d1c <Main_Options+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cce:	8e 01       	movw	r16, r28
    1cd0:	05 5b       	subi	r16, 0xB5	; 181
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e3 5b       	subi	r30, 0xB3	; 179
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	60 81       	ld	r22, Z
    1cdc:	71 81       	ldd	r23, Z+1	; 0x01
    1cde:	82 81       	ldd	r24, Z+2	; 0x02
    1ce0:	93 81       	ldd	r25, Z+3	; 0x03
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	f8 01       	movw	r30, r16
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	80 83       	st	Z, r24
    1cf0:	de 01       	movw	r26, r28
    1cf2:	a9 5b       	subi	r26, 0xB9	; 185
    1cf4:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e5 5b       	subi	r30, 0xB5	; 181
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	8d 93       	st	X+, r24
    1d02:	9c 93       	st	X, r25
    1d04:	fe 01       	movw	r30, r28
    1d06:	e9 5b       	subi	r30, 0xB9	; 185
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <Main_Options+0x382>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e9 5b       	subi	r30, 0xB9	; 185
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
					_delay_ms(10);
					ALERT_Screen();
    1d1c:	0e 94 8d 11 	call	0x231a	; 0x231a <ALERT_Screen>
					while(g_ALERT_Tick_flag != 1){};
    1d20:	80 91 7e 01 	lds	r24, 0x017E
    1d24:	81 30       	cpi	r24, 0x01	; 1
    1d26:	e1 f7       	brne	.-8      	; 0x1d20 <Main_Options+0x394>
					g_ALERT_Tick_flag = 0;
    1d28:	10 92 7e 01 	sts	0x017E, r1
					Main_Options();
    1d2c:	0e 94 c6 0c 	call	0x198c	; 0x198c <Main_Options>
				}
				LCD_clearScreen();
    1d30:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
				/* Display this string "PLEASE ENTER OLD PASSWORD:(5)" on LCD */
				LCD_displayStringRowColumn(0,0,"PLEASE ENTER PASSWORD:(5)");
    1d34:	2d e1       	ldi	r18, 0x1D	; 29
    1d36:	31 e0       	ldi	r19, 0x01	; 1
    1d38:	80 e0       	ldi	r24, 0x00	; 0
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	a9 01       	movw	r20, r18
    1d3e:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
				LCD_moveCursor(1,14);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	6e e0       	ldi	r22, 0x0E	; 14
    1d46:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ed 5b       	subi	r30, 0xBD	; 189
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e8       	ldi	r25, 0x80	; 128
    1d54:	ab eb       	ldi	r26, 0xBB	; 187
    1d56:	b4 e4       	ldi	r27, 0x44	; 68
    1d58:	80 83       	st	Z, r24
    1d5a:	91 83       	std	Z+1, r25	; 0x01
    1d5c:	a2 83       	std	Z+2, r26	; 0x02
    1d5e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d60:	8e 01       	movw	r16, r28
    1d62:	01 5c       	subi	r16, 0xC1	; 193
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	fe 01       	movw	r30, r28
    1d68:	ed 5b       	subi	r30, 0xBD	; 189
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	4a ef       	ldi	r20, 0xFA	; 250
    1d7a:	54 e4       	ldi	r21, 0x44	; 68
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 83       	st	Z, r24
    1d88:	91 83       	std	Z+1, r25	; 0x01
    1d8a:	a2 83       	std	Z+2, r26	; 0x02
    1d8c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d8e:	fe 01       	movw	r30, r28
    1d90:	ff 96       	adiw	r30, 0x3f	; 63
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <Main_Options+0x428>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	9e af       	std	Y+62, r25	; 0x3e
    1db0:	8d af       	std	Y+61, r24	; 0x3d
    1db2:	46 c0       	rjmp	.+140    	; 0x1e40 <Main_Options+0x4b4>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	ff 96       	adiw	r30, 0x3f	; 63
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	3f ef       	ldi	r19, 0xFF	; 255
    1dc4:	4f e7       	ldi	r20, 0x7F	; 127
    1dc6:	57 e4       	ldi	r21, 0x47	; 71
    1dc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dcc:	18 16       	cp	r1, r24
    1dce:	64 f5       	brge	.+88     	; 0x1e28 <Main_Options+0x49c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	ed 5b       	subi	r30, 0xBD	; 189
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e2       	ldi	r20, 0x20	; 32
    1de4:	51 e4       	ldi	r21, 0x41	; 65
    1de6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	bc 01       	movw	r22, r24
    1df0:	cd 01       	movw	r24, r26
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9e af       	std	Y+62, r25	; 0x3e
    1dfc:	8d af       	std	Y+61, r24	; 0x3d
    1dfe:	0f c0       	rjmp	.+30     	; 0x1e1e <Main_Options+0x492>
    1e00:	88 ec       	ldi	r24, 0xC8	; 200
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	9c af       	std	Y+60, r25	; 0x3c
    1e06:	8b af       	std	Y+59, r24	; 0x3b
    1e08:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e0a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <Main_Options+0x480>
    1e10:	9c af       	std	Y+60, r25	; 0x3c
    1e12:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	9e af       	std	Y+62, r25	; 0x3e
    1e1c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e20:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	69 f7       	brne	.-38     	; 0x1e00 <Main_Options+0x474>
    1e26:	16 c0       	rjmp	.+44     	; 0x1e54 <Main_Options+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ff 96       	adiw	r30, 0x3f	; 63
    1e2c:	60 81       	ld	r22, Z
    1e2e:	71 81       	ldd	r23, Z+1	; 0x01
    1e30:	82 81       	ldd	r24, Z+2	; 0x02
    1e32:	93 81       	ldd	r25, Z+3	; 0x03
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e af       	std	Y+62, r25	; 0x3e
    1e3e:	8d af       	std	Y+61, r24	; 0x3d
    1e40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e44:	9a af       	std	Y+58, r25	; 0x3a
    1e46:	89 af       	std	Y+57, r24	; 0x39
    1e48:	89 ad       	ldd	r24, Y+57	; 0x39
    1e4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <Main_Options+0x4c0>
    1e50:	9a af       	std	Y+58, r25	; 0x3a
    1e52:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(1500);
				Fill_Old_Password();
    1e54:	0e 94 96 09 	call	0x132c	; 0x132c <Fill_Old_Password>
				Check_Old_Password(check_password);
    1e58:	8b e8       	ldi	r24, 0x8B	; 139
    1e5a:	91 e0       	ldi	r25, 0x01	; 1
    1e5c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Check_Old_Password>
				Empty_Array();
    1e60:	0e 94 1c 12 	call	0x2438	; 0x2438 <Empty_Array>
		LCD_moveCursor(1,14);
		_delay_ms(500);
		Fill_Old_Password();
		Check_Old_Password(check_password);
		Empty_Array();
		for(i = 0; i < 3; i ++)
    1e64:	de 01       	movw	r26, r28
    1e66:	ad 59       	subi	r26, 0x9D	; 157
    1e68:	bf 4f       	sbci	r27, 0xFF	; 255
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 59       	subi	r30, 0x9D	; 157
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	80 81       	ld	r24, Z
    1e72:	8f 5f       	subi	r24, 0xFF	; 255
    1e74:	8c 93       	st	X, r24
    1e76:	fe 01       	movw	r30, r28
    1e78:	ed 59       	subi	r30, 0x9D	; 157
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	83 30       	cpi	r24, 0x03	; 3
    1e80:	08 f4       	brcc	.+2      	; 0x1e84 <Main_Options+0x4f8>
    1e82:	8a ce       	rjmp	.-748    	; 0x1b98 <Main_Options+0x20c>
				Fill_Old_Password();
				Check_Old_Password(check_password);
				Empty_Array();
			}
		}
		sendCommand(MOTOR); //motor
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	0e 94 80 11 	call	0x2300	; 0x2300 <sendCommand>
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e2       	ldi	r26, 0x20	; 32
    1e90:	b1 e4       	ldi	r27, 0x41	; 65
    1e92:	8d ab       	std	Y+53, r24	; 0x35
    1e94:	9e ab       	std	Y+54, r25	; 0x36
    1e96:	af ab       	std	Y+55, r26	; 0x37
    1e98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1e9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1e9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	4a ef       	ldi	r20, 0xFA	; 250
    1ea8:	54 e4       	ldi	r21, 0x44	; 68
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	89 ab       	std	Y+49, r24	; 0x31
    1eb4:	9a ab       	std	Y+50, r25	; 0x32
    1eb6:	ab ab       	std	Y+51, r26	; 0x33
    1eb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eba:	69 a9       	ldd	r22, Y+49	; 0x31
    1ebc:	7a a9       	ldd	r23, Y+50	; 0x32
    1ebe:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec0:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e8       	ldi	r20, 0x80	; 128
    1ec8:	5f e3       	ldi	r21, 0x3F	; 63
    1eca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	2c f4       	brge	.+10     	; 0x1edc <Main_Options+0x550>
		__ticks = 1;
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	8f a7       	std	Y+47, r24	; 0x2f
    1eda:	3f c0       	rjmp	.+126    	; 0x1f5a <Main_Options+0x5ce>
	else if (__tmp > 65535)
    1edc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ede:	7a a9       	ldd	r23, Y+50	; 0x32
    1ee0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ee2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	4c f5       	brge	.+82     	; 0x1f46 <Main_Options+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ef8:	8f a9       	ldd	r24, Y+55	; 0x37
    1efa:	98 ad       	ldd	r25, Y+56	; 0x38
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e2       	ldi	r20, 0x20	; 32
    1f02:	51 e4       	ldi	r21, 0x41	; 65
    1f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f08:	dc 01       	movw	r26, r24
    1f0a:	cb 01       	movw	r24, r22
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	98 ab       	std	Y+48, r25	; 0x30
    1f1a:	8f a7       	std	Y+47, r24	; 0x2f
    1f1c:	0f c0       	rjmp	.+30     	; 0x1f3c <Main_Options+0x5b0>
    1f1e:	88 ec       	ldi	r24, 0xC8	; 200
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	9e a7       	std	Y+46, r25	; 0x2e
    1f24:	8d a7       	std	Y+45, r24	; 0x2d
    1f26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f2a:	01 97       	sbiw	r24, 0x01	; 1
    1f2c:	f1 f7       	brne	.-4      	; 0x1f2a <Main_Options+0x59e>
    1f2e:	9e a7       	std	Y+46, r25	; 0x2e
    1f30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f34:	98 a9       	ldd	r25, Y+48	; 0x30
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	98 ab       	std	Y+48, r25	; 0x30
    1f3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f40:	00 97       	sbiw	r24, 0x00	; 0
    1f42:	69 f7       	brne	.-38     	; 0x1f1e <Main_Options+0x592>
    1f44:	14 c0       	rjmp	.+40     	; 0x1f6e <Main_Options+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f46:	69 a9       	ldd	r22, Y+49	; 0x31
    1f48:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	98 ab       	std	Y+48, r25	; 0x30
    1f58:	8f a7       	std	Y+47, r24	; 0x2f
    1f5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f5e:	9c a7       	std	Y+44, r25	; 0x2c
    1f60:	8b a7       	std	Y+43, r24	; 0x2b
    1f62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <Main_Options+0x5da>
    1f6a:	9c a7       	std	Y+44, r25	; 0x2c
    1f6c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DOOR_Screen();
    1f6e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <DOOR_Screen>
		while(g_DOOR_Tick_flag != 1){};
    1f72:	80 91 7f 01 	lds	r24, 0x017F
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	e1 f7       	brne	.-8      	; 0x1f72 <Main_Options+0x5e6>
		g_DOOR_Tick_flag = 0;
    1f7a:	10 92 7f 01 	sts	0x017F, r1
		Main_Options();
    1f7e:	0e 94 c6 0c 	call	0x198c	; 0x198c <Main_Options>
    1f82:	b2 c1       	rjmp	.+868    	; 0x22e8 <Main_Options+0x95c>
		break;

	case '-':
		LCD_clearScreen();
    1f84:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
		/* Display this string "PLEASE ENTER OLD PASSWORD:(5)" on LCD */
		LCD_displayStringRowColumn(0,0,"PLEASE ENTER PASSWORD:(5)");
    1f88:	2d e1       	ldi	r18, 0x1D	; 29
    1f8a:	31 e0       	ldi	r19, 0x01	; 1
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	60 e0       	ldi	r22, 0x00	; 0
    1f90:	a9 01       	movw	r20, r18
    1f92:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
		LCD_moveCursor(1,14);
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	6e e0       	ldi	r22, 0x0E	; 14
    1f9a:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
    1f9e:	80 e0       	ldi	r24, 0x00	; 0
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	aa ef       	ldi	r26, 0xFA	; 250
    1fa4:	b3 e4       	ldi	r27, 0x43	; 67
    1fa6:	8f a3       	std	Y+39, r24	; 0x27
    1fa8:	98 a7       	std	Y+40, r25	; 0x28
    1faa:	a9 a7       	std	Y+41, r26	; 0x29
    1fac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fae:	6f a1       	ldd	r22, Y+39	; 0x27
    1fb0:	78 a5       	ldd	r23, Y+40	; 0x28
    1fb2:	89 a5       	ldd	r24, Y+41	; 0x29
    1fb4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8b a3       	std	Y+35, r24	; 0x23
    1fc8:	9c a3       	std	Y+36, r25	; 0x24
    1fca:	ad a3       	std	Y+37, r26	; 0x25
    1fcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fce:	6b a1       	ldd	r22, Y+35	; 0x23
    1fd0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e8       	ldi	r20, 0x80	; 128
    1fdc:	5f e3       	ldi	r21, 0x3F	; 63
    1fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe2:	88 23       	and	r24, r24
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <Main_Options+0x664>
		__ticks = 1;
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	9a a3       	std	Y+34, r25	; 0x22
    1fec:	89 a3       	std	Y+33, r24	; 0x21
    1fee:	3f c0       	rjmp	.+126    	; 0x206e <Main_Options+0x6e2>
	else if (__tmp > 65535)
    1ff0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ff2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	4c f5       	brge	.+82     	; 0x205a <Main_Options+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	6f a1       	ldd	r22, Y+39	; 0x27
    200a:	78 a5       	ldd	r23, Y+40	; 0x28
    200c:	89 a5       	ldd	r24, Y+41	; 0x29
    200e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	40 e2       	ldi	r20, 0x20	; 32
    2016:	51 e4       	ldi	r21, 0x41	; 65
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	bc 01       	movw	r22, r24
    2022:	cd 01       	movw	r24, r26
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	9a a3       	std	Y+34, r25	; 0x22
    202e:	89 a3       	std	Y+33, r24	; 0x21
    2030:	0f c0       	rjmp	.+30     	; 0x2050 <Main_Options+0x6c4>
    2032:	88 ec       	ldi	r24, 0xC8	; 200
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	98 a3       	std	Y+32, r25	; 0x20
    2038:	8f 8f       	std	Y+31, r24	; 0x1f
    203a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    203c:	98 a1       	ldd	r25, Y+32	; 0x20
    203e:	01 97       	sbiw	r24, 0x01	; 1
    2040:	f1 f7       	brne	.-4      	; 0x203e <Main_Options+0x6b2>
    2042:	98 a3       	std	Y+32, r25	; 0x20
    2044:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2046:	89 a1       	ldd	r24, Y+33	; 0x21
    2048:	9a a1       	ldd	r25, Y+34	; 0x22
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	9a a3       	std	Y+34, r25	; 0x22
    204e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2050:	89 a1       	ldd	r24, Y+33	; 0x21
    2052:	9a a1       	ldd	r25, Y+34	; 0x22
    2054:	00 97       	sbiw	r24, 0x00	; 0
    2056:	69 f7       	brne	.-38     	; 0x2032 <Main_Options+0x6a6>
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <Main_Options+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    205a:	6b a1       	ldd	r22, Y+35	; 0x23
    205c:	7c a1       	ldd	r23, Y+36	; 0x24
    205e:	8d a1       	ldd	r24, Y+37	; 0x25
    2060:	9e a1       	ldd	r25, Y+38	; 0x26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9a a3       	std	Y+34, r25	; 0x22
    206c:	89 a3       	std	Y+33, r24	; 0x21
    206e:	89 a1       	ldd	r24, Y+33	; 0x21
    2070:	9a a1       	ldd	r25, Y+34	; 0x22
    2072:	9e 8f       	std	Y+30, r25	; 0x1e
    2074:	8d 8f       	std	Y+29, r24	; 0x1d
    2076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    207a:	01 97       	sbiw	r24, 0x01	; 1
    207c:	f1 f7       	brne	.-4      	; 0x207a <Main_Options+0x6ee>
    207e:	9e 8f       	std	Y+30, r25	; 0x1e
    2080:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(500);
		Fill_Old_Password();
    2082:	0e 94 96 09 	call	0x132c	; 0x132c <Fill_Old_Password>
		Check_Old_Password(check_password);
    2086:	8b e8       	ldi	r24, 0x8B	; 139
    2088:	91 e0       	ldi	r25, 0x01	; 1
    208a:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Check_Old_Password>
		Empty_Array();
    208e:	0e 94 1c 12 	call	0x2438	; 0x2438 <Empty_Array>
		for(i = 0; i < 3; i ++)
    2092:	fe 01       	movw	r30, r28
    2094:	ed 59       	subi	r30, 0x9D	; 157
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	10 82       	st	Z, r1
    209a:	1b c1       	rjmp	.+566    	; 0x22d2 <Main_Options+0x946>
		{
			if(g_check_flag != 0)
    209c:	80 91 7d 01 	lds	r24, 0x017D
    20a0:	88 23       	and	r24, r24
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <Main_Options+0x71a>
    20a4:	0d c1       	rjmp	.+538    	; 0x22c0 <Main_Options+0x934>
			{
				if(i == 2)
    20a6:	fe 01       	movw	r30, r28
    20a8:	ed 59       	subi	r30, 0x9D	; 157
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	80 81       	ld	r24, Z
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <Main_Options+0x728>
    20b2:	7f c0       	rjmp	.+254    	; 0x21b2 <Main_Options+0x826>
				{
					sendCommand(BUZZER); //buzzer
    20b4:	83 e0       	ldi	r24, 0x03	; 3
    20b6:	0e 94 80 11 	call	0x2300	; 0x2300 <sendCommand>
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	a0 e2       	ldi	r26, 0x20	; 32
    20c0:	b1 e4       	ldi	r27, 0x41	; 65
    20c2:	89 8f       	std	Y+25, r24	; 0x19
    20c4:	9a 8f       	std	Y+26, r25	; 0x1a
    20c6:	ab 8f       	std	Y+27, r26	; 0x1b
    20c8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ca:	69 8d       	ldd	r22, Y+25	; 0x19
    20cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a ef       	ldi	r20, 0xFA	; 250
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8d 8b       	std	Y+21, r24	; 0x15
    20e4:	9e 8b       	std	Y+22, r25	; 0x16
    20e6:	af 8b       	std	Y+23, r26	; 0x17
    20e8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ea:	6d 89       	ldd	r22, Y+21	; 0x15
    20ec:	7e 89       	ldd	r23, Y+22	; 0x16
    20ee:	8f 89       	ldd	r24, Y+23	; 0x17
    20f0:	98 8d       	ldd	r25, Y+24	; 0x18
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	5f e3       	ldi	r21, 0x3F	; 63
    20fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fe:	88 23       	and	r24, r24
    2100:	2c f4       	brge	.+10     	; 0x210c <Main_Options+0x780>
		__ticks = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	9c 8b       	std	Y+20, r25	; 0x14
    2108:	8b 8b       	std	Y+19, r24	; 0x13
    210a:	3f c0       	rjmp	.+126    	; 0x218a <Main_Options+0x7fe>
	else if (__tmp > 65535)
    210c:	6d 89       	ldd	r22, Y+21	; 0x15
    210e:	7e 89       	ldd	r23, Y+22	; 0x16
    2110:	8f 89       	ldd	r24, Y+23	; 0x17
    2112:	98 8d       	ldd	r25, Y+24	; 0x18
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	4c f5       	brge	.+82     	; 0x2176 <Main_Options+0x7ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	69 8d       	ldd	r22, Y+25	; 0x19
    2126:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2128:	8b 8d       	ldd	r24, Y+27	; 0x1b
    212a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212c:	20 e0       	ldi	r18, 0x00	; 0
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	40 e2       	ldi	r20, 0x20	; 32
    2132:	51 e4       	ldi	r21, 0x41	; 65
    2134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	bc 01       	movw	r22, r24
    213e:	cd 01       	movw	r24, r26
    2140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	9c 8b       	std	Y+20, r25	; 0x14
    214a:	8b 8b       	std	Y+19, r24	; 0x13
    214c:	0f c0       	rjmp	.+30     	; 0x216c <Main_Options+0x7e0>
    214e:	88 ec       	ldi	r24, 0xC8	; 200
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9a 8b       	std	Y+18, r25	; 0x12
    2154:	89 8b       	std	Y+17, r24	; 0x11
    2156:	89 89       	ldd	r24, Y+17	; 0x11
    2158:	9a 89       	ldd	r25, Y+18	; 0x12
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	f1 f7       	brne	.-4      	; 0x215a <Main_Options+0x7ce>
    215e:	9a 8b       	std	Y+18, r25	; 0x12
    2160:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2162:	8b 89       	ldd	r24, Y+19	; 0x13
    2164:	9c 89       	ldd	r25, Y+20	; 0x14
    2166:	01 97       	sbiw	r24, 0x01	; 1
    2168:	9c 8b       	std	Y+20, r25	; 0x14
    216a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    216c:	8b 89       	ldd	r24, Y+19	; 0x13
    216e:	9c 89       	ldd	r25, Y+20	; 0x14
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	69 f7       	brne	.-38     	; 0x214e <Main_Options+0x7c2>
    2174:	14 c0       	rjmp	.+40     	; 0x219e <Main_Options+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2176:	6d 89       	ldd	r22, Y+21	; 0x15
    2178:	7e 89       	ldd	r23, Y+22	; 0x16
    217a:	8f 89       	ldd	r24, Y+23	; 0x17
    217c:	98 8d       	ldd	r25, Y+24	; 0x18
    217e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	9c 8b       	std	Y+20, r25	; 0x14
    2188:	8b 8b       	std	Y+19, r24	; 0x13
    218a:	8b 89       	ldd	r24, Y+19	; 0x13
    218c:	9c 89       	ldd	r25, Y+20	; 0x14
    218e:	98 8b       	std	Y+16, r25	; 0x10
    2190:	8f 87       	std	Y+15, r24	; 0x0f
    2192:	8f 85       	ldd	r24, Y+15	; 0x0f
    2194:	98 89       	ldd	r25, Y+16	; 0x10
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <Main_Options+0x80a>
    219a:	98 8b       	std	Y+16, r25	; 0x10
    219c:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(10);
					ALERT_Screen();
    219e:	0e 94 8d 11 	call	0x231a	; 0x231a <ALERT_Screen>
					while(g_ALERT_Tick_flag != 1){};
    21a2:	80 91 7e 01 	lds	r24, 0x017E
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <Main_Options+0x816>
					g_ALERT_Tick_flag = 0;
    21aa:	10 92 7e 01 	sts	0x017E, r1
					Main_Options();
    21ae:	0e 94 c6 0c 	call	0x198c	; 0x198c <Main_Options>
				}
				LCD_clearScreen();
    21b2:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
				/* Display this string "PLEASE ENTER OLD PASSWORD:(5)" on LCD */
				LCD_displayStringRowColumn(0,0,"PLEASE ENTER PASSWORD:(5)");
    21b6:	2d e1       	ldi	r18, 0x1D	; 29
    21b8:	31 e0       	ldi	r19, 0x01	; 1
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	a9 01       	movw	r20, r18
    21c0:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
				LCD_moveCursor(1,14);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	6e e0       	ldi	r22, 0x0E	; 14
    21c8:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e8       	ldi	r25, 0x80	; 128
    21d0:	ab eb       	ldi	r26, 0xBB	; 187
    21d2:	b4 e4       	ldi	r27, 0x44	; 68
    21d4:	8b 87       	std	Y+11, r24	; 0x0b
    21d6:	9c 87       	std	Y+12, r25	; 0x0c
    21d8:	ad 87       	std	Y+13, r26	; 0x0d
    21da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21de:	7c 85       	ldd	r23, Y+12	; 0x0c
    21e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a ef       	ldi	r20, 0xFA	; 250
    21ea:	54 e4       	ldi	r21, 0x44	; 68
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8f 83       	std	Y+7, r24	; 0x07
    21f6:	98 87       	std	Y+8, r25	; 0x08
    21f8:	a9 87       	std	Y+9, r26	; 0x09
    21fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fc:	6f 81       	ldd	r22, Y+7	; 0x07
    21fe:	78 85       	ldd	r23, Y+8	; 0x08
    2200:	89 85       	ldd	r24, Y+9	; 0x09
    2202:	9a 85       	ldd	r25, Y+10	; 0x0a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <Main_Options+0x892>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9e 83       	std	Y+6, r25	; 0x06
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	3f c0       	rjmp	.+126    	; 0x229c <Main_Options+0x910>
	else if (__tmp > 65535)
    221e:	6f 81       	ldd	r22, Y+7	; 0x07
    2220:	78 85       	ldd	r23, Y+8	; 0x08
    2222:	89 85       	ldd	r24, Y+9	; 0x09
    2224:	9a 85       	ldd	r25, Y+10	; 0x0a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <Main_Options+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	6b 85       	ldd	r22, Y+11	; 0x0b
    2238:	7c 85       	ldd	r23, Y+12	; 0x0c
    223a:	8d 85       	ldd	r24, Y+13	; 0x0d
    223c:	9e 85       	ldd	r25, Y+14	; 0x0e
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
    225e:	0f c0       	rjmp	.+30     	; 0x227e <Main_Options+0x8f2>
    2260:	88 ec       	ldi	r24, 0xC8	; 200
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <Main_Options+0x8e0>
    2270:	9c 83       	std	Y+4, r25	; 0x04
    2272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <Main_Options+0x8d4>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <Main_Options+0x924>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9e 83       	std	Y+6, r25	; 0x06
    229a:	8d 83       	std	Y+5, r24	; 0x05
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	9a 83       	std	Y+2, r25	; 0x02
    22a2:	89 83       	std	Y+1, r24	; 0x01
    22a4:	89 81       	ldd	r24, Y+1	; 0x01
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <Main_Options+0x91c>
    22ac:	9a 83       	std	Y+2, r25	; 0x02
    22ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(1500);
				Fill_Old_Password();
    22b0:	0e 94 96 09 	call	0x132c	; 0x132c <Fill_Old_Password>
				Check_Old_Password(check_password);
    22b4:	8b e8       	ldi	r24, 0x8B	; 139
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <Check_Old_Password>
				Empty_Array();
    22bc:	0e 94 1c 12 	call	0x2438	; 0x2438 <Empty_Array>
		LCD_moveCursor(1,14);
		_delay_ms(500);
		Fill_Old_Password();
		Check_Old_Password(check_password);
		Empty_Array();
		for(i = 0; i < 3; i ++)
    22c0:	de 01       	movw	r26, r28
    22c2:	ad 59       	subi	r26, 0x9D	; 157
    22c4:	bf 4f       	sbci	r27, 0xFF	; 255
    22c6:	fe 01       	movw	r30, r28
    22c8:	ed 59       	subi	r30, 0x9D	; 157
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	8c 93       	st	X, r24
    22d2:	fe 01       	movw	r30, r28
    22d4:	ed 59       	subi	r30, 0x9D	; 157
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	80 81       	ld	r24, Z
    22da:	83 30       	cpi	r24, 0x03	; 3
    22dc:	08 f4       	brcc	.+2      	; 0x22e0 <Main_Options+0x954>
    22de:	de ce       	rjmp	.-580    	; 0x209c <Main_Options+0x710>
				Fill_Old_Password();
				Check_Old_Password(check_password);
				Empty_Array();
			}
		}
		Create_Store_Password();
    22e0:	0e 94 88 06 	call	0xd10	; 0xd10 <Create_Store_Password>
		Main_Options();
    22e4:	0e 94 c6 0c 	call	0x198c	; 0x198c <Main_Options>
		break;
	}
}
    22e8:	cb 59       	subi	r28, 0x9B	; 155
    22ea:	df 4f       	sbci	r29, 0xFF	; 255
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	1f 91       	pop	r17
    22fc:	0f 91       	pop	r16
    22fe:	08 95       	ret

00002300 <sendCommand>:
/*
 * Description : Function to Send commands to the control ECU Using USART.
 *
 */
void sendCommand(uint8 command)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	0f 92       	push	r0
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(command);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <UART_sendByte>
}
    2312:	0f 90       	pop	r0
    2314:	cf 91       	pop	r28
    2316:	df 91       	pop	r29
    2318:	08 95       	ret

0000231a <ALERT_Screen>:
 * Description : Function to display a message for 1 minute that the user entered a
 *               wrong password for 3 times in row.
 *
 */
void ALERT_Screen(void)
{
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	2f 97       	sbiw	r28, 0x0f	; 15
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	f8 94       	cli
    2328:	de bf       	out	0x3e, r29	; 62
    232a:	0f be       	out	0x3f, r0	; 63
    232c:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    232e:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,10,"!!! ALERT !!!");
    2332:	27 e3       	ldi	r18, 0x37	; 55
    2334:	31 e0       	ldi	r19, 0x01	; 1
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	6a e0       	ldi	r22, 0x0A	; 10
    233a:	a9 01       	movw	r20, r18
    233c:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,10,"!!! THIEF !!!");
    2340:	25 e4       	ldi	r18, 0x45	; 69
    2342:	31 e0       	ldi	r19, 0x01	; 1
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	6a e0       	ldi	r22, 0x0A	; 10
    2348:	a9 01       	movw	r20, r18
    234a:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>

	TIMER_ConfigType TIMER_Config = {0,0,F_CPU_1024,OVERFLOW};
    234e:	ce 01       	movw	r24, r28
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	9c 87       	std	Y+12, r25	; 0x0c
    2354:	8b 87       	std	Y+11, r24	; 0x0b
    2356:	e7 e6       	ldi	r30, 0x67	; 103
    2358:	f1 e0       	ldi	r31, 0x01	; 1
    235a:	fe 87       	std	Y+14, r31	; 0x0e
    235c:	ed 87       	std	Y+13, r30	; 0x0d
    235e:	fa e0       	ldi	r31, 0x0A	; 10
    2360:	ff 87       	std	Y+15, r31	; 0x0f
    2362:	ed 85       	ldd	r30, Y+13	; 0x0d
    2364:	fe 85       	ldd	r31, Y+14	; 0x0e
    2366:	00 80       	ld	r0, Z
    2368:	8d 85       	ldd	r24, Y+13	; 0x0d
    236a:	9e 85       	ldd	r25, Y+14	; 0x0e
    236c:	01 96       	adiw	r24, 0x01	; 1
    236e:	9e 87       	std	Y+14, r25	; 0x0e
    2370:	8d 87       	std	Y+13, r24	; 0x0d
    2372:	eb 85       	ldd	r30, Y+11	; 0x0b
    2374:	fc 85       	ldd	r31, Y+12	; 0x0c
    2376:	00 82       	st	Z, r0
    2378:	8b 85       	ldd	r24, Y+11	; 0x0b
    237a:	9c 85       	ldd	r25, Y+12	; 0x0c
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	9c 87       	std	Y+12, r25	; 0x0c
    2380:	8b 87       	std	Y+11, r24	; 0x0b
    2382:	9f 85       	ldd	r25, Y+15	; 0x0f
    2384:	91 50       	subi	r25, 0x01	; 1
    2386:	9f 87       	std	Y+15, r25	; 0x0f
    2388:	ef 85       	ldd	r30, Y+15	; 0x0f
    238a:	ee 23       	and	r30, r30
    238c:	51 f7       	brne	.-44     	; 0x2362 <ALERT_Screen+0x48>
	Timer0_init(&TIMER_Config); /* initialize TIMER0 driver */
    238e:	ce 01       	movw	r24, r28
    2390:	01 96       	adiw	r24, 0x01	; 1
    2392:	0e 94 8c 1b 	call	0x3718	; 0x3718 <Timer0_init>

	//ALERT_Tick_Processing();
	timer_setCallBack(ALERT_Tick_Processing);
    2396:	83 ea       	ldi	r24, 0xA3	; 163
    2398:	95 e0       	ldi	r25, 0x05	; 5
    239a:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <timer_setCallBack>
}
    239e:	2f 96       	adiw	r28, 0x0f	; 15
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <DOOR_Screen>:
/*
 * Description : Function to display a message for 33 Seconds that the motor mode activated.
 *
 */
void DOOR_Screen(void)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	2f 97       	sbiw	r28, 0x0f	; 15
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
	/* Display this string "DOOR MODE.." on LCD */
	LCD_clearScreen();
    23c4:	0e 94 1c 1b 	call	0x3638	; 0x3638 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,12,"DOOR MODE..");
    23c8:	23 e5       	ldi	r18, 0x53	; 83
    23ca:	31 e0       	ldi	r19, 0x01	; 1
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	6c e0       	ldi	r22, 0x0C	; 12
    23d0:	a9 01       	movw	r20, r18
    23d2:	0e 94 e0 1a 	call	0x35c0	; 0x35c0 <LCD_displayStringRowColumn>

	TIMER_ConfigType TIMER_Config2 = {0,0,F_CPU_1024,OVERFLOW};
    23d6:	ce 01       	movw	r24, r28
    23d8:	01 96       	adiw	r24, 0x01	; 1
    23da:	9c 87       	std	Y+12, r25	; 0x0c
    23dc:	8b 87       	std	Y+11, r24	; 0x0b
    23de:	e1 e7       	ldi	r30, 0x71	; 113
    23e0:	f1 e0       	ldi	r31, 0x01	; 1
    23e2:	fe 87       	std	Y+14, r31	; 0x0e
    23e4:	ed 87       	std	Y+13, r30	; 0x0d
    23e6:	fa e0       	ldi	r31, 0x0A	; 10
    23e8:	ff 87       	std	Y+15, r31	; 0x0f
    23ea:	ed 85       	ldd	r30, Y+13	; 0x0d
    23ec:	fe 85       	ldd	r31, Y+14	; 0x0e
    23ee:	00 80       	ld	r0, Z
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	9e 87       	std	Y+14, r25	; 0x0e
    23f8:	8d 87       	std	Y+13, r24	; 0x0d
    23fa:	eb 85       	ldd	r30, Y+11	; 0x0b
    23fc:	fc 85       	ldd	r31, Y+12	; 0x0c
    23fe:	00 82       	st	Z, r0
    2400:	8b 85       	ldd	r24, Y+11	; 0x0b
    2402:	9c 85       	ldd	r25, Y+12	; 0x0c
    2404:	01 96       	adiw	r24, 0x01	; 1
    2406:	9c 87       	std	Y+12, r25	; 0x0c
    2408:	8b 87       	std	Y+11, r24	; 0x0b
    240a:	9f 85       	ldd	r25, Y+15	; 0x0f
    240c:	91 50       	subi	r25, 0x01	; 1
    240e:	9f 87       	std	Y+15, r25	; 0x0f
    2410:	ef 85       	ldd	r30, Y+15	; 0x0f
    2412:	ee 23       	and	r30, r30
    2414:	51 f7       	brne	.-44     	; 0x23ea <DOOR_Screen+0x3a>
	Timer0_init(&TIMER_Config2); /* initialize TIMER0 driver */
    2416:	ce 01       	movw	r24, r28
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	0e 94 8c 1b 	call	0x3718	; 0x3718 <Timer0_init>

	//DOOR_Tick_Processing();
	timer_setCallBack(DOOR_Tick_Processing);
    241e:	85 ec       	ldi	r24, 0xC5	; 197
    2420:	95 e0       	ldi	r25, 0x05	; 5
    2422:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <timer_setCallBack>
}
    2426:	2f 96       	adiw	r28, 0x0f	; 15
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <Empty_Array>:
/*
 * Description : Function to clear check_password array.
 *
 */
void Empty_Array(void)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	0f 92       	push	r0
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
	uint8 i;
	for(i = 0; i < PASSWORD_ARRAY_SIZE; i++)
    2442:	19 82       	std	Y+1, r1	; 0x01
    2444:	0a c0       	rjmp	.+20     	; 0x245a <Empty_Array+0x22>
	{
		check_password[i] = 0;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	88 2f       	mov	r24, r24
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	fc 01       	movw	r30, r24
    244e:	e5 57       	subi	r30, 0x75	; 117
    2450:	fe 4f       	sbci	r31, 0xFE	; 254
    2452:	10 82       	st	Z, r1
 *
 */
void Empty_Array(void)
{
	uint8 i;
	for(i = 0; i < PASSWORD_ARRAY_SIZE; i++)
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	8f 5f       	subi	r24, 0xFF	; 255
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	85 30       	cpi	r24, 0x05	; 5
    245e:	98 f3       	brcs	.-26     	; 0x2446 <Empty_Array+0xe>
	{
		check_password[i] = 0;
	}
}
    2460:	0f 90       	pop	r0
    2462:	cf 91       	pop	r28
    2464:	df 91       	pop	r29
    2466:	08 95       	ret

00002468 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    2468:	df 93       	push	r29
    246a:	cf 93       	push	r28
    246c:	00 d0       	rcall	.+0      	; 0x246e <GPIO_setupPinDirection+0x6>
    246e:	00 d0       	rcall	.+0      	; 0x2470 <GPIO_setupPinDirection+0x8>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	89 83       	std	Y+1, r24	; 0x01
    2478:	6a 83       	std	Y+2, r22	; 0x02
    247a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    247c:	8a 81       	ldd	r24, Y+2	; 0x02
    247e:	88 30       	cpi	r24, 0x08	; 8
    2480:	08 f0       	brcs	.+2      	; 0x2484 <GPIO_setupPinDirection+0x1c>
    2482:	d5 c0       	rjmp	.+426    	; 0x262e <GPIO_setupPinDirection+0x1c6>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	84 30       	cpi	r24, 0x04	; 4
    2488:	08 f0       	brcs	.+2      	; 0x248c <GPIO_setupPinDirection+0x24>
    248a:	d1 c0       	rjmp	.+418    	; 0x262e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	3d 83       	std	Y+5, r19	; 0x05
    2494:	2c 83       	std	Y+4, r18	; 0x04
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	81 30       	cpi	r24, 0x01	; 1
    249c:	91 05       	cpc	r25, r1
    249e:	09 f4       	brne	.+2      	; 0x24a2 <GPIO_setupPinDirection+0x3a>
    24a0:	43 c0       	rjmp	.+134    	; 0x2528 <GPIO_setupPinDirection+0xc0>
    24a2:	2c 81       	ldd	r18, Y+4	; 0x04
    24a4:	3d 81       	ldd	r19, Y+5	; 0x05
    24a6:	22 30       	cpi	r18, 0x02	; 2
    24a8:	31 05       	cpc	r19, r1
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <GPIO_setupPinDirection+0x4e>
    24ac:	8c 81       	ldd	r24, Y+4	; 0x04
    24ae:	9d 81       	ldd	r25, Y+5	; 0x05
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	71 f0       	breq	.+28     	; 0x24d0 <GPIO_setupPinDirection+0x68>
    24b4:	bc c0       	rjmp	.+376    	; 0x262e <GPIO_setupPinDirection+0x1c6>
    24b6:	2c 81       	ldd	r18, Y+4	; 0x04
    24b8:	3d 81       	ldd	r19, Y+5	; 0x05
    24ba:	22 30       	cpi	r18, 0x02	; 2
    24bc:	31 05       	cpc	r19, r1
    24be:	09 f4       	brne	.+2      	; 0x24c2 <GPIO_setupPinDirection+0x5a>
    24c0:	5f c0       	rjmp	.+190    	; 0x2580 <GPIO_setupPinDirection+0x118>
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	9d 81       	ldd	r25, Y+5	; 0x05
    24c6:	83 30       	cpi	r24, 0x03	; 3
    24c8:	91 05       	cpc	r25, r1
    24ca:	09 f4       	brne	.+2      	; 0x24ce <GPIO_setupPinDirection+0x66>
    24cc:	85 c0       	rjmp	.+266    	; 0x25d8 <GPIO_setupPinDirection+0x170>
    24ce:	af c0       	rjmp	.+350    	; 0x262e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	81 30       	cpi	r24, 0x01	; 1
    24d4:	a1 f4       	brne	.+40     	; 0x24fe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    24d6:	aa e3       	ldi	r26, 0x3A	; 58
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	ea e3       	ldi	r30, 0x3A	; 58
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	80 81       	ld	r24, Z
    24e0:	48 2f       	mov	r20, r24
    24e2:	8a 81       	ldd	r24, Y+2	; 0x02
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	02 2e       	mov	r0, r18
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <GPIO_setupPinDirection+0x8c>
    24f0:	88 0f       	add	r24, r24
    24f2:	99 1f       	adc	r25, r25
    24f4:	0a 94       	dec	r0
    24f6:	e2 f7       	brpl	.-8      	; 0x24f0 <GPIO_setupPinDirection+0x88>
    24f8:	84 2b       	or	r24, r20
    24fa:	8c 93       	st	X, r24
    24fc:	98 c0       	rjmp	.+304    	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    24fe:	aa e3       	ldi	r26, 0x3A	; 58
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	ea e3       	ldi	r30, 0x3A	; 58
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	48 2f       	mov	r20, r24
    250a:	8a 81       	ldd	r24, Y+2	; 0x02
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	02 2e       	mov	r0, r18
    2516:	02 c0       	rjmp	.+4      	; 0x251c <GPIO_setupPinDirection+0xb4>
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	0a 94       	dec	r0
    251e:	e2 f7       	brpl	.-8      	; 0x2518 <GPIO_setupPinDirection+0xb0>
    2520:	80 95       	com	r24
    2522:	84 23       	and	r24, r20
    2524:	8c 93       	st	X, r24
    2526:	83 c0       	rjmp	.+262    	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2528:	8b 81       	ldd	r24, Y+3	; 0x03
    252a:	81 30       	cpi	r24, 0x01	; 1
    252c:	a1 f4       	brne	.+40     	; 0x2556 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    252e:	a7 e3       	ldi	r26, 0x37	; 55
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e7 e3       	ldi	r30, 0x37	; 55
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	48 2f       	mov	r20, r24
    253a:	8a 81       	ldd	r24, Y+2	; 0x02
    253c:	28 2f       	mov	r18, r24
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	02 2e       	mov	r0, r18
    2546:	02 c0       	rjmp	.+4      	; 0x254c <GPIO_setupPinDirection+0xe4>
    2548:	88 0f       	add	r24, r24
    254a:	99 1f       	adc	r25, r25
    254c:	0a 94       	dec	r0
    254e:	e2 f7       	brpl	.-8      	; 0x2548 <GPIO_setupPinDirection+0xe0>
    2550:	84 2b       	or	r24, r20
    2552:	8c 93       	st	X, r24
    2554:	6c c0       	rjmp	.+216    	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    2556:	a7 e3       	ldi	r26, 0x37	; 55
    2558:	b0 e0       	ldi	r27, 0x00	; 0
    255a:	e7 e3       	ldi	r30, 0x37	; 55
    255c:	f0 e0       	ldi	r31, 0x00	; 0
    255e:	80 81       	ld	r24, Z
    2560:	48 2f       	mov	r20, r24
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	28 2f       	mov	r18, r24
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	02 2e       	mov	r0, r18
    256e:	02 c0       	rjmp	.+4      	; 0x2574 <GPIO_setupPinDirection+0x10c>
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	0a 94       	dec	r0
    2576:	e2 f7       	brpl	.-8      	; 0x2570 <GPIO_setupPinDirection+0x108>
    2578:	80 95       	com	r24
    257a:	84 23       	and	r24, r20
    257c:	8c 93       	st	X, r24
    257e:	57 c0       	rjmp	.+174    	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2580:	8b 81       	ldd	r24, Y+3	; 0x03
    2582:	81 30       	cpi	r24, 0x01	; 1
    2584:	a1 f4       	brne	.+40     	; 0x25ae <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    2586:	a4 e3       	ldi	r26, 0x34	; 52
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e4 e3       	ldi	r30, 0x34	; 52
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	48 2f       	mov	r20, r24
    2592:	8a 81       	ldd	r24, Y+2	; 0x02
    2594:	28 2f       	mov	r18, r24
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 2e       	mov	r0, r18
    259e:	02 c0       	rjmp	.+4      	; 0x25a4 <GPIO_setupPinDirection+0x13c>
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	0a 94       	dec	r0
    25a6:	e2 f7       	brpl	.-8      	; 0x25a0 <GPIO_setupPinDirection+0x138>
    25a8:	84 2b       	or	r24, r20
    25aa:	8c 93       	st	X, r24
    25ac:	40 c0       	rjmp	.+128    	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    25ae:	a4 e3       	ldi	r26, 0x34	; 52
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e4 e3       	ldi	r30, 0x34	; 52
    25b4:	f0 e0       	ldi	r31, 0x00	; 0
    25b6:	80 81       	ld	r24, Z
    25b8:	48 2f       	mov	r20, r24
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	02 2e       	mov	r0, r18
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <GPIO_setupPinDirection+0x164>
    25c8:	88 0f       	add	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	0a 94       	dec	r0
    25ce:	e2 f7       	brpl	.-8      	; 0x25c8 <GPIO_setupPinDirection+0x160>
    25d0:	80 95       	com	r24
    25d2:	84 23       	and	r24, r20
    25d4:	8c 93       	st	X, r24
    25d6:	2b c0       	rjmp	.+86     	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	a1 f4       	brne	.+40     	; 0x2606 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    25de:	a1 e3       	ldi	r26, 0x31	; 49
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	e1 e3       	ldi	r30, 0x31	; 49
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	48 2f       	mov	r20, r24
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	28 2f       	mov	r18, r24
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	02 2e       	mov	r0, r18
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <GPIO_setupPinDirection+0x194>
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <GPIO_setupPinDirection+0x190>
    2600:	84 2b       	or	r24, r20
    2602:	8c 93       	st	X, r24
    2604:	14 c0       	rjmp	.+40     	; 0x262e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2606:	a1 e3       	ldi	r26, 0x31	; 49
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e1 e3       	ldi	r30, 0x31	; 49
    260c:	f0 e0       	ldi	r31, 0x00	; 0
    260e:	80 81       	ld	r24, Z
    2610:	48 2f       	mov	r20, r24
    2612:	8a 81       	ldd	r24, Y+2	; 0x02
    2614:	28 2f       	mov	r18, r24
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	02 2e       	mov	r0, r18
    261e:	02 c0       	rjmp	.+4      	; 0x2624 <GPIO_setupPinDirection+0x1bc>
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	0a 94       	dec	r0
    2626:	e2 f7       	brpl	.-8      	; 0x2620 <GPIO_setupPinDirection+0x1b8>
    2628:	80 95       	com	r24
    262a:	84 23       	and	r24, r20
    262c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	cf 91       	pop	r28
    263a:	df 91       	pop	r29
    263c:	08 95       	ret

0000263e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	00 d0       	rcall	.+0      	; 0x2644 <GPIO_writePin+0x6>
    2644:	00 d0       	rcall	.+0      	; 0x2646 <GPIO_writePin+0x8>
    2646:	0f 92       	push	r0
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	6a 83       	std	Y+2, r22	; 0x02
    2650:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	88 30       	cpi	r24, 0x08	; 8
    2656:	08 f0       	brcs	.+2      	; 0x265a <GPIO_writePin+0x1c>
    2658:	d5 c0       	rjmp	.+426    	; 0x2804 <GPIO_writePin+0x1c6>
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	84 30       	cpi	r24, 0x04	; 4
    265e:	08 f0       	brcs	.+2      	; 0x2662 <GPIO_writePin+0x24>
    2660:	d1 c0       	rjmp	.+418    	; 0x2804 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	28 2f       	mov	r18, r24
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	3d 83       	std	Y+5, r19	; 0x05
    266a:	2c 83       	std	Y+4, r18	; 0x04
    266c:	8c 81       	ldd	r24, Y+4	; 0x04
    266e:	9d 81       	ldd	r25, Y+5	; 0x05
    2670:	81 30       	cpi	r24, 0x01	; 1
    2672:	91 05       	cpc	r25, r1
    2674:	09 f4       	brne	.+2      	; 0x2678 <GPIO_writePin+0x3a>
    2676:	43 c0       	rjmp	.+134    	; 0x26fe <GPIO_writePin+0xc0>
    2678:	2c 81       	ldd	r18, Y+4	; 0x04
    267a:	3d 81       	ldd	r19, Y+5	; 0x05
    267c:	22 30       	cpi	r18, 0x02	; 2
    267e:	31 05       	cpc	r19, r1
    2680:	2c f4       	brge	.+10     	; 0x268c <GPIO_writePin+0x4e>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	00 97       	sbiw	r24, 0x00	; 0
    2688:	71 f0       	breq	.+28     	; 0x26a6 <GPIO_writePin+0x68>
    268a:	bc c0       	rjmp	.+376    	; 0x2804 <GPIO_writePin+0x1c6>
    268c:	2c 81       	ldd	r18, Y+4	; 0x04
    268e:	3d 81       	ldd	r19, Y+5	; 0x05
    2690:	22 30       	cpi	r18, 0x02	; 2
    2692:	31 05       	cpc	r19, r1
    2694:	09 f4       	brne	.+2      	; 0x2698 <GPIO_writePin+0x5a>
    2696:	5f c0       	rjmp	.+190    	; 0x2756 <GPIO_writePin+0x118>
    2698:	8c 81       	ldd	r24, Y+4	; 0x04
    269a:	9d 81       	ldd	r25, Y+5	; 0x05
    269c:	83 30       	cpi	r24, 0x03	; 3
    269e:	91 05       	cpc	r25, r1
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <GPIO_writePin+0x66>
    26a2:	85 c0       	rjmp	.+266    	; 0x27ae <GPIO_writePin+0x170>
    26a4:	af c0       	rjmp	.+350    	; 0x2804 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	a1 f4       	brne	.+40     	; 0x26d4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    26ac:	ab e3       	ldi	r26, 0x3B	; 59
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	eb e3       	ldi	r30, 0x3B	; 59
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	48 2f       	mov	r20, r24
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	28 2f       	mov	r18, r24
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	02 2e       	mov	r0, r18
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <GPIO_writePin+0x8c>
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	0a 94       	dec	r0
    26cc:	e2 f7       	brpl	.-8      	; 0x26c6 <GPIO_writePin+0x88>
    26ce:	84 2b       	or	r24, r20
    26d0:	8c 93       	st	X, r24
    26d2:	98 c0       	rjmp	.+304    	; 0x2804 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    26d4:	ab e3       	ldi	r26, 0x3B	; 59
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	eb e3       	ldi	r30, 0x3B	; 59
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	48 2f       	mov	r20, r24
    26e0:	8a 81       	ldd	r24, Y+2	; 0x02
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	02 2e       	mov	r0, r18
    26ec:	02 c0       	rjmp	.+4      	; 0x26f2 <GPIO_writePin+0xb4>
    26ee:	88 0f       	add	r24, r24
    26f0:	99 1f       	adc	r25, r25
    26f2:	0a 94       	dec	r0
    26f4:	e2 f7       	brpl	.-8      	; 0x26ee <GPIO_writePin+0xb0>
    26f6:	80 95       	com	r24
    26f8:	84 23       	and	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	83 c0       	rjmp	.+262    	; 0x2804 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    26fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	a1 f4       	brne	.+40     	; 0x272c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2704:	a8 e3       	ldi	r26, 0x38	; 56
    2706:	b0 e0       	ldi	r27, 0x00	; 0
    2708:	e8 e3       	ldi	r30, 0x38	; 56
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	48 2f       	mov	r20, r24
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	28 2f       	mov	r18, r24
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	02 2e       	mov	r0, r18
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <GPIO_writePin+0xe4>
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	0a 94       	dec	r0
    2724:	e2 f7       	brpl	.-8      	; 0x271e <GPIO_writePin+0xe0>
    2726:	84 2b       	or	r24, r20
    2728:	8c 93       	st	X, r24
    272a:	6c c0       	rjmp	.+216    	; 0x2804 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    272c:	a8 e3       	ldi	r26, 0x38	; 56
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	e8 e3       	ldi	r30, 0x38	; 56
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	48 2f       	mov	r20, r24
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	02 2e       	mov	r0, r18
    2744:	02 c0       	rjmp	.+4      	; 0x274a <GPIO_writePin+0x10c>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	0a 94       	dec	r0
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <GPIO_writePin+0x108>
    274e:	80 95       	com	r24
    2750:	84 23       	and	r24, r20
    2752:	8c 93       	st	X, r24
    2754:	57 c0       	rjmp	.+174    	; 0x2804 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	a1 f4       	brne	.+40     	; 0x2784 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    275c:	a5 e3       	ldi	r26, 0x35	; 53
    275e:	b0 e0       	ldi	r27, 0x00	; 0
    2760:	e5 e3       	ldi	r30, 0x35	; 53
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	48 2f       	mov	r20, r24
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	02 2e       	mov	r0, r18
    2774:	02 c0       	rjmp	.+4      	; 0x277a <GPIO_writePin+0x13c>
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	0a 94       	dec	r0
    277c:	e2 f7       	brpl	.-8      	; 0x2776 <GPIO_writePin+0x138>
    277e:	84 2b       	or	r24, r20
    2780:	8c 93       	st	X, r24
    2782:	40 c0       	rjmp	.+128    	; 0x2804 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2784:	a5 e3       	ldi	r26, 0x35	; 53
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e5 e3       	ldi	r30, 0x35	; 53
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	48 2f       	mov	r20, r24
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	02 2e       	mov	r0, r18
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <GPIO_writePin+0x164>
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	0a 94       	dec	r0
    27a4:	e2 f7       	brpl	.-8      	; 0x279e <GPIO_writePin+0x160>
    27a6:	80 95       	com	r24
    27a8:	84 23       	and	r24, r20
    27aa:	8c 93       	st	X, r24
    27ac:	2b c0       	rjmp	.+86     	; 0x2804 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    27ae:	8b 81       	ldd	r24, Y+3	; 0x03
    27b0:	81 30       	cpi	r24, 0x01	; 1
    27b2:	a1 f4       	brne	.+40     	; 0x27dc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    27b4:	a2 e3       	ldi	r26, 0x32	; 50
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	e2 e3       	ldi	r30, 0x32	; 50
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	48 2f       	mov	r20, r24
    27c0:	8a 81       	ldd	r24, Y+2	; 0x02
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	02 2e       	mov	r0, r18
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <GPIO_writePin+0x194>
    27ce:	88 0f       	add	r24, r24
    27d0:	99 1f       	adc	r25, r25
    27d2:	0a 94       	dec	r0
    27d4:	e2 f7       	brpl	.-8      	; 0x27ce <GPIO_writePin+0x190>
    27d6:	84 2b       	or	r24, r20
    27d8:	8c 93       	st	X, r24
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    27dc:	a2 e3       	ldi	r26, 0x32	; 50
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	e2 e3       	ldi	r30, 0x32	; 50
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	48 2f       	mov	r20, r24
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	28 2f       	mov	r18, r24
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	02 2e       	mov	r0, r18
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <GPIO_writePin+0x1bc>
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	0a 94       	dec	r0
    27fc:	e2 f7       	brpl	.-8      	; 0x27f6 <GPIO_writePin+0x1b8>
    27fe:	80 95       	com	r24
    2800:	84 23       	and	r24, r20
    2802:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	0f 90       	pop	r0
    280e:	cf 91       	pop	r28
    2810:	df 91       	pop	r29
    2812:	08 95       	ret

00002814 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	00 d0       	rcall	.+0      	; 0x281a <GPIO_readPin+0x6>
    281a:	00 d0       	rcall	.+0      	; 0x281c <GPIO_readPin+0x8>
    281c:	0f 92       	push	r0
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	8a 83       	std	Y+2, r24	; 0x02
    2824:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2826:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2828:	8b 81       	ldd	r24, Y+3	; 0x03
    282a:	88 30       	cpi	r24, 0x08	; 8
    282c:	08 f0       	brcs	.+2      	; 0x2830 <GPIO_readPin+0x1c>
    282e:	84 c0       	rjmp	.+264    	; 0x2938 <GPIO_readPin+0x124>
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	84 30       	cpi	r24, 0x04	; 4
    2834:	08 f0       	brcs	.+2      	; 0x2838 <GPIO_readPin+0x24>
    2836:	80 c0       	rjmp	.+256    	; 0x2938 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	28 2f       	mov	r18, r24
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	3d 83       	std	Y+5, r19	; 0x05
    2840:	2c 83       	std	Y+4, r18	; 0x04
    2842:	4c 81       	ldd	r20, Y+4	; 0x04
    2844:	5d 81       	ldd	r21, Y+5	; 0x05
    2846:	41 30       	cpi	r20, 0x01	; 1
    2848:	51 05       	cpc	r21, r1
    284a:	79 f1       	breq	.+94     	; 0x28aa <GPIO_readPin+0x96>
    284c:	8c 81       	ldd	r24, Y+4	; 0x04
    284e:	9d 81       	ldd	r25, Y+5	; 0x05
    2850:	82 30       	cpi	r24, 0x02	; 2
    2852:	91 05       	cpc	r25, r1
    2854:	34 f4       	brge	.+12     	; 0x2862 <GPIO_readPin+0x4e>
    2856:	2c 81       	ldd	r18, Y+4	; 0x04
    2858:	3d 81       	ldd	r19, Y+5	; 0x05
    285a:	21 15       	cp	r18, r1
    285c:	31 05       	cpc	r19, r1
    285e:	69 f0       	breq	.+26     	; 0x287a <GPIO_readPin+0x66>
    2860:	6b c0       	rjmp	.+214    	; 0x2938 <GPIO_readPin+0x124>
    2862:	4c 81       	ldd	r20, Y+4	; 0x04
    2864:	5d 81       	ldd	r21, Y+5	; 0x05
    2866:	42 30       	cpi	r20, 0x02	; 2
    2868:	51 05       	cpc	r21, r1
    286a:	b9 f1       	breq	.+110    	; 0x28da <GPIO_readPin+0xc6>
    286c:	8c 81       	ldd	r24, Y+4	; 0x04
    286e:	9d 81       	ldd	r25, Y+5	; 0x05
    2870:	83 30       	cpi	r24, 0x03	; 3
    2872:	91 05       	cpc	r25, r1
    2874:	09 f4       	brne	.+2      	; 0x2878 <GPIO_readPin+0x64>
    2876:	49 c0       	rjmp	.+146    	; 0x290a <GPIO_readPin+0xf6>
    2878:	5f c0       	rjmp	.+190    	; 0x2938 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    287a:	e9 e3       	ldi	r30, 0x39	; 57
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	28 2f       	mov	r18, r24
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	88 2f       	mov	r24, r24
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a9 01       	movw	r20, r18
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <GPIO_readPin+0x7e>
    288e:	55 95       	asr	r21
    2890:	47 95       	ror	r20
    2892:	8a 95       	dec	r24
    2894:	e2 f7       	brpl	.-8      	; 0x288e <GPIO_readPin+0x7a>
    2896:	ca 01       	movw	r24, r20
    2898:	81 70       	andi	r24, 0x01	; 1
    289a:	90 70       	andi	r25, 0x00	; 0
    289c:	88 23       	and	r24, r24
    289e:	19 f0       	breq	.+6      	; 0x28a6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	49 c0       	rjmp	.+146    	; 0x2938 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28a6:	19 82       	std	Y+1, r1	; 0x01
    28a8:	47 c0       	rjmp	.+142    	; 0x2938 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    28aa:	e6 e3       	ldi	r30, 0x36	; 54
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	28 2f       	mov	r18, r24
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	8b 81       	ldd	r24, Y+3	; 0x03
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	a9 01       	movw	r20, r18
    28bc:	02 c0       	rjmp	.+4      	; 0x28c2 <GPIO_readPin+0xae>
    28be:	55 95       	asr	r21
    28c0:	47 95       	ror	r20
    28c2:	8a 95       	dec	r24
    28c4:	e2 f7       	brpl	.-8      	; 0x28be <GPIO_readPin+0xaa>
    28c6:	ca 01       	movw	r24, r20
    28c8:	81 70       	andi	r24, 0x01	; 1
    28ca:	90 70       	andi	r25, 0x00	; 0
    28cc:	88 23       	and	r24, r24
    28ce:	19 f0       	breq	.+6      	; 0x28d6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	31 c0       	rjmp	.+98     	; 0x2938 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    28d6:	19 82       	std	Y+1, r1	; 0x01
    28d8:	2f c0       	rjmp	.+94     	; 0x2938 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    28da:	e3 e3       	ldi	r30, 0x33	; 51
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	80 81       	ld	r24, Z
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	a9 01       	movw	r20, r18
    28ec:	02 c0       	rjmp	.+4      	; 0x28f2 <GPIO_readPin+0xde>
    28ee:	55 95       	asr	r21
    28f0:	47 95       	ror	r20
    28f2:	8a 95       	dec	r24
    28f4:	e2 f7       	brpl	.-8      	; 0x28ee <GPIO_readPin+0xda>
    28f6:	ca 01       	movw	r24, r20
    28f8:	81 70       	andi	r24, 0x01	; 1
    28fa:	90 70       	andi	r25, 0x00	; 0
    28fc:	88 23       	and	r24, r24
    28fe:	19 f0       	breq	.+6      	; 0x2906 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	19 c0       	rjmp	.+50     	; 0x2938 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2906:	19 82       	std	Y+1, r1	; 0x01
    2908:	17 c0       	rjmp	.+46     	; 0x2938 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    290a:	e0 e3       	ldi	r30, 0x30	; 48
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a9 01       	movw	r20, r18
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <GPIO_readPin+0x10e>
    291e:	55 95       	asr	r21
    2920:	47 95       	ror	r20
    2922:	8a 95       	dec	r24
    2924:	e2 f7       	brpl	.-8      	; 0x291e <GPIO_readPin+0x10a>
    2926:	ca 01       	movw	r24, r20
    2928:	81 70       	andi	r24, 0x01	; 1
    292a:	90 70       	andi	r25, 0x00	; 0
    292c:	88 23       	and	r24, r24
    292e:	19 f0       	breq	.+6      	; 0x2936 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	01 c0       	rjmp	.+2      	; 0x2938 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2936:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2938:	89 81       	ldd	r24, Y+1	; 0x01
}
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	00 d0       	rcall	.+0      	; 0x2950 <GPIO_setupPortDirection+0x6>
    2950:	00 d0       	rcall	.+0      	; 0x2952 <GPIO_setupPortDirection+0x8>
    2952:	cd b7       	in	r28, 0x3d	; 61
    2954:	de b7       	in	r29, 0x3e	; 62
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	84 30       	cpi	r24, 0x04	; 4
    295e:	90 f5       	brcc	.+100    	; 0x29c4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2960:	89 81       	ldd	r24, Y+1	; 0x01
    2962:	28 2f       	mov	r18, r24
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	3c 83       	std	Y+4, r19	; 0x04
    2968:	2b 83       	std	Y+3, r18	; 0x03
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	81 30       	cpi	r24, 0x01	; 1
    2970:	91 05       	cpc	r25, r1
    2972:	d1 f0       	breq	.+52     	; 0x29a8 <GPIO_setupPortDirection+0x5e>
    2974:	2b 81       	ldd	r18, Y+3	; 0x03
    2976:	3c 81       	ldd	r19, Y+4	; 0x04
    2978:	22 30       	cpi	r18, 0x02	; 2
    297a:	31 05       	cpc	r19, r1
    297c:	2c f4       	brge	.+10     	; 0x2988 <GPIO_setupPortDirection+0x3e>
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	00 97       	sbiw	r24, 0x00	; 0
    2984:	61 f0       	breq	.+24     	; 0x299e <GPIO_setupPortDirection+0x54>
    2986:	1e c0       	rjmp	.+60     	; 0x29c4 <GPIO_setupPortDirection+0x7a>
    2988:	2b 81       	ldd	r18, Y+3	; 0x03
    298a:	3c 81       	ldd	r19, Y+4	; 0x04
    298c:	22 30       	cpi	r18, 0x02	; 2
    298e:	31 05       	cpc	r19, r1
    2990:	81 f0       	breq	.+32     	; 0x29b2 <GPIO_setupPortDirection+0x68>
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	83 30       	cpi	r24, 0x03	; 3
    2998:	91 05       	cpc	r25, r1
    299a:	81 f0       	breq	.+32     	; 0x29bc <GPIO_setupPortDirection+0x72>
    299c:	13 c0       	rjmp	.+38     	; 0x29c4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    299e:	ea e3       	ldi	r30, 0x3A	; 58
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	80 83       	st	Z, r24
    29a6:	0e c0       	rjmp	.+28     	; 0x29c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    29a8:	e7 e3       	ldi	r30, 0x37	; 55
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	80 83       	st	Z, r24
    29b0:	09 c0       	rjmp	.+18     	; 0x29c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    29b2:	e4 e3       	ldi	r30, 0x34	; 52
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	8a 81       	ldd	r24, Y+2	; 0x02
    29b8:	80 83       	st	Z, r24
    29ba:	04 c0       	rjmp	.+8      	; 0x29c4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    29bc:	e1 e3       	ldi	r30, 0x31	; 49
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	80 83       	st	Z, r24
			break;
		}
	}
}
    29c4:	0f 90       	pop	r0
    29c6:	0f 90       	pop	r0
    29c8:	0f 90       	pop	r0
    29ca:	0f 90       	pop	r0
    29cc:	cf 91       	pop	r28
    29ce:	df 91       	pop	r29
    29d0:	08 95       	ret

000029d2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    29d2:	df 93       	push	r29
    29d4:	cf 93       	push	r28
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <GPIO_writePort+0x6>
    29d8:	00 d0       	rcall	.+0      	; 0x29da <GPIO_writePort+0x8>
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	84 30       	cpi	r24, 0x04	; 4
    29e6:	90 f5       	brcc	.+100    	; 0x2a4c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	28 2f       	mov	r18, r24
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	3c 83       	std	Y+4, r19	; 0x04
    29f0:	2b 83       	std	Y+3, r18	; 0x03
    29f2:	8b 81       	ldd	r24, Y+3	; 0x03
    29f4:	9c 81       	ldd	r25, Y+4	; 0x04
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	91 05       	cpc	r25, r1
    29fa:	d1 f0       	breq	.+52     	; 0x2a30 <GPIO_writePort+0x5e>
    29fc:	2b 81       	ldd	r18, Y+3	; 0x03
    29fe:	3c 81       	ldd	r19, Y+4	; 0x04
    2a00:	22 30       	cpi	r18, 0x02	; 2
    2a02:	31 05       	cpc	r19, r1
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <GPIO_writePort+0x3e>
    2a06:	8b 81       	ldd	r24, Y+3	; 0x03
    2a08:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0a:	00 97       	sbiw	r24, 0x00	; 0
    2a0c:	61 f0       	breq	.+24     	; 0x2a26 <GPIO_writePort+0x54>
    2a0e:	1e c0       	rjmp	.+60     	; 0x2a4c <GPIO_writePort+0x7a>
    2a10:	2b 81       	ldd	r18, Y+3	; 0x03
    2a12:	3c 81       	ldd	r19, Y+4	; 0x04
    2a14:	22 30       	cpi	r18, 0x02	; 2
    2a16:	31 05       	cpc	r19, r1
    2a18:	81 f0       	breq	.+32     	; 0x2a3a <GPIO_writePort+0x68>
    2a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1e:	83 30       	cpi	r24, 0x03	; 3
    2a20:	91 05       	cpc	r25, r1
    2a22:	81 f0       	breq	.+32     	; 0x2a44 <GPIO_writePort+0x72>
    2a24:	13 c0       	rjmp	.+38     	; 0x2a4c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2a26:	eb e3       	ldi	r30, 0x3B	; 59
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	80 83       	st	Z, r24
    2a2e:	0e c0       	rjmp	.+28     	; 0x2a4c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2a30:	e8 e3       	ldi	r30, 0x38	; 56
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	80 83       	st	Z, r24
    2a38:	09 c0       	rjmp	.+18     	; 0x2a4c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2a3a:	e5 e3       	ldi	r30, 0x35	; 53
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a40:	80 83       	st	Z, r24
    2a42:	04 c0       	rjmp	.+8      	; 0x2a4c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2a44:	e2 e3       	ldi	r30, 0x32	; 50
    2a46:	f0 e0       	ldi	r31, 0x00	; 0
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	80 83       	st	Z, r24
			break;
		}
	}
}
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
    2a50:	0f 90       	pop	r0
    2a52:	0f 90       	pop	r0
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	00 d0       	rcall	.+0      	; 0x2a60 <GPIO_readPort+0x6>
    2a60:	00 d0       	rcall	.+0      	; 0x2a62 <GPIO_readPort+0x8>
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    2a66:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2a68:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	84 30       	cpi	r24, 0x04	; 4
    2a6e:	90 f5       	brcc	.+100    	; 0x2ad4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2a70:	8a 81       	ldd	r24, Y+2	; 0x02
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	3c 83       	std	Y+4, r19	; 0x04
    2a78:	2b 83       	std	Y+3, r18	; 0x03
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	91 05       	cpc	r25, r1
    2a82:	d1 f0       	breq	.+52     	; 0x2ab8 <GPIO_readPort+0x5e>
    2a84:	2b 81       	ldd	r18, Y+3	; 0x03
    2a86:	3c 81       	ldd	r19, Y+4	; 0x04
    2a88:	22 30       	cpi	r18, 0x02	; 2
    2a8a:	31 05       	cpc	r19, r1
    2a8c:	2c f4       	brge	.+10     	; 0x2a98 <GPIO_readPort+0x3e>
    2a8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a90:	9c 81       	ldd	r25, Y+4	; 0x04
    2a92:	00 97       	sbiw	r24, 0x00	; 0
    2a94:	61 f0       	breq	.+24     	; 0x2aae <GPIO_readPort+0x54>
    2a96:	1e c0       	rjmp	.+60     	; 0x2ad4 <GPIO_readPort+0x7a>
    2a98:	2b 81       	ldd	r18, Y+3	; 0x03
    2a9a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9c:	22 30       	cpi	r18, 0x02	; 2
    2a9e:	31 05       	cpc	r19, r1
    2aa0:	81 f0       	breq	.+32     	; 0x2ac2 <GPIO_readPort+0x68>
    2aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa6:	83 30       	cpi	r24, 0x03	; 3
    2aa8:	91 05       	cpc	r25, r1
    2aaa:	81 f0       	breq	.+32     	; 0x2acc <GPIO_readPort+0x72>
    2aac:	13 c0       	rjmp	.+38     	; 0x2ad4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2aae:	e9 e3       	ldi	r30, 0x39	; 57
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	89 83       	std	Y+1, r24	; 0x01
    2ab6:	0e c0       	rjmp	.+28     	; 0x2ad4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2ab8:	e6 e3       	ldi	r30, 0x36	; 54
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	89 83       	std	Y+1, r24	; 0x01
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2ac2:	e3 e3       	ldi	r30, 0x33	; 51
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	04 c0       	rjmp	.+8      	; 0x2ad4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2acc:	e0 e3       	ldi	r30, 0x30	; 48
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	80 81       	ld	r24, Z
    2ad2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2ad4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	08 95       	ret

00002ae4 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	00 d0       	rcall	.+0      	; 0x2aea <KEYPAD_getPressedKey+0x6>
    2aea:	0f 92       	push	r0
    2aec:	cd b7       	in	r28, 0x3d	; 61
    2aee:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2af0:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2af2:	1b 82       	std	Y+3, r1	; 0x03
    2af4:	43 c0       	rjmp	.+134    	; 0x2b7c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	0e 94 a5 14 	call	0x294a	; 0x294a <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    2afe:	8b 81       	ldd	r24, Y+3	; 0x03
    2b00:	98 2f       	mov	r25, r24
    2b02:	9c 5f       	subi	r25, 0xFC	; 252
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	69 2f       	mov	r22, r25
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 34 12 	call	0x2468	; 0x2468 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	88 2f       	mov	r24, r24
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9c 01       	movw	r18, r24
    2b16:	2c 5f       	subi	r18, 0xFC	; 252
    2b18:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	02 c0       	rjmp	.+4      	; 0x2b24 <KEYPAD_getPressedKey+0x40>
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	2a 95       	dec	r18
    2b26:	e2 f7       	brpl	.-8      	; 0x2b20 <KEYPAD_getPressedKey+0x3c>
    2b28:	80 95       	com	r24
    2b2a:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	69 81       	ldd	r22, Y+1	; 0x01
    2b30:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2b34:	1a 82       	std	Y+2, r1	; 0x02
    2b36:	1c c0       	rjmp	.+56     	; 0x2b70 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    2b3c:	0e 94 0a 14 	call	0x2814	; 0x2814 <GPIO_readPin>
    2b40:	88 23       	and	r24, r24
    2b42:	99 f4       	brne	.+38     	; 0x2b6a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2b44:	8a 81       	ldd	r24, Y+2	; 0x02
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	98 2f       	mov	r25, r24
    2b54:	8b 81       	ldd	r24, Y+3	; 0x03
    2b56:	89 0f       	add	r24, r25
    2b58:	8f 5f       	subi	r24, 0xFF	; 255
    2b5a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	cf 91       	pop	r28
    2b66:	df 91       	pop	r29
    2b68:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	84 30       	cpi	r24, 0x04	; 4
    2b74:	08 f3       	brcs	.-62     	; 0x2b38 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2b76:	8b 81       	ldd	r24, Y+3	; 0x03
    2b78:	8f 5f       	subi	r24, 0xFF	; 255
    2b7a:	8b 83       	std	Y+3, r24	; 0x03
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	84 30       	cpi	r24, 0x04	; 4
    2b80:	08 f4       	brcc	.+2      	; 0x2b84 <KEYPAD_getPressedKey+0xa0>
    2b82:	b9 cf       	rjmp	.-142    	; 0x2af6 <KEYPAD_getPressedKey+0x12>
    2b84:	b6 cf       	rjmp	.-148    	; 0x2af2 <KEYPAD_getPressedKey+0xe>

00002b86 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <KEYPAD_4x4_adjustKeyNumber+0x6>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <KEYPAD_4x4_adjustKeyNumber+0x8>
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
    2b92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2b94:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	28 2f       	mov	r18, r24
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	3c 83       	std	Y+4, r19	; 0x04
    2b9e:	2b 83       	std	Y+3, r18	; 0x03
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba4:	88 30       	cpi	r24, 0x08	; 8
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <KEYPAD_4x4_adjustKeyNumber+0x26>
    2baa:	70 c0       	rjmp	.+224    	; 0x2c8c <KEYPAD_4x4_adjustKeyNumber+0x106>
    2bac:	2b 81       	ldd	r18, Y+3	; 0x03
    2bae:	3c 81       	ldd	r19, Y+4	; 0x04
    2bb0:	29 30       	cpi	r18, 0x09	; 9
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	5c f5       	brge	.+86     	; 0x2c0c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bba:	84 30       	cpi	r24, 0x04	; 4
    2bbc:	91 05       	cpc	r25, r1
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2bc0:	59 c0       	rjmp	.+178    	; 0x2c74 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2bc2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bc4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc6:	25 30       	cpi	r18, 0x05	; 5
    2bc8:	31 05       	cpc	r19, r1
    2bca:	9c f4       	brge	.+38     	; 0x2bf2 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2bcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bce:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd0:	82 30       	cpi	r24, 0x02	; 2
    2bd2:	91 05       	cpc	r25, r1
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2bd6:	48 c0       	rjmp	.+144    	; 0x2c68 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    2bda:	3c 81       	ldd	r19, Y+4	; 0x04
    2bdc:	23 30       	cpi	r18, 0x03	; 3
    2bde:	31 05       	cpc	r19, r1
    2be0:	0c f0       	brlt	.+2      	; 0x2be4 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2be2:	45 c0       	rjmp	.+138    	; 0x2c6e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2be4:	8b 81       	ldd	r24, Y+3	; 0x03
    2be6:	9c 81       	ldd	r25, Y+4	; 0x04
    2be8:	81 30       	cpi	r24, 0x01	; 1
    2bea:	91 05       	cpc	r25, r1
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2bee:	39 c0       	rjmp	.+114    	; 0x2c62 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2bf0:	67 c0       	rjmp	.+206    	; 0x2cc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2bf2:	2b 81       	ldd	r18, Y+3	; 0x03
    2bf4:	3c 81       	ldd	r19, Y+4	; 0x04
    2bf6:	26 30       	cpi	r18, 0x06	; 6
    2bf8:	31 05       	cpc	r19, r1
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <KEYPAD_4x4_adjustKeyNumber+0x78>
    2bfc:	41 c0       	rjmp	.+130    	; 0x2c80 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    2c00:	9c 81       	ldd	r25, Y+4	; 0x04
    2c02:	87 30       	cpi	r24, 0x07	; 7
    2c04:	91 05       	cpc	r25, r1
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2c08:	3e c0       	rjmp	.+124    	; 0x2c86 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2c0a:	37 c0       	rjmp	.+110    	; 0x2c7a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2c0c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c0e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c10:	2c 30       	cpi	r18, 0x0C	; 12
    2c12:	31 05       	cpc	r19, r1
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2c16:	46 c0       	rjmp	.+140    	; 0x2ca4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c1c:	8d 30       	cpi	r24, 0x0D	; 13
    2c1e:	91 05       	cpc	r25, r1
    2c20:	5c f4       	brge	.+22     	; 0x2c38 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2c22:	2b 81       	ldd	r18, Y+3	; 0x03
    2c24:	3c 81       	ldd	r19, Y+4	; 0x04
    2c26:	2a 30       	cpi	r18, 0x0A	; 10
    2c28:	31 05       	cpc	r19, r1
    2c2a:	b1 f1       	breq	.+108    	; 0x2c98 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c30:	8b 30       	cpi	r24, 0x0B	; 11
    2c32:	91 05       	cpc	r25, r1
    2c34:	a4 f5       	brge	.+104    	; 0x2c9e <KEYPAD_4x4_adjustKeyNumber+0x118>
    2c36:	2d c0       	rjmp	.+90     	; 0x2c92 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2c38:	2b 81       	ldd	r18, Y+3	; 0x03
    2c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c3c:	2e 30       	cpi	r18, 0x0E	; 14
    2c3e:	31 05       	cpc	r19, r1
    2c40:	b9 f1       	breq	.+110    	; 0x2cb0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	9c 81       	ldd	r25, Y+4	; 0x04
    2c46:	8e 30       	cpi	r24, 0x0E	; 14
    2c48:	91 05       	cpc	r25, r1
    2c4a:	7c f1       	brlt	.+94     	; 0x2caa <KEYPAD_4x4_adjustKeyNumber+0x124>
    2c4c:	2b 81       	ldd	r18, Y+3	; 0x03
    2c4e:	3c 81       	ldd	r19, Y+4	; 0x04
    2c50:	2f 30       	cpi	r18, 0x0F	; 15
    2c52:	31 05       	cpc	r19, r1
    2c54:	79 f1       	breq	.+94     	; 0x2cb4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	80 31       	cpi	r24, 0x10	; 16
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	69 f1       	breq	.+90     	; 0x2cba <KEYPAD_4x4_adjustKeyNumber+0x134>
    2c60:	2f c0       	rjmp	.+94     	; 0x2cc0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2c62:	87 e0       	ldi	r24, 0x07	; 7
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	2e c0       	rjmp	.+92     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2c68:	88 e0       	ldi	r24, 0x08	; 8
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	2b c0       	rjmp	.+86     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2c6e:	89 e0       	ldi	r24, 0x09	; 9
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	28 c0       	rjmp	.+80     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2c74:	85 e2       	ldi	r24, 0x25	; 37
    2c76:	89 83       	std	Y+1, r24	; 0x01
    2c78:	25 c0       	rjmp	.+74     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2c7a:	84 e0       	ldi	r24, 0x04	; 4
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	22 c0       	rjmp	.+68     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2c80:	85 e0       	ldi	r24, 0x05	; 5
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	1f c0       	rjmp	.+62     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2c86:	86 e0       	ldi	r24, 0x06	; 6
    2c88:	89 83       	std	Y+1, r24	; 0x01
    2c8a:	1c c0       	rjmp	.+56     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2c8c:	8a e2       	ldi	r24, 0x2A	; 42
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    2c90:	19 c0       	rjmp	.+50     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	16 c0       	rjmp	.+44     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	13 c0       	rjmp	.+38     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2c9e:	83 e0       	ldi	r24, 0x03	; 3
    2ca0:	89 83       	std	Y+1, r24	; 0x01
    2ca2:	10 c0       	rjmp	.+32     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2ca4:	8d e2       	ldi	r24, 0x2D	; 45
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    2ca8:	0d c0       	rjmp	.+26     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2caa:	8d e0       	ldi	r24, 0x0D	; 13
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	0a c0       	rjmp	.+20     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2cb0:	19 82       	std	Y+1, r1	; 0x01
    2cb2:	08 c0       	rjmp	.+16     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2cb4:	8d e3       	ldi	r24, 0x3D	; 61
    2cb6:	89 83       	std	Y+1, r24	; 0x01
    2cb8:	05 c0       	rjmp	.+10     	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2cba:	8b e2       	ldi	r24, 0x2B	; 43
    2cbc:	89 83       	std	Y+1, r24	; 0x01
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret

00002cd4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2cd4:	df 93       	push	r29
    2cd6:	cf 93       	push	r28
    2cd8:	cd b7       	in	r28, 0x3d	; 61
    2cda:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2cdc:	83 e0       	ldi	r24, 0x03	; 3
    2cde:	64 e0       	ldi	r22, 0x04	; 4
    2ce0:	41 e0       	ldi	r20, 0x01	; 1
    2ce2:	0e 94 34 12 	call	0x2468	; 0x2468 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2ce6:	83 e0       	ldi	r24, 0x03	; 3
    2ce8:	65 e0       	ldi	r22, 0x05	; 5
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	0e 94 34 12 	call	0x2468	; 0x2468 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2cf0:	83 e0       	ldi	r24, 0x03	; 3
    2cf2:	66 e0       	ldi	r22, 0x06	; 6
    2cf4:	41 e0       	ldi	r20, 0x01	; 1
    2cf6:	0e 94 34 12 	call	0x2468	; 0x2468 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	6f ef       	ldi	r22, 0xFF	; 255
    2cfe:	0e 94 a5 14 	call	0x294a	; 0x294a <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2d02:	88 e3       	ldi	r24, 0x38	; 56
    2d04:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2d08:	8c e0       	ldi	r24, 0x0C	; 12
    2d0a:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_sendCommand>
}
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2d1a:	df 93       	push	r29
    2d1c:	cf 93       	push	r28
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	e9 97       	sbiw	r28, 0x39	; 57
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	89 af       	std	Y+57, r24	; 0x39
	//uint8 lcd_port_value = 0;
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2d3a:	83 e0       	ldi	r24, 0x03	; 3
    2d3c:	65 e0       	ldi	r22, 0x05	; 5
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	a0 e8       	ldi	r26, 0x80	; 128
    2d4a:	bf e3       	ldi	r27, 0x3F	; 63
    2d4c:	8d ab       	std	Y+53, r24	; 0x35
    2d4e:	9e ab       	std	Y+54, r25	; 0x36
    2d50:	af ab       	std	Y+55, r26	; 0x37
    2d52:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d54:	6d a9       	ldd	r22, Y+53	; 0x35
    2d56:	7e a9       	ldd	r23, Y+54	; 0x36
    2d58:	8f a9       	ldd	r24, Y+55	; 0x37
    2d5a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d5c:	20 e0       	ldi	r18, 0x00	; 0
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	4a ef       	ldi	r20, 0xFA	; 250
    2d62:	54 e4       	ldi	r21, 0x44	; 68
    2d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	89 ab       	std	Y+49, r24	; 0x31
    2d6e:	9a ab       	std	Y+50, r25	; 0x32
    2d70:	ab ab       	std	Y+51, r26	; 0x33
    2d72:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d74:	69 a9       	ldd	r22, Y+49	; 0x31
    2d76:	7a a9       	ldd	r23, Y+50	; 0x32
    2d78:	8b a9       	ldd	r24, Y+51	; 0x33
    2d7a:	9c a9       	ldd	r25, Y+52	; 0x34
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e8       	ldi	r20, 0x80	; 128
    2d82:	5f e3       	ldi	r21, 0x3F	; 63
    2d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d88:	88 23       	and	r24, r24
    2d8a:	2c f4       	brge	.+10     	; 0x2d96 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	98 ab       	std	Y+48, r25	; 0x30
    2d92:	8f a7       	std	Y+47, r24	; 0x2f
    2d94:	3f c0       	rjmp	.+126    	; 0x2e14 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2d96:	69 a9       	ldd	r22, Y+49	; 0x31
    2d98:	7a a9       	ldd	r23, Y+50	; 0x32
    2d9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	3f ef       	ldi	r19, 0xFF	; 255
    2da2:	4f e7       	ldi	r20, 0x7F	; 127
    2da4:	57 e4       	ldi	r21, 0x47	; 71
    2da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2daa:	18 16       	cp	r1, r24
    2dac:	4c f5       	brge	.+82     	; 0x2e00 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dae:	6d a9       	ldd	r22, Y+53	; 0x35
    2db0:	7e a9       	ldd	r23, Y+54	; 0x36
    2db2:	8f a9       	ldd	r24, Y+55	; 0x37
    2db4:	98 ad       	ldd	r25, Y+56	; 0x38
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc2:	dc 01       	movw	r26, r24
    2dc4:	cb 01       	movw	r24, r22
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	98 ab       	std	Y+48, r25	; 0x30
    2dd4:	8f a7       	std	Y+47, r24	; 0x2f
    2dd6:	0f c0       	rjmp	.+30     	; 0x2df6 <LCD_sendCommand+0xdc>
    2dd8:	88 ec       	ldi	r24, 0xC8	; 200
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	9e a7       	std	Y+46, r25	; 0x2e
    2dde:	8d a7       	std	Y+45, r24	; 0x2d
    2de0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2de2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2de4:	01 97       	sbiw	r24, 0x01	; 1
    2de6:	f1 f7       	brne	.-4      	; 0x2de4 <LCD_sendCommand+0xca>
    2de8:	9e a7       	std	Y+46, r25	; 0x2e
    2dea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	8f a5       	ldd	r24, Y+47	; 0x2f
    2dee:	98 a9       	ldd	r25, Y+48	; 0x30
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	98 ab       	std	Y+48, r25	; 0x30
    2df4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2df8:	98 a9       	ldd	r25, Y+48	; 0x30
    2dfa:	00 97       	sbiw	r24, 0x00	; 0
    2dfc:	69 f7       	brne	.-38     	; 0x2dd8 <LCD_sendCommand+0xbe>
    2dfe:	14 c0       	rjmp	.+40     	; 0x2e28 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e00:	69 a9       	ldd	r22, Y+49	; 0x31
    2e02:	7a a9       	ldd	r23, Y+50	; 0x32
    2e04:	8b a9       	ldd	r24, Y+51	; 0x33
    2e06:	9c a9       	ldd	r25, Y+52	; 0x34
    2e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	98 ab       	std	Y+48, r25	; 0x30
    2e12:	8f a7       	std	Y+47, r24	; 0x2f
    2e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e16:	98 a9       	ldd	r25, Y+48	; 0x30
    2e18:	9c a7       	std	Y+44, r25	; 0x2c
    2e1a:	8b a7       	std	Y+43, r24	; 0x2b
    2e1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	f1 f7       	brne	.-4      	; 0x2e20 <LCD_sendCommand+0x106>
    2e24:	9c a7       	std	Y+44, r25	; 0x2c
    2e26:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	66 e0       	ldi	r22, 0x06	; 6
    2e2c:	41 e0       	ldi	r20, 0x01	; 1
    2e2e:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	a0 e8       	ldi	r26, 0x80	; 128
    2e38:	bf e3       	ldi	r27, 0x3F	; 63
    2e3a:	8f a3       	std	Y+39, r24	; 0x27
    2e3c:	98 a7       	std	Y+40, r25	; 0x28
    2e3e:	a9 a7       	std	Y+41, r26	; 0x29
    2e40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e42:	6f a1       	ldd	r22, Y+39	; 0x27
    2e44:	78 a5       	ldd	r23, Y+40	; 0x28
    2e46:	89 a5       	ldd	r24, Y+41	; 0x29
    2e48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	4a ef       	ldi	r20, 0xFA	; 250
    2e50:	54 e4       	ldi	r21, 0x44	; 68
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	8b a3       	std	Y+35, r24	; 0x23
    2e5c:	9c a3       	std	Y+36, r25	; 0x24
    2e5e:	ad a3       	std	Y+37, r26	; 0x25
    2e60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e62:	6b a1       	ldd	r22, Y+35	; 0x23
    2e64:	7c a1       	ldd	r23, Y+36	; 0x24
    2e66:	8d a1       	ldd	r24, Y+37	; 0x25
    2e68:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e76:	88 23       	and	r24, r24
    2e78:	2c f4       	brge	.+10     	; 0x2e84 <LCD_sendCommand+0x16a>
		__ticks = 1;
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	9a a3       	std	Y+34, r25	; 0x22
    2e80:	89 a3       	std	Y+33, r24	; 0x21
    2e82:	3f c0       	rjmp	.+126    	; 0x2f02 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2e84:	6b a1       	ldd	r22, Y+35	; 0x23
    2e86:	7c a1       	ldd	r23, Y+36	; 0x24
    2e88:	8d a1       	ldd	r24, Y+37	; 0x25
    2e8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	3f ef       	ldi	r19, 0xFF	; 255
    2e90:	4f e7       	ldi	r20, 0x7F	; 127
    2e92:	57 e4       	ldi	r21, 0x47	; 71
    2e94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e98:	18 16       	cp	r1, r24
    2e9a:	4c f5       	brge	.+82     	; 0x2eee <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e2       	ldi	r20, 0x20	; 32
    2eaa:	51 e4       	ldi	r21, 0x41	; 65
    2eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	bc 01       	movw	r22, r24
    2eb6:	cd 01       	movw	r24, r26
    2eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	9a a3       	std	Y+34, r25	; 0x22
    2ec2:	89 a3       	std	Y+33, r24	; 0x21
    2ec4:	0f c0       	rjmp	.+30     	; 0x2ee4 <LCD_sendCommand+0x1ca>
    2ec6:	88 ec       	ldi	r24, 0xC8	; 200
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	98 a3       	std	Y+32, r25	; 0x20
    2ecc:	8f 8f       	std	Y+31, r24	; 0x1f
    2ece:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ed0:	98 a1       	ldd	r25, Y+32	; 0x20
    2ed2:	01 97       	sbiw	r24, 0x01	; 1
    2ed4:	f1 f7       	brne	.-4      	; 0x2ed2 <LCD_sendCommand+0x1b8>
    2ed6:	98 a3       	std	Y+32, r25	; 0x20
    2ed8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eda:	89 a1       	ldd	r24, Y+33	; 0x21
    2edc:	9a a1       	ldd	r25, Y+34	; 0x22
    2ede:	01 97       	sbiw	r24, 0x01	; 1
    2ee0:	9a a3       	std	Y+34, r25	; 0x22
    2ee2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee4:	89 a1       	ldd	r24, Y+33	; 0x21
    2ee6:	9a a1       	ldd	r25, Y+34	; 0x22
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	69 f7       	brne	.-38     	; 0x2ec6 <LCD_sendCommand+0x1ac>
    2eec:	14 c0       	rjmp	.+40     	; 0x2f16 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eee:	6b a1       	ldd	r22, Y+35	; 0x23
    2ef0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ef2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ef4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9a a3       	std	Y+34, r25	; 0x22
    2f00:	89 a3       	std	Y+33, r24	; 0x21
    2f02:	89 a1       	ldd	r24, Y+33	; 0x21
    2f04:	9a a1       	ldd	r25, Y+34	; 0x22
    2f06:	9e 8f       	std	Y+30, r25	; 0x1e
    2f08:	8d 8f       	std	Y+29, r24	; 0x1d
    2f0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_sendCommand+0x1f4>
    2f12:	9e 8f       	std	Y+30, r25	; 0x1e
    2f14:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	69 ad       	ldd	r22, Y+57	; 0x39
    2f1a:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <GPIO_writePort>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	a0 e8       	ldi	r26, 0x80	; 128
    2f24:	bf e3       	ldi	r27, 0x3F	; 63
    2f26:	89 8f       	std	Y+25, r24	; 0x19
    2f28:	9a 8f       	std	Y+26, r25	; 0x1a
    2f2a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f36:	20 e0       	ldi	r18, 0x00	; 0
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	4a ef       	ldi	r20, 0xFA	; 250
    2f3c:	54 e4       	ldi	r21, 0x44	; 68
    2f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f42:	dc 01       	movw	r26, r24
    2f44:	cb 01       	movw	r24, r22
    2f46:	8d 8b       	std	Y+21, r24	; 0x15
    2f48:	9e 8b       	std	Y+22, r25	; 0x16
    2f4a:	af 8b       	std	Y+23, r26	; 0x17
    2f4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f4e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f50:	7e 89       	ldd	r23, Y+22	; 0x16
    2f52:	8f 89       	ldd	r24, Y+23	; 0x17
    2f54:	98 8d       	ldd	r25, Y+24	; 0x18
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	2c f4       	brge	.+10     	; 0x2f70 <LCD_sendCommand+0x256>
		__ticks = 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	9c 8b       	std	Y+20, r25	; 0x14
    2f6c:	8b 8b       	std	Y+19, r24	; 0x13
    2f6e:	3f c0       	rjmp	.+126    	; 0x2fee <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    2f70:	6d 89       	ldd	r22, Y+21	; 0x15
    2f72:	7e 89       	ldd	r23, Y+22	; 0x16
    2f74:	8f 89       	ldd	r24, Y+23	; 0x17
    2f76:	98 8d       	ldd	r25, Y+24	; 0x18
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	3f ef       	ldi	r19, 0xFF	; 255
    2f7c:	4f e7       	ldi	r20, 0x7F	; 127
    2f7e:	57 e4       	ldi	r21, 0x47	; 71
    2f80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f84:	18 16       	cp	r1, r24
    2f86:	4c f5       	brge	.+82     	; 0x2fda <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f88:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f90:	20 e0       	ldi	r18, 0x00	; 0
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	40 e2       	ldi	r20, 0x20	; 32
    2f96:	51 e4       	ldi	r21, 0x41	; 65
    2f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	bc 01       	movw	r22, r24
    2fa2:	cd 01       	movw	r24, r26
    2fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa8:	dc 01       	movw	r26, r24
    2faa:	cb 01       	movw	r24, r22
    2fac:	9c 8b       	std	Y+20, r25	; 0x14
    2fae:	8b 8b       	std	Y+19, r24	; 0x13
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <LCD_sendCommand+0x2b6>
    2fb2:	88 ec       	ldi	r24, 0xC8	; 200
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	9a 8b       	std	Y+18, r25	; 0x12
    2fb8:	89 8b       	std	Y+17, r24	; 0x11
    2fba:	89 89       	ldd	r24, Y+17	; 0x11
    2fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <LCD_sendCommand+0x2a4>
    2fc2:	9a 8b       	std	Y+18, r25	; 0x12
    2fc4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2fc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2fca:	01 97       	sbiw	r24, 0x01	; 1
    2fcc:	9c 8b       	std	Y+20, r25	; 0x14
    2fce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    2fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	69 f7       	brne	.-38     	; 0x2fb2 <LCD_sendCommand+0x298>
    2fd8:	14 c0       	rjmp	.+40     	; 0x3002 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fda:	6d 89       	ldd	r22, Y+21	; 0x15
    2fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2fde:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	8b 89       	ldd	r24, Y+19	; 0x13
    2ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ff2:	98 8b       	std	Y+16, r25	; 0x10
    2ff4:	8f 87       	std	Y+15, r24	; 0x0f
    2ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ff8:	98 89       	ldd	r25, Y+16	; 0x10
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	f1 f7       	brne	.-4      	; 0x2ffa <LCD_sendCommand+0x2e0>
    2ffe:	98 8b       	std	Y+16, r25	; 0x10
    3000:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	66 e0       	ldi	r22, 0x06	; 6
    3006:	40 e0       	ldi	r20, 0x00	; 0
    3008:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	a0 e8       	ldi	r26, 0x80	; 128
    3012:	bf e3       	ldi	r27, 0x3F	; 63
    3014:	8b 87       	std	Y+11, r24	; 0x0b
    3016:	9c 87       	std	Y+12, r25	; 0x0c
    3018:	ad 87       	std	Y+13, r26	; 0x0d
    301a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301c:	6b 85       	ldd	r22, Y+11	; 0x0b
    301e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3020:	8d 85       	ldd	r24, Y+13	; 0x0d
    3022:	9e 85       	ldd	r25, Y+14	; 0x0e
    3024:	20 e0       	ldi	r18, 0x00	; 0
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	4a ef       	ldi	r20, 0xFA	; 250
    302a:	54 e4       	ldi	r21, 0x44	; 68
    302c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3030:	dc 01       	movw	r26, r24
    3032:	cb 01       	movw	r24, r22
    3034:	8f 83       	std	Y+7, r24	; 0x07
    3036:	98 87       	std	Y+8, r25	; 0x08
    3038:	a9 87       	std	Y+9, r26	; 0x09
    303a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    303c:	6f 81       	ldd	r22, Y+7	; 0x07
    303e:	78 85       	ldd	r23, Y+8	; 0x08
    3040:	89 85       	ldd	r24, Y+9	; 0x09
    3042:	9a 85       	ldd	r25, Y+10	; 0x0a
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	40 e8       	ldi	r20, 0x80	; 128
    304a:	5f e3       	ldi	r21, 0x3F	; 63
    304c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3050:	88 23       	and	r24, r24
    3052:	2c f4       	brge	.+10     	; 0x305e <LCD_sendCommand+0x344>
		__ticks = 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	9e 83       	std	Y+6, r25	; 0x06
    305a:	8d 83       	std	Y+5, r24	; 0x05
    305c:	3f c0       	rjmp	.+126    	; 0x30dc <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	20 e0       	ldi	r18, 0x00	; 0
    3068:	3f ef       	ldi	r19, 0xFF	; 255
    306a:	4f e7       	ldi	r20, 0x7F	; 127
    306c:	57 e4       	ldi	r21, 0x47	; 71
    306e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3072:	18 16       	cp	r1, r24
    3074:	4c f5       	brge	.+82     	; 0x30c8 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3076:	6b 85       	ldd	r22, Y+11	; 0x0b
    3078:	7c 85       	ldd	r23, Y+12	; 0x0c
    307a:	8d 85       	ldd	r24, Y+13	; 0x0d
    307c:	9e 85       	ldd	r25, Y+14	; 0x0e
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e2       	ldi	r20, 0x20	; 32
    3084:	51 e4       	ldi	r21, 0x41	; 65
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	bc 01       	movw	r22, r24
    3090:	cd 01       	movw	r24, r26
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9e 83       	std	Y+6, r25	; 0x06
    309c:	8d 83       	std	Y+5, r24	; 0x05
    309e:	0f c0       	rjmp	.+30     	; 0x30be <LCD_sendCommand+0x3a4>
    30a0:	88 ec       	ldi	r24, 0xC8	; 200
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	9c 83       	std	Y+4, r25	; 0x04
    30a6:	8b 83       	std	Y+3, r24	; 0x03
    30a8:	8b 81       	ldd	r24, Y+3	; 0x03
    30aa:	9c 81       	ldd	r25, Y+4	; 0x04
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <LCD_sendCommand+0x392>
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b4:	8d 81       	ldd	r24, Y+5	; 0x05
    30b6:	9e 81       	ldd	r25, Y+6	; 0x06
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	9e 83       	std	Y+6, r25	; 0x06
    30bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	00 97       	sbiw	r24, 0x00	; 0
    30c4:	69 f7       	brne	.-38     	; 0x30a0 <LCD_sendCommand+0x386>
    30c6:	14 c0       	rjmp	.+40     	; 0x30f0 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ca:	78 85       	ldd	r23, Y+8	; 0x08
    30cc:	89 85       	ldd	r24, Y+9	; 0x09
    30ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	8d 81       	ldd	r24, Y+5	; 0x05
    30de:	9e 81       	ldd	r25, Y+6	; 0x06
    30e0:	9a 83       	std	Y+2, r25	; 0x02
    30e2:	89 83       	std	Y+1, r24	; 0x01
    30e4:	89 81       	ldd	r24, Y+1	; 0x01
    30e6:	9a 81       	ldd	r25, Y+2	; 0x02
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <LCD_sendCommand+0x3ce>
    30ec:	9a 83       	std	Y+2, r25	; 0x02
    30ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    30f0:	e9 96       	adiw	r28, 0x39	; 57
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	de bf       	out	0x3e, r29	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	cf 91       	pop	r28
    30fe:	df 91       	pop	r29
    3100:	08 95       	ret

00003102 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3102:	df 93       	push	r29
    3104:	cf 93       	push	r28
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	e9 97       	sbiw	r28, 0x39	; 57
    310c:	0f b6       	in	r0, 0x3f	; 63
    310e:	f8 94       	cli
    3110:	de bf       	out	0x3e, r29	; 62
    3112:	0f be       	out	0x3f, r0	; 63
    3114:	cd bf       	out	0x3d, r28	; 61
    3116:	89 af       	std	Y+57, r24	; 0x39
	//uint8 lcd_port_value = 0;
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3118:	83 e0       	ldi	r24, 0x03	; 3
    311a:	64 e0       	ldi	r22, 0x04	; 4
    311c:	41 e0       	ldi	r20, 0x01	; 1
    311e:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    3122:	83 e0       	ldi	r24, 0x03	; 3
    3124:	65 e0       	ldi	r22, 0x05	; 5
    3126:	40 e0       	ldi	r20, 0x00	; 0
    3128:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	a0 e8       	ldi	r26, 0x80	; 128
    3132:	bf e3       	ldi	r27, 0x3F	; 63
    3134:	8d ab       	std	Y+53, r24	; 0x35
    3136:	9e ab       	std	Y+54, r25	; 0x36
    3138:	af ab       	std	Y+55, r26	; 0x37
    313a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313c:	6d a9       	ldd	r22, Y+53	; 0x35
    313e:	7e a9       	ldd	r23, Y+54	; 0x36
    3140:	8f a9       	ldd	r24, Y+55	; 0x37
    3142:	98 ad       	ldd	r25, Y+56	; 0x38
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a ef       	ldi	r20, 0xFA	; 250
    314a:	54 e4       	ldi	r21, 0x44	; 68
    314c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	89 ab       	std	Y+49, r24	; 0x31
    3156:	9a ab       	std	Y+50, r25	; 0x32
    3158:	ab ab       	std	Y+51, r26	; 0x33
    315a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    315c:	69 a9       	ldd	r22, Y+49	; 0x31
    315e:	7a a9       	ldd	r23, Y+50	; 0x32
    3160:	8b a9       	ldd	r24, Y+51	; 0x33
    3162:	9c a9       	ldd	r25, Y+52	; 0x34
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	40 e8       	ldi	r20, 0x80	; 128
    316a:	5f e3       	ldi	r21, 0x3F	; 63
    316c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3170:	88 23       	and	r24, r24
    3172:	2c f4       	brge	.+10     	; 0x317e <LCD_displayCharacter+0x7c>
		__ticks = 1;
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	98 ab       	std	Y+48, r25	; 0x30
    317a:	8f a7       	std	Y+47, r24	; 0x2f
    317c:	3f c0       	rjmp	.+126    	; 0x31fc <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    317e:	69 a9       	ldd	r22, Y+49	; 0x31
    3180:	7a a9       	ldd	r23, Y+50	; 0x32
    3182:	8b a9       	ldd	r24, Y+51	; 0x33
    3184:	9c a9       	ldd	r25, Y+52	; 0x34
    3186:	20 e0       	ldi	r18, 0x00	; 0
    3188:	3f ef       	ldi	r19, 0xFF	; 255
    318a:	4f e7       	ldi	r20, 0x7F	; 127
    318c:	57 e4       	ldi	r21, 0x47	; 71
    318e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3192:	18 16       	cp	r1, r24
    3194:	4c f5       	brge	.+82     	; 0x31e8 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3196:	6d a9       	ldd	r22, Y+53	; 0x35
    3198:	7e a9       	ldd	r23, Y+54	; 0x36
    319a:	8f a9       	ldd	r24, Y+55	; 0x37
    319c:	98 ad       	ldd	r25, Y+56	; 0x38
    319e:	20 e0       	ldi	r18, 0x00	; 0
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e2       	ldi	r20, 0x20	; 32
    31a4:	51 e4       	ldi	r21, 0x41	; 65
    31a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31aa:	dc 01       	movw	r26, r24
    31ac:	cb 01       	movw	r24, r22
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	98 ab       	std	Y+48, r25	; 0x30
    31bc:	8f a7       	std	Y+47, r24	; 0x2f
    31be:	0f c0       	rjmp	.+30     	; 0x31de <LCD_displayCharacter+0xdc>
    31c0:	88 ec       	ldi	r24, 0xC8	; 200
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	9e a7       	std	Y+46, r25	; 0x2e
    31c6:	8d a7       	std	Y+45, r24	; 0x2d
    31c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    31ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <LCD_displayCharacter+0xca>
    31d0:	9e a7       	std	Y+46, r25	; 0x2e
    31d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d6:	98 a9       	ldd	r25, Y+48	; 0x30
    31d8:	01 97       	sbiw	r24, 0x01	; 1
    31da:	98 ab       	std	Y+48, r25	; 0x30
    31dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31de:	8f a5       	ldd	r24, Y+47	; 0x2f
    31e0:	98 a9       	ldd	r25, Y+48	; 0x30
    31e2:	00 97       	sbiw	r24, 0x00	; 0
    31e4:	69 f7       	brne	.-38     	; 0x31c0 <LCD_displayCharacter+0xbe>
    31e6:	14 c0       	rjmp	.+40     	; 0x3210 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e8:	69 a9       	ldd	r22, Y+49	; 0x31
    31ea:	7a a9       	ldd	r23, Y+50	; 0x32
    31ec:	8b a9       	ldd	r24, Y+51	; 0x33
    31ee:	9c a9       	ldd	r25, Y+52	; 0x34
    31f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	98 ab       	std	Y+48, r25	; 0x30
    31fa:	8f a7       	std	Y+47, r24	; 0x2f
    31fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    31fe:	98 a9       	ldd	r25, Y+48	; 0x30
    3200:	9c a7       	std	Y+44, r25	; 0x2c
    3202:	8b a7       	std	Y+43, r24	; 0x2b
    3204:	8b a5       	ldd	r24, Y+43	; 0x2b
    3206:	9c a5       	ldd	r25, Y+44	; 0x2c
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_displayCharacter+0x106>
    320c:	9c a7       	std	Y+44, r25	; 0x2c
    320e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3210:	83 e0       	ldi	r24, 0x03	; 3
    3212:	66 e0       	ldi	r22, 0x06	; 6
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e8       	ldi	r26, 0x80	; 128
    3220:	bf e3       	ldi	r27, 0x3F	; 63
    3222:	8f a3       	std	Y+39, r24	; 0x27
    3224:	98 a7       	std	Y+40, r25	; 0x28
    3226:	a9 a7       	std	Y+41, r26	; 0x29
    3228:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322a:	6f a1       	ldd	r22, Y+39	; 0x27
    322c:	78 a5       	ldd	r23, Y+40	; 0x28
    322e:	89 a5       	ldd	r24, Y+41	; 0x29
    3230:	9a a5       	ldd	r25, Y+42	; 0x2a
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	4a ef       	ldi	r20, 0xFA	; 250
    3238:	54 e4       	ldi	r21, 0x44	; 68
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8b a3       	std	Y+35, r24	; 0x23
    3244:	9c a3       	std	Y+36, r25	; 0x24
    3246:	ad a3       	std	Y+37, r26	; 0x25
    3248:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    324a:	6b a1       	ldd	r22, Y+35	; 0x23
    324c:	7c a1       	ldd	r23, Y+36	; 0x24
    324e:	8d a1       	ldd	r24, Y+37	; 0x25
    3250:	9e a1       	ldd	r25, Y+38	; 0x26
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    325e:	88 23       	and	r24, r24
    3260:	2c f4       	brge	.+10     	; 0x326c <LCD_displayCharacter+0x16a>
		__ticks = 1;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9a a3       	std	Y+34, r25	; 0x22
    3268:	89 a3       	std	Y+33, r24	; 0x21
    326a:	3f c0       	rjmp	.+126    	; 0x32ea <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    326c:	6b a1       	ldd	r22, Y+35	; 0x23
    326e:	7c a1       	ldd	r23, Y+36	; 0x24
    3270:	8d a1       	ldd	r24, Y+37	; 0x25
    3272:	9e a1       	ldd	r25, Y+38	; 0x26
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	4c f5       	brge	.+82     	; 0x32d6 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3284:	6f a1       	ldd	r22, Y+39	; 0x27
    3286:	78 a5       	ldd	r23, Y+40	; 0x28
    3288:	89 a5       	ldd	r24, Y+41	; 0x29
    328a:	9a a5       	ldd	r25, Y+42	; 0x2a
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e2       	ldi	r20, 0x20	; 32
    3292:	51 e4       	ldi	r21, 0x41	; 65
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9a a3       	std	Y+34, r25	; 0x22
    32aa:	89 a3       	std	Y+33, r24	; 0x21
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <LCD_displayCharacter+0x1ca>
    32ae:	88 ec       	ldi	r24, 0xC8	; 200
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	98 a3       	std	Y+32, r25	; 0x20
    32b4:	8f 8f       	std	Y+31, r24	; 0x1f
    32b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    32b8:	98 a1       	ldd	r25, Y+32	; 0x20
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <LCD_displayCharacter+0x1b8>
    32be:	98 a3       	std	Y+32, r25	; 0x20
    32c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c2:	89 a1       	ldd	r24, Y+33	; 0x21
    32c4:	9a a1       	ldd	r25, Y+34	; 0x22
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	9a a3       	std	Y+34, r25	; 0x22
    32ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32cc:	89 a1       	ldd	r24, Y+33	; 0x21
    32ce:	9a a1       	ldd	r25, Y+34	; 0x22
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	69 f7       	brne	.-38     	; 0x32ae <LCD_displayCharacter+0x1ac>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d6:	6b a1       	ldd	r22, Y+35	; 0x23
    32d8:	7c a1       	ldd	r23, Y+36	; 0x24
    32da:	8d a1       	ldd	r24, Y+37	; 0x25
    32dc:	9e a1       	ldd	r25, Y+38	; 0x26
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9a a3       	std	Y+34, r25	; 0x22
    32e8:	89 a3       	std	Y+33, r24	; 0x21
    32ea:	89 a1       	ldd	r24, Y+33	; 0x21
    32ec:	9a a1       	ldd	r25, Y+34	; 0x22
    32ee:	9e 8f       	std	Y+30, r25	; 0x1e
    32f0:	8d 8f       	std	Y+29, r24	; 0x1d
    32f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <LCD_displayCharacter+0x1f4>
    32fa:	9e 8f       	std	Y+30, r25	; 0x1e
    32fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	69 ad       	ldd	r22, Y+57	; 0x39
    3302:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <GPIO_writePort>
    3306:	80 e0       	ldi	r24, 0x00	; 0
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	a0 e8       	ldi	r26, 0x80	; 128
    330c:	bf e3       	ldi	r27, 0x3F	; 63
    330e:	89 8f       	std	Y+25, r24	; 0x19
    3310:	9a 8f       	std	Y+26, r25	; 0x1a
    3312:	ab 8f       	std	Y+27, r26	; 0x1b
    3314:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3316:	69 8d       	ldd	r22, Y+25	; 0x19
    3318:	7a 8d       	ldd	r23, Y+26	; 0x1a
    331a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    331c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    331e:	20 e0       	ldi	r18, 0x00	; 0
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	4a ef       	ldi	r20, 0xFA	; 250
    3324:	54 e4       	ldi	r21, 0x44	; 68
    3326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	8d 8b       	std	Y+21, r24	; 0x15
    3330:	9e 8b       	std	Y+22, r25	; 0x16
    3332:	af 8b       	std	Y+23, r26	; 0x17
    3334:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3336:	6d 89       	ldd	r22, Y+21	; 0x15
    3338:	7e 89       	ldd	r23, Y+22	; 0x16
    333a:	8f 89       	ldd	r24, Y+23	; 0x17
    333c:	98 8d       	ldd	r25, Y+24	; 0x18
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e8       	ldi	r20, 0x80	; 128
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    334a:	88 23       	and	r24, r24
    334c:	2c f4       	brge	.+10     	; 0x3358 <LCD_displayCharacter+0x256>
		__ticks = 1;
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	9c 8b       	std	Y+20, r25	; 0x14
    3354:	8b 8b       	std	Y+19, r24	; 0x13
    3356:	3f c0       	rjmp	.+126    	; 0x33d6 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    3358:	6d 89       	ldd	r22, Y+21	; 0x15
    335a:	7e 89       	ldd	r23, Y+22	; 0x16
    335c:	8f 89       	ldd	r24, Y+23	; 0x17
    335e:	98 8d       	ldd	r25, Y+24	; 0x18
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	3f ef       	ldi	r19, 0xFF	; 255
    3364:	4f e7       	ldi	r20, 0x7F	; 127
    3366:	57 e4       	ldi	r21, 0x47	; 71
    3368:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336c:	18 16       	cp	r1, r24
    336e:	4c f5       	brge	.+82     	; 0x33c2 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3370:	69 8d       	ldd	r22, Y+25	; 0x19
    3372:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3374:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3376:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3390:	dc 01       	movw	r26, r24
    3392:	cb 01       	movw	r24, r22
    3394:	9c 8b       	std	Y+20, r25	; 0x14
    3396:	8b 8b       	std	Y+19, r24	; 0x13
    3398:	0f c0       	rjmp	.+30     	; 0x33b8 <LCD_displayCharacter+0x2b6>
    339a:	88 ec       	ldi	r24, 0xC8	; 200
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	9a 8b       	std	Y+18, r25	; 0x12
    33a0:	89 8b       	std	Y+17, r24	; 0x11
    33a2:	89 89       	ldd	r24, Y+17	; 0x11
    33a4:	9a 89       	ldd	r25, Y+18	; 0x12
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <LCD_displayCharacter+0x2a4>
    33aa:	9a 8b       	std	Y+18, r25	; 0x12
    33ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ae:	8b 89       	ldd	r24, Y+19	; 0x13
    33b0:	9c 89       	ldd	r25, Y+20	; 0x14
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	9c 8b       	std	Y+20, r25	; 0x14
    33b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ba:	9c 89       	ldd	r25, Y+20	; 0x14
    33bc:	00 97       	sbiw	r24, 0x00	; 0
    33be:	69 f7       	brne	.-38     	; 0x339a <LCD_displayCharacter+0x298>
    33c0:	14 c0       	rjmp	.+40     	; 0x33ea <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c2:	6d 89       	ldd	r22, Y+21	; 0x15
    33c4:	7e 89       	ldd	r23, Y+22	; 0x16
    33c6:	8f 89       	ldd	r24, Y+23	; 0x17
    33c8:	98 8d       	ldd	r25, Y+24	; 0x18
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9c 8b       	std	Y+20, r25	; 0x14
    33d4:	8b 8b       	std	Y+19, r24	; 0x13
    33d6:	8b 89       	ldd	r24, Y+19	; 0x13
    33d8:	9c 89       	ldd	r25, Y+20	; 0x14
    33da:	98 8b       	std	Y+16, r25	; 0x10
    33dc:	8f 87       	std	Y+15, r24	; 0x0f
    33de:	8f 85       	ldd	r24, Y+15	; 0x0f
    33e0:	98 89       	ldd	r25, Y+16	; 0x10
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <LCD_displayCharacter+0x2e0>
    33e6:	98 8b       	std	Y+16, r25	; 0x10
    33e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	66 e0       	ldi	r22, 0x06	; 6
    33ee:	40 e0       	ldi	r20, 0x00	; 0
    33f0:	0e 94 1f 13 	call	0x263e	; 0x263e <GPIO_writePin>
    33f4:	80 e0       	ldi	r24, 0x00	; 0
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	a0 e8       	ldi	r26, 0x80	; 128
    33fa:	bf e3       	ldi	r27, 0x3F	; 63
    33fc:	8b 87       	std	Y+11, r24	; 0x0b
    33fe:	9c 87       	std	Y+12, r25	; 0x0c
    3400:	ad 87       	std	Y+13, r26	; 0x0d
    3402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3404:	6b 85       	ldd	r22, Y+11	; 0x0b
    3406:	7c 85       	ldd	r23, Y+12	; 0x0c
    3408:	8d 85       	ldd	r24, Y+13	; 0x0d
    340a:	9e 85       	ldd	r25, Y+14	; 0x0e
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	4a ef       	ldi	r20, 0xFA	; 250
    3412:	54 e4       	ldi	r21, 0x44	; 68
    3414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	8f 83       	std	Y+7, r24	; 0x07
    341e:	98 87       	std	Y+8, r25	; 0x08
    3420:	a9 87       	std	Y+9, r26	; 0x09
    3422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3424:	6f 81       	ldd	r22, Y+7	; 0x07
    3426:	78 85       	ldd	r23, Y+8	; 0x08
    3428:	89 85       	ldd	r24, Y+9	; 0x09
    342a:	9a 85       	ldd	r25, Y+10	; 0x0a
    342c:	20 e0       	ldi	r18, 0x00	; 0
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	40 e8       	ldi	r20, 0x80	; 128
    3432:	5f e3       	ldi	r21, 0x3F	; 63
    3434:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3438:	88 23       	and	r24, r24
    343a:	2c f4       	brge	.+10     	; 0x3446 <LCD_displayCharacter+0x344>
		__ticks = 1;
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9e 83       	std	Y+6, r25	; 0x06
    3442:	8d 83       	std	Y+5, r24	; 0x05
    3444:	3f c0       	rjmp	.+126    	; 0x34c4 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    3446:	6f 81       	ldd	r22, Y+7	; 0x07
    3448:	78 85       	ldd	r23, Y+8	; 0x08
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	9a 85       	ldd	r25, Y+10	; 0x0a
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	3f ef       	ldi	r19, 0xFF	; 255
    3452:	4f e7       	ldi	r20, 0x7F	; 127
    3454:	57 e4       	ldi	r21, 0x47	; 71
    3456:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    345a:	18 16       	cp	r1, r24
    345c:	4c f5       	brge	.+82     	; 0x34b0 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3460:	7c 85       	ldd	r23, Y+12	; 0x0c
    3462:	8d 85       	ldd	r24, Y+13	; 0x0d
    3464:	9e 85       	ldd	r25, Y+14	; 0x0e
    3466:	20 e0       	ldi	r18, 0x00	; 0
    3468:	30 e0       	ldi	r19, 0x00	; 0
    346a:	40 e2       	ldi	r20, 0x20	; 32
    346c:	51 e4       	ldi	r21, 0x41	; 65
    346e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3472:	dc 01       	movw	r26, r24
    3474:	cb 01       	movw	r24, r22
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	9e 83       	std	Y+6, r25	; 0x06
    3484:	8d 83       	std	Y+5, r24	; 0x05
    3486:	0f c0       	rjmp	.+30     	; 0x34a6 <LCD_displayCharacter+0x3a4>
    3488:	88 ec       	ldi	r24, 0xC8	; 200
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	9c 83       	std	Y+4, r25	; 0x04
    348e:	8b 83       	std	Y+3, r24	; 0x03
    3490:	8b 81       	ldd	r24, Y+3	; 0x03
    3492:	9c 81       	ldd	r25, Y+4	; 0x04
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <LCD_displayCharacter+0x392>
    3498:	9c 83       	std	Y+4, r25	; 0x04
    349a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349c:	8d 81       	ldd	r24, Y+5	; 0x05
    349e:	9e 81       	ldd	r25, Y+6	; 0x06
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	9e 83       	std	Y+6, r25	; 0x06
    34a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a6:	8d 81       	ldd	r24, Y+5	; 0x05
    34a8:	9e 81       	ldd	r25, Y+6	; 0x06
    34aa:	00 97       	sbiw	r24, 0x00	; 0
    34ac:	69 f7       	brne	.-38     	; 0x3488 <LCD_displayCharacter+0x386>
    34ae:	14 c0       	rjmp	.+40     	; 0x34d8 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b0:	6f 81       	ldd	r22, Y+7	; 0x07
    34b2:	78 85       	ldd	r23, Y+8	; 0x08
    34b4:	89 85       	ldd	r24, Y+9	; 0x09
    34b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34bc:	dc 01       	movw	r26, r24
    34be:	cb 01       	movw	r24, r22
    34c0:	9e 83       	std	Y+6, r25	; 0x06
    34c2:	8d 83       	std	Y+5, r24	; 0x05
    34c4:	8d 81       	ldd	r24, Y+5	; 0x05
    34c6:	9e 81       	ldd	r25, Y+6	; 0x06
    34c8:	9a 83       	std	Y+2, r25	; 0x02
    34ca:	89 83       	std	Y+1, r24	; 0x01
    34cc:	89 81       	ldd	r24, Y+1	; 0x01
    34ce:	9a 81       	ldd	r25, Y+2	; 0x02
    34d0:	01 97       	sbiw	r24, 0x01	; 1
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <LCD_displayCharacter+0x3ce>
    34d4:	9a 83       	std	Y+2, r25	; 0x02
    34d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    34d8:	e9 96       	adiw	r28, 0x39	; 57
    34da:	0f b6       	in	r0, 0x3f	; 63
    34dc:	f8 94       	cli
    34de:	de bf       	out	0x3e, r29	; 62
    34e0:	0f be       	out	0x3f, r0	; 63
    34e2:	cd bf       	out	0x3d, r28	; 61
    34e4:	cf 91       	pop	r28
    34e6:	df 91       	pop	r29
    34e8:	08 95       	ret

000034ea <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    34ea:	df 93       	push	r29
    34ec:	cf 93       	push	r28
    34ee:	00 d0       	rcall	.+0      	; 0x34f0 <LCD_displayString+0x6>
    34f0:	0f 92       	push	r0
    34f2:	cd b7       	in	r28, 0x3d	; 61
    34f4:	de b7       	in	r29, 0x3e	; 62
    34f6:	9b 83       	std	Y+3, r25	; 0x03
    34f8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    34fa:	19 82       	std	Y+1, r1	; 0x01
    34fc:	0e c0       	rjmp	.+28     	; 0x351a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	28 2f       	mov	r18, r24
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	8a 81       	ldd	r24, Y+2	; 0x02
    3506:	9b 81       	ldd	r25, Y+3	; 0x03
    3508:	fc 01       	movw	r30, r24
    350a:	e2 0f       	add	r30, r18
    350c:	f3 1f       	adc	r31, r19
    350e:	80 81       	ld	r24, Z
    3510:	0e 94 81 18 	call	0x3102	; 0x3102 <LCD_displayCharacter>
		i++;
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	8f 5f       	subi	r24, 0xFF	; 255
    3518:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	28 2f       	mov	r18, r24
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	9b 81       	ldd	r25, Y+3	; 0x03
    3524:	fc 01       	movw	r30, r24
    3526:	e2 0f       	add	r30, r18
    3528:	f3 1f       	adc	r31, r19
    352a:	80 81       	ld	r24, Z
    352c:	88 23       	and	r24, r24
    352e:	39 f7       	brne	.-50     	; 0x34fe <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3530:	0f 90       	pop	r0
    3532:	0f 90       	pop	r0
    3534:	0f 90       	pop	r0
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	08 95       	ret

0000353c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    353c:	df 93       	push	r29
    353e:	cf 93       	push	r28
    3540:	00 d0       	rcall	.+0      	; 0x3542 <LCD_moveCursor+0x6>
    3542:	00 d0       	rcall	.+0      	; 0x3544 <LCD_moveCursor+0x8>
    3544:	0f 92       	push	r0
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	8a 83       	std	Y+2, r24	; 0x02
    354c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	28 2f       	mov	r18, r24
    3552:	30 e0       	ldi	r19, 0x00	; 0
    3554:	3d 83       	std	Y+5, r19	; 0x05
    3556:	2c 83       	std	Y+4, r18	; 0x04
    3558:	8c 81       	ldd	r24, Y+4	; 0x04
    355a:	9d 81       	ldd	r25, Y+5	; 0x05
    355c:	81 30       	cpi	r24, 0x01	; 1
    355e:	91 05       	cpc	r25, r1
    3560:	c1 f0       	breq	.+48     	; 0x3592 <LCD_moveCursor+0x56>
    3562:	2c 81       	ldd	r18, Y+4	; 0x04
    3564:	3d 81       	ldd	r19, Y+5	; 0x05
    3566:	22 30       	cpi	r18, 0x02	; 2
    3568:	31 05       	cpc	r19, r1
    356a:	2c f4       	brge	.+10     	; 0x3576 <LCD_moveCursor+0x3a>
    356c:	8c 81       	ldd	r24, Y+4	; 0x04
    356e:	9d 81       	ldd	r25, Y+5	; 0x05
    3570:	00 97       	sbiw	r24, 0x00	; 0
    3572:	61 f0       	breq	.+24     	; 0x358c <LCD_moveCursor+0x50>
    3574:	19 c0       	rjmp	.+50     	; 0x35a8 <LCD_moveCursor+0x6c>
    3576:	2c 81       	ldd	r18, Y+4	; 0x04
    3578:	3d 81       	ldd	r19, Y+5	; 0x05
    357a:	22 30       	cpi	r18, 0x02	; 2
    357c:	31 05       	cpc	r19, r1
    357e:	69 f0       	breq	.+26     	; 0x359a <LCD_moveCursor+0x5e>
    3580:	8c 81       	ldd	r24, Y+4	; 0x04
    3582:	9d 81       	ldd	r25, Y+5	; 0x05
    3584:	83 30       	cpi	r24, 0x03	; 3
    3586:	91 05       	cpc	r25, r1
    3588:	61 f0       	breq	.+24     	; 0x35a2 <LCD_moveCursor+0x66>
    358a:	0e c0       	rjmp	.+28     	; 0x35a8 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	89 83       	std	Y+1, r24	; 0x01
    3590:	0b c0       	rjmp	.+22     	; 0x35a8 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3592:	8b 81       	ldd	r24, Y+3	; 0x03
    3594:	80 5c       	subi	r24, 0xC0	; 192
    3596:	89 83       	std	Y+1, r24	; 0x01
    3598:	07 c0       	rjmp	.+14     	; 0x35a8 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    359a:	8b 81       	ldd	r24, Y+3	; 0x03
    359c:	80 5f       	subi	r24, 0xF0	; 240
    359e:	89 83       	std	Y+1, r24	; 0x01
    35a0:	03 c0       	rjmp	.+6      	; 0x35a8 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	80 5b       	subi	r24, 0xB0	; 176
    35a6:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
    35aa:	80 68       	ori	r24, 0x80	; 128
    35ac:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_sendCommand>
}
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	0f 90       	pop	r0
    35b8:	0f 90       	pop	r0
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	08 95       	ret

000035c0 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    35c0:	df 93       	push	r29
    35c2:	cf 93       	push	r28
    35c4:	00 d0       	rcall	.+0      	; 0x35c6 <LCD_displayStringRowColumn+0x6>
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <LCD_displayStringRowColumn+0x8>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	89 83       	std	Y+1, r24	; 0x01
    35ce:	6a 83       	std	Y+2, r22	; 0x02
    35d0:	5c 83       	std	Y+4, r21	; 0x04
    35d2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	6a 81       	ldd	r22, Y+2	; 0x02
    35d8:	0e 94 9e 1a 	call	0x353c	; 0x353c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	9c 81       	ldd	r25, Y+4	; 0x04
    35e0:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_displayString>
}
    35e4:	0f 90       	pop	r0
    35e6:	0f 90       	pop	r0
    35e8:	0f 90       	pop	r0
    35ea:	0f 90       	pop	r0
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	62 97       	sbiw	r28, 0x12	; 18
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	9a 8b       	std	Y+18, r25	; 0x12
    3608:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    360a:	89 89       	ldd	r24, Y+17	; 0x11
    360c:	9a 89       	ldd	r25, Y+18	; 0x12
    360e:	9e 01       	movw	r18, r28
    3610:	2f 5f       	subi	r18, 0xFF	; 255
    3612:	3f 4f       	sbci	r19, 0xFF	; 255
    3614:	b9 01       	movw	r22, r18
    3616:	4a e0       	ldi	r20, 0x0A	; 10
    3618:	50 e0       	ldi	r21, 0x00	; 0
    361a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <itoa>
   LCD_displayString(buff); /* Display the string */
    361e:	ce 01       	movw	r24, r28
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	0e 94 75 1a 	call	0x34ea	; 0x34ea <LCD_displayString>
}
    3626:	62 96       	adiw	r28, 0x12	; 18
    3628:	0f b6       	in	r0, 0x3f	; 63
    362a:	f8 94       	cli
    362c:	de bf       	out	0x3e, r29	; 62
    362e:	0f be       	out	0x3f, r0	; 63
    3630:	cd bf       	out	0x3d, r28	; 61
    3632:	cf 91       	pop	r28
    3634:	df 91       	pop	r29
    3636:	08 95       	ret

00003638 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3638:	df 93       	push	r29
    363a:	cf 93       	push	r28
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <LCD_sendCommand>
}
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <__vector_9>:

/**************************************************************************
 *                                 Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    364c:	1f 92       	push	r1
    364e:	0f 92       	push	r0
    3650:	0f b6       	in	r0, 0x3f	; 63
    3652:	0f 92       	push	r0
    3654:	11 24       	eor	r1, r1
    3656:	2f 93       	push	r18
    3658:	3f 93       	push	r19
    365a:	4f 93       	push	r20
    365c:	5f 93       	push	r21
    365e:	6f 93       	push	r22
    3660:	7f 93       	push	r23
    3662:	8f 93       	push	r24
    3664:	9f 93       	push	r25
    3666:	af 93       	push	r26
    3668:	bf 93       	push	r27
    366a:	ef 93       	push	r30
    366c:	ff 93       	push	r31
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3676:	80 91 83 01 	lds	r24, 0x0183
    367a:	90 91 84 01 	lds	r25, 0x0184
    367e:	00 97       	sbiw	r24, 0x00	; 0
    3680:	29 f0       	breq	.+10     	; 0x368c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3682:	e0 91 83 01 	lds	r30, 0x0183
    3686:	f0 91 84 01 	lds	r31, 0x0184
    368a:	09 95       	icall
	}
}
    368c:	cf 91       	pop	r28
    368e:	df 91       	pop	r29
    3690:	ff 91       	pop	r31
    3692:	ef 91       	pop	r30
    3694:	bf 91       	pop	r27
    3696:	af 91       	pop	r26
    3698:	9f 91       	pop	r25
    369a:	8f 91       	pop	r24
    369c:	7f 91       	pop	r23
    369e:	6f 91       	pop	r22
    36a0:	5f 91       	pop	r21
    36a2:	4f 91       	pop	r20
    36a4:	3f 91       	pop	r19
    36a6:	2f 91       	pop	r18
    36a8:	0f 90       	pop	r0
    36aa:	0f be       	out	0x3f, r0	; 63
    36ac:	0f 90       	pop	r0
    36ae:	1f 90       	pop	r1
    36b0:	18 95       	reti

000036b2 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    36b2:	1f 92       	push	r1
    36b4:	0f 92       	push	r0
    36b6:	0f b6       	in	r0, 0x3f	; 63
    36b8:	0f 92       	push	r0
    36ba:	11 24       	eor	r1, r1
    36bc:	2f 93       	push	r18
    36be:	3f 93       	push	r19
    36c0:	4f 93       	push	r20
    36c2:	5f 93       	push	r21
    36c4:	6f 93       	push	r22
    36c6:	7f 93       	push	r23
    36c8:	8f 93       	push	r24
    36ca:	9f 93       	push	r25
    36cc:	af 93       	push	r26
    36ce:	bf 93       	push	r27
    36d0:	ef 93       	push	r30
    36d2:	ff 93       	push	r31
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    36dc:	80 91 83 01 	lds	r24, 0x0183
    36e0:	90 91 84 01 	lds	r25, 0x0184
    36e4:	00 97       	sbiw	r24, 0x00	; 0
    36e6:	29 f0       	breq	.+10     	; 0x36f2 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    36e8:	e0 91 83 01 	lds	r30, 0x0183
    36ec:	f0 91 84 01 	lds	r31, 0x0184
    36f0:	09 95       	icall
	}
}
    36f2:	cf 91       	pop	r28
    36f4:	df 91       	pop	r29
    36f6:	ff 91       	pop	r31
    36f8:	ef 91       	pop	r30
    36fa:	bf 91       	pop	r27
    36fc:	af 91       	pop	r26
    36fe:	9f 91       	pop	r25
    3700:	8f 91       	pop	r24
    3702:	7f 91       	pop	r23
    3704:	6f 91       	pop	r22
    3706:	5f 91       	pop	r21
    3708:	4f 91       	pop	r20
    370a:	3f 91       	pop	r19
    370c:	2f 91       	pop	r18
    370e:	0f 90       	pop	r0
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	0f 90       	pop	r0
    3714:	1f 90       	pop	r1
    3716:	18 95       	reti

00003718 <Timer0_init>:
 * Timer_Mode (OverFlow, Compare)
 * if using CTC mode: Timer compare match
 * Timer_Prescaler
 */
void Timer0_init(const TIMER_ConfigType * Config_Ptr)
{
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	28 97       	sbiw	r28, 0x08	; 8
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	de bf       	out	0x3e, r29	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	cd bf       	out	0x3d, r28	; 61
    372c:	9a 83       	std	Y+2, r25	; 0x02
    372e:	89 83       	std	Y+1, r24	; 0x01
	/*Clear registers of Timer0 before accessing any of them*/
	TCCR0 &= 0X00;
    3730:	e3 e5       	ldi	r30, 0x53	; 83
    3732:	f0 e0       	ldi	r31, 0x00	; 0
    3734:	20 81       	ld	r18, Z
    3736:	e3 e5       	ldi	r30, 0x53	; 83
    3738:	f0 e0       	ldi	r31, 0x00	; 0
    373a:	10 82       	st	Z, r1
	TCNT0 &= 0X00;
    373c:	e2 e5       	ldi	r30, 0x52	; 82
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	30 81       	ld	r19, Z
    3742:	e2 e5       	ldi	r30, 0x52	; 82
    3744:	f0 e0       	ldi	r31, 0x00	; 0
    3746:	10 82       	st	Z, r1
	OCR0  &= 0X00;
    3748:	ec e5       	ldi	r30, 0x5C	; 92
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	80 81       	ld	r24, Z
    374e:	ec e5       	ldi	r30, 0x5C	; 92
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	10 82       	st	Z, r1
	TIMSK &= 0X00;
    3754:	e9 e5       	ldi	r30, 0x59	; 89
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	90 81       	ld	r25, Z
    375a:	e9 e5       	ldi	r30, 0x59	; 89
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	10 82       	st	Z, r1
	/*
	 * TIMER Pre-scaler value for Timer0 in TCCR0 Register
	 * 0XF8 to make sure that the least 3-bits in TCCR0 register=0
	 * ORing with the chosen timer Pre-scaler to enter it into the least 3-bits
	 */
	TCCR0 = (TCCR0  & 0XF8) | (Config_Ptr -> timer_clock);
    3760:	a3 e5       	ldi	r26, 0x53	; 83
    3762:	b0 e0       	ldi	r27, 0x00	; 0
    3764:	e3 e5       	ldi	r30, 0x53	; 83
    3766:	f0 e0       	ldi	r31, 0x00	; 0
    3768:	80 81       	ld	r24, Z
    376a:	98 2f       	mov	r25, r24
    376c:	98 7f       	andi	r25, 0xF8	; 248
    376e:	e9 81       	ldd	r30, Y+1	; 0x01
    3770:	fa 81       	ldd	r31, Y+2	; 0x02
    3772:	80 85       	ldd	r24, Z+8	; 0x08
    3774:	89 2b       	or	r24, r25
    3776:	8c 93       	st	X, r24

	switch (Config_Ptr -> timer_mode)
    3778:	e9 81       	ldd	r30, Y+1	; 0x01
    377a:	fa 81       	ldd	r31, Y+2	; 0x02
    377c:	81 85       	ldd	r24, Z+9	; 0x09
    377e:	e8 2f       	mov	r30, r24
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	fc 83       	std	Y+4, r31	; 0x04
    3784:	eb 83       	std	Y+3, r30	; 0x03
    3786:	2b 81       	ldd	r18, Y+3	; 0x03
    3788:	3c 81       	ldd	r19, Y+4	; 0x04
    378a:	21 15       	cp	r18, r1
    378c:	31 05       	cpc	r19, r1
    378e:	31 f0       	breq	.+12     	; 0x379c <Timer0_init+0x84>
    3790:	8b 81       	ldd	r24, Y+3	; 0x03
    3792:	9c 81       	ldd	r25, Y+4	; 0x04
    3794:	81 30       	cpi	r24, 0x01	; 1
    3796:	91 05       	cpc	r25, r1
    3798:	61 f1       	breq	.+88     	; 0x37f2 <Timer0_init+0xda>
    379a:	62 c0       	rjmp	.+196    	; 0x3860 <Timer0_init+0x148>
	case OVERFLOW:

		/*
		 * Configure initial value for Timer0 to start count from it
		 */
		TCNT0 = Config_Ptr -> timer_InitialValue;
    379c:	22 e5       	ldi	r18, 0x52	; 82
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	e9 81       	ldd	r30, Y+1	; 0x01
    37a2:	fa 81       	ldd	r31, Y+2	; 0x02
    37a4:	80 81       	ld	r24, Z
    37a6:	91 81       	ldd	r25, Z+1	; 0x01
    37a8:	a2 81       	ldd	r26, Z+2	; 0x02
    37aa:	b3 81       	ldd	r27, Z+3	; 0x03
    37ac:	f9 01       	movw	r30, r18
    37ae:	80 83       	st	Z, r24

		SET_BIT(TIMSK, TOIE0); // Enable Timer0 Overflow Interrupt
    37b0:	a9 e5       	ldi	r26, 0x59	; 89
    37b2:	b0 e0       	ldi	r27, 0x00	; 0
    37b4:	e9 e5       	ldi	r30, 0x59	; 89
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	80 81       	ld	r24, Z
    37ba:	81 60       	ori	r24, 0x01	; 1
    37bc:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		CLEAR_BIT(TCCR0 , WGM00);
    37be:	a3 e5       	ldi	r26, 0x53	; 83
    37c0:	b0 e0       	ldi	r27, 0x00	; 0
    37c2:	e3 e5       	ldi	r30, 0x53	; 83
    37c4:	f0 e0       	ldi	r31, 0x00	; 0
    37c6:	80 81       	ld	r24, Z
    37c8:	8f 7b       	andi	r24, 0xBF	; 191
    37ca:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , WGM01);
    37cc:	a3 e5       	ldi	r26, 0x53	; 83
    37ce:	b0 e0       	ldi	r27, 0x00	; 0
    37d0:	e3 e5       	ldi	r30, 0x53	; 83
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	87 7f       	andi	r24, 0xF7	; 247
    37d8:	8c 93       	st	X, r24
		SET_BIT(TCCR0, FOC0);
    37da:	a3 e5       	ldi	r26, 0x53	; 83
    37dc:	b0 e0       	ldi	r27, 0x00	; 0
    37de:	e3 e5       	ldi	r30, 0x53	; 83
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	80 81       	ld	r24, Z
    37e4:	80 68       	ori	r24, 0x80	; 128
    37e6:	8c 93       	st	X, r24
		TCCR0 = (1<<CS02) | (1<<CS00);
    37e8:	e3 e5       	ldi	r30, 0x53	; 83
    37ea:	f0 e0       	ldi	r31, 0x00	; 0
    37ec:	85 e0       	ldi	r24, 0x05	; 5
    37ee:	80 83       	st	Z, r24
    37f0:	37 c0       	rjmp	.+110    	; 0x3860 <Timer0_init+0x148>
		break;

	case COMPARE:

		TCNT0 = 0;    // Set Timer initial value to 0
    37f2:	e2 e5       	ldi	r30, 0x52	; 82
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	10 82       	st	Z, r1
		OCR0  = Config_Ptr -> timer_CompareValue;; // Set Compare Value
    37f8:	2c e5       	ldi	r18, 0x5C	; 92
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	e9 81       	ldd	r30, Y+1	; 0x01
    37fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3800:	84 81       	ldd	r24, Z+4	; 0x04
    3802:	95 81       	ldd	r25, Z+5	; 0x05
    3804:	a6 81       	ldd	r26, Z+6	; 0x06
    3806:	b7 81       	ldd	r27, Z+7	; 0x07
    3808:	f9 01       	movw	r30, r18
    380a:	80 83       	st	Z, r24
		SET_BIT(TIMSK, OCIE0); // Enable Timer0 Compare Interrupt
    380c:	a9 e5       	ldi	r26, 0x59	; 89
    380e:	b0 e0       	ldi	r27, 0x00	; 0
    3810:	e9 e5       	ldi	r30, 0x59	; 89
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	80 81       	ld	r24, Z
    3816:	82 60       	ori	r24, 0x02	; 2
    3818:	8c 93       	st	X, r24
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 in this example so COM00=0 & COM01=0
		 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
		 */
		CLEAR_BIT(TCCR0 , WGM00);
    381a:	a3 e5       	ldi	r26, 0x53	; 83
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	e3 e5       	ldi	r30, 0x53	; 83
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	8f 7b       	andi	r24, 0xBF	; 191
    3826:	8c 93       	st	X, r24
		SET_BIT(TCCR0 , WGM01);
    3828:	a3 e5       	ldi	r26, 0x53	; 83
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e3 e5       	ldi	r30, 0x53	; 83
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	88 60       	ori	r24, 0x08	; 8
    3834:	8c 93       	st	X, r24
		SET_BIT(TCCR0, FOC0);
    3836:	a3 e5       	ldi	r26, 0x53	; 83
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	e3 e5       	ldi	r30, 0x53	; 83
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	80 68       	ori	r24, 0x80	; 128
    3842:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM00);
    3844:	a3 e5       	ldi	r26, 0x53	; 83
    3846:	b0 e0       	ldi	r27, 0x00	; 0
    3848:	e3 e5       	ldi	r30, 0x53	; 83
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	8f 7e       	andi	r24, 0xEF	; 239
    3850:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0 , COM01);
    3852:	a3 e5       	ldi	r26, 0x53	; 83
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e3 e5       	ldi	r30, 0x53	; 83
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	8f 7d       	andi	r24, 0xDF	; 223
    385e:	8c 93       	st	X, r24
		break;
	}
}
    3860:	28 96       	adiw	r28, 0x08	; 8
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	f8 94       	cli
    3866:	de bf       	out	0x3e, r29	; 62
    3868:	0f be       	out	0x3f, r0	; 63
    386a:	cd bf       	out	0x3d, r28	; 61
    386c:	cf 91       	pop	r28
    386e:	df 91       	pop	r29
    3870:	08 95       	ret

00003872 <Timer_DeInit>:
/*
 * Description :  Function to DeInit the timer to start again from beginning.
 *
 */
void Timer_DeInit()
{
    3872:	df 93       	push	r29
    3874:	cf 93       	push	r28
    3876:	00 d0       	rcall	.+0      	; 0x3878 <Timer_DeInit+0x6>
    3878:	00 d0       	rcall	.+0      	; 0x387a <Timer_DeInit+0x8>
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
	/*Clear all register in Timer0*/
	TCCR0 &= 0X00;
    387e:	e3 e5       	ldi	r30, 0x53	; 83
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	e3 e5       	ldi	r30, 0x53	; 83
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	10 82       	st	Z, r1
	TCNT0 &= 0X00;
    388a:	e2 e5       	ldi	r30, 0x52	; 82
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	80 81       	ld	r24, Z
    3890:	e2 e5       	ldi	r30, 0x52	; 82
    3892:	f0 e0       	ldi	r31, 0x00	; 0
    3894:	10 82       	st	Z, r1
	OCR0  &= 0X00;
    3896:	ec e5       	ldi	r30, 0x5C	; 92
    3898:	f0 e0       	ldi	r31, 0x00	; 0
    389a:	80 81       	ld	r24, Z
    389c:	ec e5       	ldi	r30, 0x5C	; 92
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	10 82       	st	Z, r1
	TIMSK &= 0X00;
    38a2:	e9 e5       	ldi	r30, 0x59	; 89
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	80 81       	ld	r24, Z
    38a8:	e9 e5       	ldi	r30, 0x59	; 89
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	10 82       	st	Z, r1
}
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	cf 91       	pop	r28
    38b8:	df 91       	pop	r29
    38ba:	08 95       	ret

000038bc <Timer_stop>:
/*
 * Description : Function to stop the clock of the timer to stop incrementing.
 *
 */
void Timer_stop()
{
    38bc:	df 93       	push	r29
    38be:	cf 93       	push	r28
    38c0:	cd b7       	in	r28, 0x3d	; 61
    38c2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the first 3-bits in TCCR0 register
	 * stop the clock of the timer
	 */
	TCCR0 = (TCCR0 & 0XF8) ;
    38c4:	a3 e5       	ldi	r26, 0x53	; 83
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	e3 e5       	ldi	r30, 0x53	; 83
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	88 7f       	andi	r24, 0xF8	; 248
    38d0:	8c 93       	st	X, r24
}
    38d2:	cf 91       	pop	r28
    38d4:	df 91       	pop	r29
    38d6:	08 95       	ret

000038d8 <timer_setCallBack>:
/*
 * Description : Function to set the Call Back function address.
 *
 */
void timer_setCallBack(void(*a_ptr)(void))
{
    38d8:	df 93       	push	r29
    38da:	cf 93       	push	r28
    38dc:	00 d0       	rcall	.+0      	; 0x38de <timer_setCallBack+0x6>
    38de:	cd b7       	in	r28, 0x3d	; 61
    38e0:	de b7       	in	r29, 0x3e	; 62
    38e2:	9a 83       	std	Y+2, r25	; 0x02
    38e4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr  = a_ptr;
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	9a 81       	ldd	r25, Y+2	; 0x02
    38ea:	90 93 84 01 	sts	0x0184, r25
    38ee:	80 93 83 01 	sts	0x0183, r24
}
    38f2:	0f 90       	pop	r0
    38f4:	0f 90       	pop	r0
    38f6:	cf 91       	pop	r28
    38f8:	df 91       	pop	r29
    38fa:	08 95       	ret

000038fc <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
//void UART_init(uint32 baud_rate)
void UART_init(const UART_ConfigType * Config_Ptr)
{
    38fc:	df 93       	push	r29
    38fe:	cf 93       	push	r28
    3900:	00 d0       	rcall	.+0      	; 0x3902 <UART_init+0x6>
    3902:	00 d0       	rcall	.+0      	; 0x3904 <UART_init+0x8>
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	9c 83       	std	Y+4, r25	; 0x04
    390a:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    390c:	1a 82       	std	Y+2, r1	; 0x02
    390e:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3910:	eb e2       	ldi	r30, 0x2B	; 43
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	82 e0       	ldi	r24, 0x02	; 2
    3916:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3918:	ea e2       	ldi	r30, 0x2A	; 42
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	88 e1       	ldi	r24, 0x18	; 24
    391e:	80 83       	st	Z, r24
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/

	//UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
	SET_BIT(UCSRC,URSEL);
    3920:	a0 e4       	ldi	r26, 0x40	; 64
    3922:	b0 e0       	ldi	r27, 0x00	; 0
    3924:	e0 e4       	ldi	r30, 0x40	; 64
    3926:	f0 e0       	ldi	r31, 0x00	; 0
    3928:	80 81       	ld	r24, Z
    392a:	80 68       	ori	r24, 0x80	; 128
    392c:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xBF ) | ( (Config_Ptr->mode)   << 6);
    392e:	a0 e4       	ldi	r26, 0x40	; 64
    3930:	b0 e0       	ldi	r27, 0x00	; 0
    3932:	e0 e4       	ldi	r30, 0x40	; 64
    3934:	f0 e0       	ldi	r31, 0x00	; 0
    3936:	80 81       	ld	r24, Z
    3938:	28 2f       	mov	r18, r24
    393a:	2f 7b       	andi	r18, 0xBF	; 191
    393c:	eb 81       	ldd	r30, Y+3	; 0x03
    393e:	fc 81       	ldd	r31, Y+4	; 0x04
    3940:	80 81       	ld	r24, Z
    3942:	88 2f       	mov	r24, r24
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	00 24       	eor	r0, r0
    3948:	96 95       	lsr	r25
    394a:	87 95       	ror	r24
    394c:	07 94       	ror	r0
    394e:	96 95       	lsr	r25
    3950:	87 95       	ror	r24
    3952:	07 94       	ror	r0
    3954:	98 2f       	mov	r25, r24
    3956:	80 2d       	mov	r24, r0
    3958:	82 2b       	or	r24, r18
    395a:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xCF ) | ( (Config_Ptr->parity) << 4);
    395c:	a0 e4       	ldi	r26, 0x40	; 64
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e0 e4       	ldi	r30, 0x40	; 64
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	28 2f       	mov	r18, r24
    3968:	2f 7c       	andi	r18, 0xCF	; 207
    396a:	eb 81       	ldd	r30, Y+3	; 0x03
    396c:	fc 81       	ldd	r31, Y+4	; 0x04
    396e:	81 81       	ldd	r24, Z+1	; 0x01
    3970:	88 2f       	mov	r24, r24
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	82 95       	swap	r24
    3976:	92 95       	swap	r25
    3978:	90 7f       	andi	r25, 0xF0	; 240
    397a:	98 27       	eor	r25, r24
    397c:	80 7f       	andi	r24, 0xF0	; 240
    397e:	98 27       	eor	r25, r24
    3980:	82 2b       	or	r24, r18
    3982:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF7 ) | ( (Config_Ptr->stop)   << 3);
    3984:	a0 e4       	ldi	r26, 0x40	; 64
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e0 e4       	ldi	r30, 0x40	; 64
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	28 2f       	mov	r18, r24
    3990:	27 7f       	andi	r18, 0xF7	; 247
    3992:	eb 81       	ldd	r30, Y+3	; 0x03
    3994:	fc 81       	ldd	r31, Y+4	; 0x04
    3996:	82 81       	ldd	r24, Z+2	; 0x02
    3998:	88 2f       	mov	r24, r24
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	88 0f       	add	r24, r24
    399e:	99 1f       	adc	r25, r25
    39a0:	88 0f       	add	r24, r24
    39a2:	99 1f       	adc	r25, r25
    39a4:	88 0f       	add	r24, r24
    39a6:	99 1f       	adc	r25, r25
    39a8:	82 2b       	or	r24, r18
    39aa:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xF9 ) | ( (Config_Ptr->size)   << 1);
    39ac:	a0 e4       	ldi	r26, 0x40	; 64
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
    39b0:	e0 e4       	ldi	r30, 0x40	; 64
    39b2:	f0 e0       	ldi	r31, 0x00	; 0
    39b4:	80 81       	ld	r24, Z
    39b6:	28 2f       	mov	r18, r24
    39b8:	29 7f       	andi	r18, 0xF9	; 249
    39ba:	eb 81       	ldd	r30, Y+3	; 0x03
    39bc:	fc 81       	ldd	r31, Y+4	; 0x04
    39be:	83 81       	ldd	r24, Z+3	; 0x03
    39c0:	88 2f       	mov	r24, r24
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	88 0f       	add	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	82 2b       	or	r24, r18
    39ca:	8c 93       	st	X, r24
	UCSRC = ( UCSRC & 0xFE ) | (  Config_Ptr->mode);
    39cc:	a0 e4       	ldi	r26, 0x40	; 64
    39ce:	b0 e0       	ldi	r27, 0x00	; 0
    39d0:	e0 e4       	ldi	r30, 0x40	; 64
    39d2:	f0 e0       	ldi	r31, 0x00	; 0
    39d4:	80 81       	ld	r24, Z
    39d6:	98 2f       	mov	r25, r24
    39d8:	9e 7f       	andi	r25, 0xFE	; 254
    39da:	eb 81       	ldd	r30, Y+3	; 0x03
    39dc:	fc 81       	ldd	r31, Y+4	; 0x04
    39de:	80 81       	ld	r24, Z
    39e0:	89 2b       	or	r24, r25
    39e2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (USART_BAUDRATE * 8UL))) - 1);
    39e4:	87 e6       	ldi	r24, 0x67	; 103
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	9a 83       	std	Y+2, r25	; 0x02
    39ea:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    39ec:	e0 e4       	ldi	r30, 0x40	; 64
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	9a 81       	ldd	r25, Y+2	; 0x02
    39f4:	89 2f       	mov	r24, r25
    39f6:	99 27       	eor	r25, r25
    39f8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    39fa:	e9 e2       	ldi	r30, 0x29	; 41
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	80 83       	st	Z, r24
}
    3a02:	0f 90       	pop	r0
    3a04:	0f 90       	pop	r0
    3a06:	0f 90       	pop	r0
    3a08:	0f 90       	pop	r0
    3a0a:	cf 91       	pop	r28
    3a0c:	df 91       	pop	r29
    3a0e:	08 95       	ret

00003a10 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3a10:	df 93       	push	r29
    3a12:	cf 93       	push	r28
    3a14:	0f 92       	push	r0
    3a16:	cd b7       	in	r28, 0x3d	; 61
    3a18:	de b7       	in	r29, 0x3e	; 62
    3a1a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3a1c:	eb e2       	ldi	r30, 0x2B	; 43
    3a1e:	f0 e0       	ldi	r31, 0x00	; 0
    3a20:	80 81       	ld	r24, Z
    3a22:	88 2f       	mov	r24, r24
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	80 72       	andi	r24, 0x20	; 32
    3a28:	90 70       	andi	r25, 0x00	; 0
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	b9 f3       	breq	.-18     	; 0x3a1c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3a2e:	ec e2       	ldi	r30, 0x2C	; 44
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3a36:	0f 90       	pop	r0
    3a38:	cf 91       	pop	r28
    3a3a:	df 91       	pop	r29
    3a3c:	08 95       	ret

00003a3e <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3a3e:	df 93       	push	r29
    3a40:	cf 93       	push	r28
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3a46:	eb e2       	ldi	r30, 0x2B	; 43
    3a48:	f0 e0       	ldi	r31, 0x00	; 0
    3a4a:	80 81       	ld	r24, Z
    3a4c:	88 23       	and	r24, r24
    3a4e:	dc f7       	brge	.-10     	; 0x3a46 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3a50:	ec e2       	ldi	r30, 0x2C	; 44
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
}
    3a56:	cf 91       	pop	r28
    3a58:	df 91       	pop	r29
    3a5a:	08 95       	ret

00003a5c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3a5c:	df 93       	push	r29
    3a5e:	cf 93       	push	r28
    3a60:	00 d0       	rcall	.+0      	; 0x3a62 <UART_sendString+0x6>
    3a62:	0f 92       	push	r0
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	9b 83       	std	Y+3, r25	; 0x03
    3a6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3a6c:	19 82       	std	Y+1, r1	; 0x01
    3a6e:	0e c0       	rjmp	.+28     	; 0x3a8c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	28 2f       	mov	r18, r24
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	9b 81       	ldd	r25, Y+3	; 0x03
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	e2 0f       	add	r30, r18
    3a7e:	f3 1f       	adc	r31, r19
    3a80:	80 81       	ld	r24, Z
    3a82:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <UART_sendByte>
		i++;
    3a86:	89 81       	ldd	r24, Y+1	; 0x01
    3a88:	8f 5f       	subi	r24, 0xFF	; 255
    3a8a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
    3a8e:	28 2f       	mov	r18, r24
    3a90:	30 e0       	ldi	r19, 0x00	; 0
    3a92:	8a 81       	ldd	r24, Y+2	; 0x02
    3a94:	9b 81       	ldd	r25, Y+3	; 0x03
    3a96:	fc 01       	movw	r30, r24
    3a98:	e2 0f       	add	r30, r18
    3a9a:	f3 1f       	adc	r31, r19
    3a9c:	80 81       	ld	r24, Z
    3a9e:	88 23       	and	r24, r24
    3aa0:	39 f7       	brne	.-50     	; 0x3a70 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3aa2:	0f 90       	pop	r0
    3aa4:	0f 90       	pop	r0
    3aa6:	0f 90       	pop	r0
    3aa8:	cf 91       	pop	r28
    3aaa:	df 91       	pop	r29
    3aac:	08 95       	ret

00003aae <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3aae:	0f 93       	push	r16
    3ab0:	1f 93       	push	r17
    3ab2:	df 93       	push	r29
    3ab4:	cf 93       	push	r28
    3ab6:	00 d0       	rcall	.+0      	; 0x3ab8 <UART_receiveString+0xa>
    3ab8:	0f 92       	push	r0
    3aba:	cd b7       	in	r28, 0x3d	; 61
    3abc:	de b7       	in	r29, 0x3e	; 62
    3abe:	9b 83       	std	Y+3, r25	; 0x03
    3ac0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ac2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3ac4:	89 81       	ldd	r24, Y+1	; 0x01
    3ac6:	28 2f       	mov	r18, r24
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	8a 81       	ldd	r24, Y+2	; 0x02
    3acc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ace:	8c 01       	movw	r16, r24
    3ad0:	02 0f       	add	r16, r18
    3ad2:	13 1f       	adc	r17, r19
    3ad4:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_recieveByte>
    3ad8:	f8 01       	movw	r30, r16
    3ada:	80 83       	st	Z, r24
    3adc:	0f c0       	rjmp	.+30     	; 0x3afc <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3ade:	89 81       	ldd	r24, Y+1	; 0x01
    3ae0:	8f 5f       	subi	r24, 0xFF	; 255
    3ae2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3ae4:	89 81       	ldd	r24, Y+1	; 0x01
    3ae6:	28 2f       	mov	r18, r24
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	9b 81       	ldd	r25, Y+3	; 0x03
    3aee:	8c 01       	movw	r16, r24
    3af0:	02 0f       	add	r16, r18
    3af2:	13 1f       	adc	r17, r19
    3af4:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <UART_recieveByte>
    3af8:	f8 01       	movw	r30, r16
    3afa:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3afc:	89 81       	ldd	r24, Y+1	; 0x01
    3afe:	28 2f       	mov	r18, r24
    3b00:	30 e0       	ldi	r19, 0x00	; 0
    3b02:	8a 81       	ldd	r24, Y+2	; 0x02
    3b04:	9b 81       	ldd	r25, Y+3	; 0x03
    3b06:	fc 01       	movw	r30, r24
    3b08:	e2 0f       	add	r30, r18
    3b0a:	f3 1f       	adc	r31, r19
    3b0c:	80 81       	ld	r24, Z
    3b0e:	83 32       	cpi	r24, 0x23	; 35
    3b10:	31 f7       	brne	.-52     	; 0x3ade <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3b12:	89 81       	ldd	r24, Y+1	; 0x01
    3b14:	28 2f       	mov	r18, r24
    3b16:	30 e0       	ldi	r19, 0x00	; 0
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b1c:	fc 01       	movw	r30, r24
    3b1e:	e2 0f       	add	r30, r18
    3b20:	f3 1f       	adc	r31, r19
    3b22:	10 82       	st	Z, r1
}
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	1f 91       	pop	r17
    3b30:	0f 91       	pop	r16
    3b32:	08 95       	ret

00003b34 <__prologue_saves__>:
    3b34:	2f 92       	push	r2
    3b36:	3f 92       	push	r3
    3b38:	4f 92       	push	r4
    3b3a:	5f 92       	push	r5
    3b3c:	6f 92       	push	r6
    3b3e:	7f 92       	push	r7
    3b40:	8f 92       	push	r8
    3b42:	9f 92       	push	r9
    3b44:	af 92       	push	r10
    3b46:	bf 92       	push	r11
    3b48:	cf 92       	push	r12
    3b4a:	df 92       	push	r13
    3b4c:	ef 92       	push	r14
    3b4e:	ff 92       	push	r15
    3b50:	0f 93       	push	r16
    3b52:	1f 93       	push	r17
    3b54:	cf 93       	push	r28
    3b56:	df 93       	push	r29
    3b58:	cd b7       	in	r28, 0x3d	; 61
    3b5a:	de b7       	in	r29, 0x3e	; 62
    3b5c:	ca 1b       	sub	r28, r26
    3b5e:	db 0b       	sbc	r29, r27
    3b60:	0f b6       	in	r0, 0x3f	; 63
    3b62:	f8 94       	cli
    3b64:	de bf       	out	0x3e, r29	; 62
    3b66:	0f be       	out	0x3f, r0	; 63
    3b68:	cd bf       	out	0x3d, r28	; 61
    3b6a:	09 94       	ijmp

00003b6c <__epilogue_restores__>:
    3b6c:	2a 88       	ldd	r2, Y+18	; 0x12
    3b6e:	39 88       	ldd	r3, Y+17	; 0x11
    3b70:	48 88       	ldd	r4, Y+16	; 0x10
    3b72:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b74:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b76:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b78:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b7e:	b9 84       	ldd	r11, Y+9	; 0x09
    3b80:	c8 84       	ldd	r12, Y+8	; 0x08
    3b82:	df 80       	ldd	r13, Y+7	; 0x07
    3b84:	ee 80       	ldd	r14, Y+6	; 0x06
    3b86:	fd 80       	ldd	r15, Y+5	; 0x05
    3b88:	0c 81       	ldd	r16, Y+4	; 0x04
    3b8a:	1b 81       	ldd	r17, Y+3	; 0x03
    3b8c:	aa 81       	ldd	r26, Y+2	; 0x02
    3b8e:	b9 81       	ldd	r27, Y+1	; 0x01
    3b90:	ce 0f       	add	r28, r30
    3b92:	d1 1d       	adc	r29, r1
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	ed 01       	movw	r28, r26
    3ba0:	08 95       	ret

00003ba2 <itoa>:
    3ba2:	fb 01       	movw	r30, r22
    3ba4:	9f 01       	movw	r18, r30
    3ba6:	e8 94       	clt
    3ba8:	42 30       	cpi	r20, 0x02	; 2
    3baa:	c4 f0       	brlt	.+48     	; 0x3bdc <itoa+0x3a>
    3bac:	45 32       	cpi	r20, 0x25	; 37
    3bae:	b4 f4       	brge	.+44     	; 0x3bdc <itoa+0x3a>
    3bb0:	4a 30       	cpi	r20, 0x0A	; 10
    3bb2:	29 f4       	brne	.+10     	; 0x3bbe <itoa+0x1c>
    3bb4:	97 fb       	bst	r25, 7
    3bb6:	1e f4       	brtc	.+6      	; 0x3bbe <itoa+0x1c>
    3bb8:	90 95       	com	r25
    3bba:	81 95       	neg	r24
    3bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bbe:	64 2f       	mov	r22, r20
    3bc0:	77 27       	eor	r23, r23
    3bc2:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <__udivmodhi4>
    3bc6:	80 5d       	subi	r24, 0xD0	; 208
    3bc8:	8a 33       	cpi	r24, 0x3A	; 58
    3bca:	0c f0       	brlt	.+2      	; 0x3bce <itoa+0x2c>
    3bcc:	89 5d       	subi	r24, 0xD9	; 217
    3bce:	81 93       	st	Z+, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	00 97       	sbiw	r24, 0x00	; 0
    3bd4:	a1 f7       	brne	.-24     	; 0x3bbe <itoa+0x1c>
    3bd6:	16 f4       	brtc	.+4      	; 0x3bdc <itoa+0x3a>
    3bd8:	5d e2       	ldi	r21, 0x2D	; 45
    3bda:	51 93       	st	Z+, r21
    3bdc:	10 82       	st	Z, r1
    3bde:	c9 01       	movw	r24, r18
    3be0:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <strrev>

00003be4 <strrev>:
    3be4:	dc 01       	movw	r26, r24
    3be6:	fc 01       	movw	r30, r24
    3be8:	67 2f       	mov	r22, r23
    3bea:	71 91       	ld	r23, Z+
    3bec:	77 23       	and	r23, r23
    3bee:	e1 f7       	brne	.-8      	; 0x3be8 <strrev+0x4>
    3bf0:	32 97       	sbiw	r30, 0x02	; 2
    3bf2:	04 c0       	rjmp	.+8      	; 0x3bfc <strrev+0x18>
    3bf4:	7c 91       	ld	r23, X
    3bf6:	6d 93       	st	X+, r22
    3bf8:	70 83       	st	Z, r23
    3bfa:	62 91       	ld	r22, -Z
    3bfc:	ae 17       	cp	r26, r30
    3bfe:	bf 07       	cpc	r27, r31
    3c00:	c8 f3       	brcs	.-14     	; 0x3bf4 <strrev+0x10>
    3c02:	08 95       	ret

00003c04 <__udivmodhi4>:
    3c04:	aa 1b       	sub	r26, r26
    3c06:	bb 1b       	sub	r27, r27
    3c08:	51 e1       	ldi	r21, 0x11	; 17
    3c0a:	07 c0       	rjmp	.+14     	; 0x3c1a <__udivmodhi4_ep>

00003c0c <__udivmodhi4_loop>:
    3c0c:	aa 1f       	adc	r26, r26
    3c0e:	bb 1f       	adc	r27, r27
    3c10:	a6 17       	cp	r26, r22
    3c12:	b7 07       	cpc	r27, r23
    3c14:	10 f0       	brcs	.+4      	; 0x3c1a <__udivmodhi4_ep>
    3c16:	a6 1b       	sub	r26, r22
    3c18:	b7 0b       	sbc	r27, r23

00003c1a <__udivmodhi4_ep>:
    3c1a:	88 1f       	adc	r24, r24
    3c1c:	99 1f       	adc	r25, r25
    3c1e:	5a 95       	dec	r21
    3c20:	a9 f7       	brne	.-22     	; 0x3c0c <__udivmodhi4_loop>
    3c22:	80 95       	com	r24
    3c24:	90 95       	com	r25
    3c26:	bc 01       	movw	r22, r24
    3c28:	cd 01       	movw	r24, r26
    3c2a:	08 95       	ret

00003c2c <_exit>:
    3c2c:	f8 94       	cli

00003c2e <__stop_program>:
    3c2e:	ff cf       	rjmp	.-2      	; 0x3c2e <__stop_program>
